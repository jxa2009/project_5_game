
ProjectGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08009728  08009728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e4  080098e4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098ec  080098ec  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080098f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005524  200000a8  0800999c  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200055cc  0800999c  000255cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025dd3  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004478  00000000  00000000  00045eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ed0  00000000  00000000  0004a328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cc0  00000000  00000000  0004c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c15e  00000000  00000000  0004deb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017f45  00000000  00000000  0007a016  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105acc  00000000  00000000  00091f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197a27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084a4  00000000  00000000  00197aa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009710 	.word	0x08009710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08009710 	.word	0x08009710

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800029e:	f000 b9bd 	b.w	800061c <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b972 	b.w	800061c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14b      	bne.n	80003f6 <__udivmoddi4+0xa6>
 800035e:	428a      	cmp	r2, r1
 8000360:	4615      	mov	r5, r2
 8000362:	d967      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0720 	rsb	r7, r2, #32
 800036e:	fa01 f302 	lsl.w	r3, r1, r2
 8000372:	fa20 f707 	lsr.w	r7, r0, r7
 8000376:	4095      	lsls	r5, r2
 8000378:	ea47 0803 	orr.w	r8, r7, r3
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbb8 f7fe 	udiv	r7, r8, lr
 8000388:	fa1f fc85 	uxth.w	ip, r5
 800038c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000390:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000394:	fb07 f10c 	mul.w	r1, r7, ip
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18eb      	adds	r3, r5, r3
 800039e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80003a2:	f080 811b 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8118 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003ac:	3f02      	subs	r7, #2
 80003ae:	442b      	add	r3, r5
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003d8:	3802      	subs	r0, #2
 80003da:	442c      	add	r4, r5
 80003dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003e0:	eba4 040c 	sub.w	r4, r4, ip
 80003e4:	2700      	movs	r7, #0
 80003e6:	b11e      	cbz	r6, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c6 4300 	strd	r4, r3, [r6]
 80003f0:	4639      	mov	r1, r7
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xbe>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80eb 	beq.w	80005d6 <__udivmoddi4+0x286>
 8000400:	2700      	movs	r7, #0
 8000402:	e9c6 0100 	strd	r0, r1, [r6]
 8000406:	4638      	mov	r0, r7
 8000408:	4639      	mov	r1, r7
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f783 	clz	r7, r3
 8000412:	2f00      	cmp	r7, #0
 8000414:	d147      	bne.n	80004a6 <__udivmoddi4+0x156>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd0>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80fa 	bhi.w	8000614 <__udivmoddi4+0x2c4>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	4698      	mov	r8, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800042e:	e9c6 4800 	strd	r4, r8, [r6]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xe8>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 808f 	bne.w	8000560 <__udivmoddi4+0x210>
 8000442:	1b49      	subs	r1, r1, r5
 8000444:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000448:	fa1f f885 	uxth.w	r8, r5
 800044c:	2701      	movs	r7, #1
 800044e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	fb0e 111c 	mls	r1, lr, ip, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb08 f10c 	mul.w	r1, r8, ip
 8000460:	4299      	cmp	r1, r3
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x124>
 8000464:	18eb      	adds	r3, r5, r3
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4299      	cmp	r1, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2bc>
 8000472:	4684      	mov	ip, r0
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000480:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x14c>
 800048c:	192c      	adds	r4, r5, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x14a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80b6 	bhi.w	8000606 <__udivmoddi4+0x2b6>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x96>
 80004a6:	f1c7 0c20 	rsb	ip, r7, #32
 80004aa:	40bb      	lsls	r3, r7
 80004ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b4:	fa01 f407 	lsl.w	r4, r1, r7
 80004b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004c4:	4325      	orrs	r5, r4
 80004c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ca:	0c2c      	lsrs	r4, r5, #16
 80004cc:	fb08 3319 	mls	r3, r8, r9, r3
 80004d0:	fa1f fa8e 	uxth.w	sl, lr
 80004d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004d8:	fb09 f40a 	mul.w	r4, r9, sl
 80004dc:	429c      	cmp	r4, r3
 80004de:	fa02 f207 	lsl.w	r2, r2, r7
 80004e2:	fa00 f107 	lsl.w	r1, r0, r7
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f0:	f080 8087 	bcs.w	8000602 <__udivmoddi4+0x2b2>
 80004f4:	429c      	cmp	r4, r3
 80004f6:	f240 8084 	bls.w	8000602 <__udivmoddi4+0x2b2>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4473      	add	r3, lr
 8000500:	1b1b      	subs	r3, r3, r4
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3310 	mls	r3, r8, r0, r3
 800050c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000510:	fb00 fa0a 	mul.w	sl, r0, sl
 8000514:	45a2      	cmp	sl, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1e 0404 	adds.w	r4, lr, r4
 800051c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000520:	d26b      	bcs.n	80005fa <__udivmoddi4+0x2aa>
 8000522:	45a2      	cmp	sl, r4
 8000524:	d969      	bls.n	80005fa <__udivmoddi4+0x2aa>
 8000526:	3802      	subs	r0, #2
 8000528:	4474      	add	r4, lr
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	fba0 8902 	umull	r8, r9, r0, r2
 8000532:	eba4 040a 	sub.w	r4, r4, sl
 8000536:	454c      	cmp	r4, r9
 8000538:	46c2      	mov	sl, r8
 800053a:	464b      	mov	r3, r9
 800053c:	d354      	bcc.n	80005e8 <__udivmoddi4+0x298>
 800053e:	d051      	beq.n	80005e4 <__udivmoddi4+0x294>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d069      	beq.n	8000618 <__udivmoddi4+0x2c8>
 8000544:	ebb1 050a 	subs.w	r5, r1, sl
 8000548:	eb64 0403 	sbc.w	r4, r4, r3
 800054c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000550:	40fd      	lsrs	r5, r7
 8000552:	40fc      	lsrs	r4, r7
 8000554:	ea4c 0505 	orr.w	r5, ip, r5
 8000558:	e9c6 5400 	strd	r5, r4, [r6]
 800055c:	2700      	movs	r7, #0
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f703 	lsr.w	r7, r0, r3
 8000568:	4095      	lsls	r5, r2
 800056a:	fa01 f002 	lsl.w	r0, r1, r2
 800056e:	fa21 f303 	lsr.w	r3, r1, r3
 8000572:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000576:	4338      	orrs	r0, r7
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	fbb3 f7fe 	udiv	r7, r3, lr
 800057e:	fa1f f885 	uxth.w	r8, r5
 8000582:	fb0e 3317 	mls	r3, lr, r7, r3
 8000586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058a:	fb07 f308 	mul.w	r3, r7, r8
 800058e:	428b      	cmp	r3, r1
 8000590:	fa04 f402 	lsl.w	r4, r4, r2
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x256>
 8000596:	1869      	adds	r1, r5, r1
 8000598:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800059c:	d22f      	bcs.n	80005fe <__udivmoddi4+0x2ae>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d92d      	bls.n	80005fe <__udivmoddi4+0x2ae>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4429      	add	r1, r5
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	b281      	uxth	r1, r0
 80005aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b6:	fb00 f308 	mul.w	r3, r0, r8
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x27e>
 80005be:	1869      	adds	r1, r5, r1
 80005c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005c4:	d217      	bcs.n	80005f6 <__udivmoddi4+0x2a6>
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d915      	bls.n	80005f6 <__udivmoddi4+0x2a6>
 80005ca:	3802      	subs	r0, #2
 80005cc:	4429      	add	r1, r5
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005d4:	e73b      	b.n	800044e <__udivmoddi4+0xfe>
 80005d6:	4637      	mov	r7, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e709      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005dc:	4607      	mov	r7, r0
 80005de:	e6e7      	b.n	80003b0 <__udivmoddi4+0x60>
 80005e0:	4618      	mov	r0, r3
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e4:	4541      	cmp	r1, r8
 80005e6:	d2ab      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ec:	eb69 020e 	sbc.w	r2, r9, lr
 80005f0:	3801      	subs	r0, #1
 80005f2:	4613      	mov	r3, r2
 80005f4:	e7a4      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f6:	4660      	mov	r0, ip
 80005f8:	e7e9      	b.n	80005ce <__udivmoddi4+0x27e>
 80005fa:	4618      	mov	r0, r3
 80005fc:	e795      	b.n	800052a <__udivmoddi4+0x1da>
 80005fe:	4667      	mov	r7, ip
 8000600:	e7d1      	b.n	80005a6 <__udivmoddi4+0x256>
 8000602:	4681      	mov	r9, r0
 8000604:	e77c      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000606:	3802      	subs	r0, #2
 8000608:	442c      	add	r4, r5
 800060a:	e747      	b.n	800049c <__udivmoddi4+0x14c>
 800060c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000610:	442b      	add	r3, r5
 8000612:	e72f      	b.n	8000474 <__udivmoddi4+0x124>
 8000614:	4638      	mov	r0, r7
 8000616:	e708      	b.n	800042a <__udivmoddi4+0xda>
 8000618:	4637      	mov	r7, r6
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0xa0>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800062e:	f000 faa9 	bl	8000b84 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000638:	f107 030f 	add.w	r3, r7, #15
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fb3f 	bl	8000cc4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	0a1b      	lsrs	r3, r3, #8
 800064a:	b29b      	uxth	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000650:	f107 030f 	add.w	r3, r7, #15
 8000654:	2201      	movs	r2, #1
 8000656:	2123      	movs	r1, #35	; 0x23
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fb33 	bl	8000cc4 <GYRO_IO_Write>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800067a:	f000 fa83 	bl	8000b84 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2201      	movs	r2, #1
 8000682:	210f      	movs	r1, #15
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fb59 	bl	8000d3c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800068a:	79fb      	ldrb	r3, [r7, #7]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2201      	movs	r2, #1
 800069e:	2124      	movs	r1, #36	; 0x24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fb4b 	bl	8000d3c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	2201      	movs	r2, #1
 80006b4:	2124      	movs	r1, #36	; 0x24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fb04 	bl	8000cc4 <GYRO_IO_Write>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80006ce:	2300      	movs	r3, #0
 80006d0:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80006d8:	f107 030f 	add.w	r3, r7, #15
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 faef 	bl	8000cc4 <GYRO_IO_Write>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	4603      	mov	r3, r0
 80006f6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	2300      	movs	r3, #0
 80006fe:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000700:	f107 030f 	add.w	r3, r7, #15
 8000704:	2201      	movs	r2, #1
 8000706:	2130      	movs	r1, #48	; 0x30
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fb17 	bl	8000d3c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800070e:	f107 030e 	add.w	r3, r7, #14
 8000712:	2201      	movs	r2, #1
 8000714:	2122      	movs	r1, #34	; 0x22
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fb10 	bl	8000d3c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	121b      	asrs	r3, r3, #8
 800072c:	b25a      	sxtb	r2, r3
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	b25b      	sxtb	r3, r3
 8000732:	4313      	orrs	r3, r2
 8000734:	b25b      	sxtb	r3, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	f023 0320 	bic.w	r3, r3, #32
 8000740:	b2db      	uxtb	r3, r3
 8000742:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	7bbb      	ldrb	r3, [r7, #14]
 800074a:	4313      	orrs	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000750:	f107 030f 	add.w	r3, r7, #15
 8000754:	2201      	movs	r2, #1
 8000756:	2130      	movs	r1, #48	; 0x30
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fab3 	bl	8000cc4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800075e:	f107 030e 	add.w	r3, r7, #14
 8000762:	2201      	movs	r2, #1
 8000764:	2122      	movs	r1, #34	; 0x22
 8000766:	4618      	mov	r0, r3
 8000768:	f000 faac 	bl	8000cc4 <GYRO_IO_Write>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800077e:	f107 030f 	add.w	r3, r7, #15
 8000782:	2201      	movs	r2, #1
 8000784:	2122      	movs	r1, #34	; 0x22
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fad8 	bl	8000d3c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10a      	bne.n	80007a8 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000798:	b2db      	uxtb	r3, r3
 800079a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e00c      	b.n	80007c2 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d109      	bne.n	80007c2 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	f023 0308 	bic.w	r3, r3, #8
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80007c2:	f107 030f 	add.w	r3, r7, #15
 80007c6:	2201      	movs	r2, #1
 80007c8:	2122      	movs	r1, #34	; 0x22
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa7a 	bl	8000cc4 <GYRO_IO_Write>
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80007e2:	f107 030f 	add.w	r3, r7, #15
 80007e6:	2201      	movs	r2, #1
 80007e8:	2122      	movs	r1, #34	; 0x22
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 faa6 	bl	8000d3c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d107      	bne.n	8000806 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e009      	b.n	800081a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d106      	bne.n	800081a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	f023 0308 	bic.w	r3, r3, #8
 8000812:	b2db      	uxtb	r3, r3
 8000814:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800081a:	f107 030f 	add.w	r3, r7, #15
 800081e:	2201      	movs	r2, #1
 8000820:	2122      	movs	r1, #34	; 0x22
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fa4e 	bl	8000cc4 <GYRO_IO_Write>
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800083a:	f107 030f 	add.w	r3, r7, #15
 800083e:	2201      	movs	r2, #1
 8000840:	2121      	movs	r1, #33	; 0x21
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fa7a 	bl	8000d3c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800084e:	b2db      	uxtb	r3, r3
 8000850:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000852:	7bfa      	ldrb	r2, [r7, #15]
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4313      	orrs	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800085c:	f107 030f 	add.w	r3, r7, #15
 8000860:	2201      	movs	r2, #1
 8000862:	2121      	movs	r1, #33	; 0x21
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fa2d 	bl	8000cc4 <GYRO_IO_Write>
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800087c:	f107 030f 	add.w	r3, r7, #15
 8000880:	2201      	movs	r2, #1
 8000882:	2124      	movs	r1, #36	; 0x24
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fa59 	bl	8000d3c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	f023 0310 	bic.w	r3, r3, #16
 8000890:	b2db      	uxtb	r3, r3
 8000892:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4313      	orrs	r3, r2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800089e:	f107 030f 	add.w	r3, r7, #15
 80008a2:	2201      	movs	r2, #1
 80008a4:	2124      	movs	r1, #36	; 0x24
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fa0c 	bl	8000cc4 <GYRO_IO_Write>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80008de:	f107 030f 	add.w	r3, r7, #15
 80008e2:	2201      	movs	r2, #1
 80008e4:	2123      	movs	r1, #35	; 0x23
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fa28 	bl	8000d3c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	2206      	movs	r2, #6
 80008f2:	2128      	movs	r1, #40	; 0x28
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fa21 	bl	8000d3c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000900:	2b00      	cmp	r3, #0
 8000902:	d126      	bne.n	8000952 <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
 8000908:	e01f      	b.n	800094a <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	3301      	adds	r3, #1
 8000910:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000914:	4413      	add	r3, r2
 8000916:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800091a:	b29b      	uxth	r3, r3
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b29a      	uxth	r2, r3
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000928:	440b      	add	r3, r1
 800092a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800092e:	b29b      	uxth	r3, r3
 8000930:	4413      	add	r3, r2
 8000932:	b29b      	uxth	r3, r3
 8000934:	b21a      	sxth	r2, r3
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800093e:	440b      	add	r3, r1
 8000940:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	3301      	adds	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	2b02      	cmp	r3, #2
 800094e:	dddc      	ble.n	800090a <L3GD20_ReadXYZAngRate+0x56>
 8000950:	e025      	b.n	800099e <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	e01f      	b.n	8000998 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000960:	4413      	add	r3, r2
 8000962:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000966:	b29b      	uxth	r3, r3
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	b29a      	uxth	r2, r3
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	3301      	adds	r3, #1
 8000972:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000976:	440b      	add	r3, r1
 8000978:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800097c:	b29b      	uxth	r3, r3
 800097e:	4413      	add	r3, r2
 8000980:	b29b      	uxth	r3, r3
 8000982:	b21a      	sxth	r2, r3
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800098c:	440b      	add	r3, r1
 800098e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	3301      	adds	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	2b02      	cmp	r3, #2
 800099c:	dddc      	ble.n	8000958 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009a4:	2b10      	cmp	r3, #16
 80009a6:	d006      	beq.n	80009b6 <L3GD20_ReadXYZAngRate+0x102>
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	d007      	beq.n	80009bc <L3GD20_ReadXYZAngRate+0x108>
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d108      	bne.n	80009c2 <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <L3GD20_ReadXYZAngRate+0x154>)
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80009b4:	e005      	b.n	80009c2 <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <L3GD20_ReadXYZAngRate+0x158>)
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80009ba:	e002      	b.n	80009c2 <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <L3GD20_ReadXYZAngRate+0x15c>)
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80009c0:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	e017      	b.n	80009f8 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80009c8:	6a3b      	ldr	r3, [r7, #32]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009d0:	4413      	add	r3, r2
 80009d2:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80009ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ee:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	3301      	adds	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	dde4      	ble.n	80009c8 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	410c0000 	.word	0x410c0000
 8000a0c:	418c0000 	.word	0x418c0000
 8000a10:	428c0000 	.word	0x428c0000

08000a14 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <SPIx_Init+0x70>)
 8000a1a:	f003 fd92 	bl	8004542 <HAL_SPI_GetState>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12c      	bne.n	8000a7e <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <SPIx_Init+0x70>)
 8000a26:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <SPIx_Init+0x74>)
 8000a28:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <SPIx_Init+0x70>)
 8000a2c:	2210      	movs	r2, #16
 8000a2e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <SPIx_Init+0x70>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <SPIx_Init+0x70>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <SPIx_Init+0x70>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <SPIx_Init+0x70>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <SPIx_Init+0x70>)
 8000a4a:	2207      	movs	r2, #7
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <SPIx_Init+0x70>)
 8000a50:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a54:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <SPIx_Init+0x70>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <SPIx_Init+0x70>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a62:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <SPIx_Init+0x70>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SPIx_Init+0x70>)
 8000a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a70:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8000a72:	4804      	ldr	r0, [pc, #16]	; (8000a84 <SPIx_Init+0x70>)
 8000a74:	f000 f80a 	bl	8000a8c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <SPIx_Init+0x70>)
 8000a7a:	f003 fcd8 	bl	800442e <HAL_SPI_Init>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000c4 	.word	0x200000c4
 8000a88:	40003800 	.word	0x40003800

08000a8c <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <SPIx_MspInit+0x60>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <SPIx_MspInit+0x60>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <SPIx_MspInit+0x60>)
 8000aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <SPIx_MspInit+0x60>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <SPIx_MspInit+0x60>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <SPIx_MspInit+0x60>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000ac4:	231a      	movs	r3, #26
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000ad4:	2305      	movs	r3, #5
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <SPIx_MspInit+0x64>)
 8000ae0:	f001 fdd0 	bl	8002684 <HAL_GPIO_Init>
}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000c00 	.word	0x48000c00

08000af4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b0c:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8000b0e:	bf00      	nop
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d1f8      	bne.n	8000b10 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	330c      	adds	r3, #12
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8000b28:	bf00      	nop
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d1f8      	bne.n	8000b2a <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	330c      	adds	r3, #12
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8000b42:	bf00      	nop
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f8      	bne.n	8000b44 <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8000b52:	bf00      	nop
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	2b80      	cmp	r3, #128	; 0x80
 8000b60:	d0f8      	beq.n	8000b54 <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SPIx_WriteRead+0x8c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b70:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	200000c4 	.word	0x200000c4

08000b84 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000b8a:	4b49      	ldr	r3, [pc, #292]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a48      	ldr	r2, [pc, #288]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b46      	ldr	r3, [pc, #280]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	483e      	ldr	r0, [pc, #248]	; (8000cb4 <GYRO_IO_Init+0x130>)
 8000bba:	f001 fd63 	bl	8002684 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	483c      	ldr	r0, [pc, #240]	; (8000cb4 <GYRO_IO_Init+0x130>)
 8000bc4:	f001 ff06 	bl	80029d4 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a38      	ldr	r2, [pc, #224]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <GYRO_IO_Init+0x134>)
 8000bf8:	f001 fd44 	bl	8002684 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2101      	movs	r1, #1
 8000c00:	482d      	ldr	r0, [pc, #180]	; (8000cb8 <GYRO_IO_Init+0x134>)
 8000c02:	f001 fee7 	bl	80029d4 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4821      	ldr	r0, [pc, #132]	; (8000cbc <GYRO_IO_Init+0x138>)
 8000c36:	f001 fd25 	bl	8002684 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	481f      	ldr	r0, [pc, #124]	; (8000cbc <GYRO_IO_Init+0x138>)
 8000c40:	f001 fec8 	bl	80029d4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <GYRO_IO_Init+0x138>)
 8000c74:	f001 fd06 	bl	8002684 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c7e:	f043 0302 	orr.w	r3, r3, #2
 8000c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <GYRO_IO_Init+0x12c>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8000c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <GYRO_IO_Init+0x13c>)
 8000c9e:	f001 fcf1 	bl	8002684 <HAL_GPIO_Init>

  SPIx_Init();
 8000ca2:	f7ff feb7 	bl	8000a14 <SPIx_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48001000 	.word	0x48001000
 8000cb8:	48000800 	.word	0x48000800
 8000cbc:	48000c00 	.word	0x48000c00
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8000cd4:	883b      	ldrh	r3, [r7, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d903      	bls.n	8000ce2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	4813      	ldr	r0, [pc, #76]	; (8000d34 <GYRO_IO_Write+0x70>)
 8000ce8:	f001 fe74 	bl	80029d4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <GYRO_IO_Write+0x74>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <GYRO_IO_Write+0x74>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8000cfa:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fef8 	bl	8000af4 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8000d04:	e00a      	b.n	8000d1c <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fef2 	bl	8000af4 <SPIx_WriteRead>
    NumByteToWrite--;
 8000d10:	883b      	ldrh	r3, [r7, #0]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8000d1c:	883b      	ldrh	r3, [r7, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f1      	bne.n	8000d06 <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8000d22:	2201      	movs	r2, #1
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <GYRO_IO_Write+0x70>)
 8000d28:	f001 fe54 	bl	80029d4 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	48000c00 	.word	0x48000c00
 8000d38:	200000c4 	.word	0x200000c4

08000d3c <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	70fb      	strb	r3, [r7, #3]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8000d4c:	883b      	ldrh	r3, [r7, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d904      	bls.n	8000d5c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000d58:	70fb      	strb	r3, [r7, #3]
 8000d5a:	e003      	b.n	8000d64 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d62:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8000d64:	2200      	movs	r2, #0
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	4814      	ldr	r0, [pc, #80]	; (8000dbc <GYRO_IO_Read+0x80>)
 8000d6a:	f001 fe33 	bl	80029d4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <GYRO_IO_Read+0x84>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <GYRO_IO_Read+0x84>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8000d7c:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff feb7 	bl	8000af4 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8000d86:	e00c      	b.n	8000da2 <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff feb3 	bl	8000af4 <SPIx_WriteRead>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8000d96:	883b      	ldrh	r3, [r7, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8000da2:	883b      	ldrh	r3, [r7, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1ef      	bne.n	8000d88 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8000da8:	2201      	movs	r2, #1
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <GYRO_IO_Read+0x80>)
 8000dae:	f001 fe11 	bl	80029d4 <HAL_GPIO_WritePin>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	48000c00 	.word	0x48000c00
 8000dc0:	200000c4 	.word	0x200000c4

08000dc4 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	703b      	strb	r3, [r7, #0]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <BSP_GYRO_Init+0xcc>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	4798      	blx	r3
 8000de0:	4603      	mov	r3, r0
 8000de2:	2bd4      	cmp	r3, #212	; 0xd4
 8000de4:	d005      	beq.n	8000df2 <BSP_GYRO_Init+0x2e>
 8000de6:	4b2a      	ldr	r3, [pc, #168]	; (8000e90 <BSP_GYRO_Init+0xcc>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	4798      	blx	r3
 8000dec:	4603      	mov	r3, r0
 8000dee:	2bd5      	cmp	r3, #213	; 0xd5
 8000df0:	d146      	bne.n	8000e80 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <BSP_GYRO_Init+0xd0>)
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <BSP_GYRO_Init+0xcc>)
 8000df6:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8000e00:	2307      	movs	r3, #7
 8000e02:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8000e04:	2330      	movs	r3, #48	; 0x30
 8000e06:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8000e10:	2310      	movs	r3, #16
 8000e12:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8000e14:	793a      	ldrb	r2, [r7, #4]
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8000e2a:	7a3a      	ldrb	r2, [r7, #8]
 8000e2c:	7a7b      	ldrb	r3, [r7, #9]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8000e32:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	89bb      	ldrh	r3, [r7, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <BSP_GYRO_Init+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	89ba      	ldrh	r2, [r7, #12]
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8000e50:	2300      	movs	r3, #0
 8000e52:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8000e58:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8000e5a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <BSP_GYRO_Init+0xd0>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	89ba      	ldrh	r2, [r7, #12]
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <BSP_GYRO_Init+0xd0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	2010      	movs	r0, #16
 8000e78:	4798      	blx	r3

    ret = GYRO_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e001      	b.n	8000e84 <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000128 	.word	0x20000128

08000e98 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <BSP_GYRO_GetXYZ+0x24>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d004      	beq.n	8000eb4 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <BSP_GYRO_GetXYZ+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	4798      	blx	r3
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000128 	.word	0x20000128

08000ec0 <update_tail_positions>:
}
/**
 * Updates the positions of the previous positions based on the current position
 */
void update_tail_positions(PositionsS *pos, int calced_x, int calced_y)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	pos->s_pos[0] = pos->m_pos[0];
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	621a      	str	r2, [r3, #32]
	pos->s_pos[1] = pos->m_pos[1];
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	69da      	ldr	r2, [r3, #28]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
	pos->m_pos[0] = pos->b_pos[0];
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	619a      	str	r2, [r3, #24]
	pos->m_pos[1] = pos->b_pos[1];
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	61da      	str	r2, [r3, #28]
	pos->b_pos[0] = pos->curr_pos[0];
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
	pos->b_pos[1] = pos->curr_pos[1];
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	615a      	str	r2, [r3, #20]
	pos->curr_pos[0] = calced_x;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	609a      	str	r2, [r3, #8]
	pos->curr_pos[1] = calced_y;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	60da      	str	r2, [r3, #12]

}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <random_limit>:

/**
 * Takes a random number and limiter,  modulos the random number by the limiter and adds 1
 */
int random_limit (unsigned int rand,unsigned int lim)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	return (rand % lim) + 1;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	fb01 f202 	mul.w	r2, r1, r2
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	3301      	adds	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <set_home>:

/**
 * Sets the home cursor at the current location
 */
void set_home(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[s");
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <set_home+0x24>)
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <set_home+0x28>)
 8000f44:	6810      	ldr	r0, [r2, #0]
 8000f46:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <set_home+0x24>)
 8000f4a:	f7ff f941 	bl	80001d0 <strlen>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	4902      	ldr	r1, [pc, #8]	; (8000f60 <set_home+0x24>)
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <set_home+0x2c>)
 8000f58:	f003 ff7e 	bl	8004e58 <HAL_UART_Transmit>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200050c4 	.word	0x200050c4
 8000f64:	08009750 	.word	0x08009750
 8000f68:	2000517c 	.word	0x2000517c

08000f6c <return_home>:
/**
 * Sets the cursor the the previously set home position
 */
void return_home(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[u");
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <return_home+0x24>)
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <return_home+0x28>)
 8000f74:	6810      	ldr	r0, [r2, #0]
 8000f76:	6018      	str	r0, [r3, #0]
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <return_home+0x24>)
 8000f7a:	f7ff f929 	bl	80001d0 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	4902      	ldr	r1, [pc, #8]	; (8000f90 <return_home+0x24>)
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <return_home+0x2c>)
 8000f88:	f003 ff66 	bl	8004e58 <HAL_UART_Transmit>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200050c4 	.word	0x200050c4
 8000f94:	08009754 	.word	0x08009754
 8000f98:	2000517c 	.word	0x2000517c

08000f9c <move_cursor>:

/**
 * Moves the cursor the left or right based on x and up or down based on y.
 */
void move_cursor(int x, int y)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	// Move cursor forward
	if (x > 0)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dd13      	ble.n	8000fd4 <move_cursor+0x38>
	{
		sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[%dC",abs(x));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bfb8      	it	lt
 8000fb2:	425b      	neglt	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	492b      	ldr	r1, [pc, #172]	; (8001064 <move_cursor+0xc8>)
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <move_cursor+0xcc>)
 8000fba:	f007 ffad 	bl	8008f18 <siprintf>
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8000fbe:	482a      	ldr	r0, [pc, #168]	; (8001068 <move_cursor+0xcc>)
 8000fc0:	f7ff f906 	bl	80001d0 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	4927      	ldr	r1, [pc, #156]	; (8001068 <move_cursor+0xcc>)
 8000fcc:	4827      	ldr	r0, [pc, #156]	; (800106c <move_cursor+0xd0>)
 8000fce:	f003 ff43 	bl	8004e58 <HAL_UART_Transmit>
 8000fd2:	e015      	b.n	8001000 <move_cursor+0x64>
	}
	// Move cursor backward
	else if (x< 0)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	da12      	bge.n	8001000 <move_cursor+0x64>
	{
		sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[%dD",abs(x));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bfb8      	it	lt
 8000fe0:	425b      	neglt	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4922      	ldr	r1, [pc, #136]	; (8001070 <move_cursor+0xd4>)
 8000fe6:	4820      	ldr	r0, [pc, #128]	; (8001068 <move_cursor+0xcc>)
 8000fe8:	f007 ff96 	bl	8008f18 <siprintf>
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8000fec:	481e      	ldr	r0, [pc, #120]	; (8001068 <move_cursor+0xcc>)
 8000fee:	f7ff f8ef 	bl	80001d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	491b      	ldr	r1, [pc, #108]	; (8001068 <move_cursor+0xcc>)
 8000ffa:	481c      	ldr	r0, [pc, #112]	; (800106c <move_cursor+0xd0>)
 8000ffc:	f003 ff2c 	bl	8004e58 <HAL_UART_Transmit>
	}
	// Move cursor up
	if (y > 0)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	dd13      	ble.n	800102e <move_cursor+0x92>
	{
		sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[%dA",abs(y));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	bfb8      	it	lt
 800100c:	425b      	neglt	r3, r3
 800100e:	461a      	mov	r2, r3
 8001010:	4918      	ldr	r1, [pc, #96]	; (8001074 <move_cursor+0xd8>)
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <move_cursor+0xcc>)
 8001014:	f007 ff80 	bl	8008f18 <siprintf>
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <move_cursor+0xcc>)
 800101a:	f7ff f8d9 	bl	80001d0 <strlen>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	4910      	ldr	r1, [pc, #64]	; (8001068 <move_cursor+0xcc>)
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <move_cursor+0xd0>)
 8001028:	f003 ff16 	bl	8004e58 <HAL_UART_Transmit>
	{
		sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[%dB",abs(y));
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
	}

}
 800102c:	e015      	b.n	800105a <move_cursor+0xbe>
	else if (y < 0)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da12      	bge.n	800105a <move_cursor+0xbe>
		sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[%dB",abs(y));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	bfb8      	it	lt
 800103a:	425b      	neglt	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <move_cursor+0xdc>)
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <move_cursor+0xcc>)
 8001042:	f007 ff69 	bl	8008f18 <siprintf>
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001046:	4808      	ldr	r0, [pc, #32]	; (8001068 <move_cursor+0xcc>)
 8001048:	f7ff f8c2 	bl	80001d0 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	2364      	movs	r3, #100	; 0x64
 8001052:	4905      	ldr	r1, [pc, #20]	; (8001068 <move_cursor+0xcc>)
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <move_cursor+0xd0>)
 8001056:	f003 feff 	bl	8004e58 <HAL_UART_Transmit>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	08009758 	.word	0x08009758
 8001068:	200050c4 	.word	0x200050c4
 800106c:	2000517c 	.word	0x2000517c
 8001070:	08009760 	.word	0x08009760
 8001074:	08009768 	.word	0x08009768
 8001078:	08009770 	.word	0x08009770

0800107c <draw_char>:
/**
 * Moves the cursor to the given x and y and then replaces the character with update_char
 * Top left most unit is (1,1)
 */
void draw_char(int x, int y, char update_char)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	4613      	mov	r3, r2
 8001088:	71fb      	strb	r3, [r7, #7]
	return_home();
 800108a:	f7ff ff6f 	bl	8000f6c <return_home>
	int true_x = x - 1;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3b01      	subs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
	int true_y = (y*-1) + 1;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f1c3 0301 	rsb	r3, r3, #1
 800109a:	613b      	str	r3, [r7, #16]
	move_cursor(true_x,true_y);
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff7c 	bl	8000f9c <move_cursor>
	sprintf((char*)gbl_uart2_transmitBuffer,"\x7F%c",update_char);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4909      	ldr	r1, [pc, #36]	; (80010d0 <draw_char+0x54>)
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <draw_char+0x58>)
 80010ac:	f007 ff34 	bl	8008f18 <siprintf>
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 80010b0:	4808      	ldr	r0, [pc, #32]	; (80010d4 <draw_char+0x58>)
 80010b2:	f7ff f88d 	bl	80001d0 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	4905      	ldr	r1, [pc, #20]	; (80010d4 <draw_char+0x58>)
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <draw_char+0x5c>)
 80010c0:	f003 feca 	bl	8004e58 <HAL_UART_Transmit>

	return_home();
 80010c4:	f7ff ff52 	bl	8000f6c <return_home>
}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08009778 	.word	0x08009778
 80010d4:	200050c4 	.word	0x200050c4
 80010d8:	2000517c 	.word	0x2000517c

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f001 f9af 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f871 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f000 fa67 	bl	80015bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80010ee:	f000 f90d 	bl	800130c <MX_I2C1_Init>
  MX_I2C2_Init();
 80010f2:	f000 f94b 	bl	800138c <MX_I2C2_Init>
  MX_RNG_Init();
 80010f6:	f000 f989 	bl	800140c <MX_RNG_Init>
  MX_SPI2_Init();
 80010fa:	f000 f99b 	bl	8001434 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80010fe:	f000 fa2d 	bl	800155c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001102:	f000 f9d5 	bl	80014b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001106:	4824      	ldr	r0, [pc, #144]	; (8001198 <main+0xbc>)
 8001108:	f003 fa54 	bl	80045b4 <HAL_TIM_Base_Start_IT>
	/* Init the uart Buffers */
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++)  {
 800110c:	2300      	movs	r3, #0
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	e00c      	b.n	800112c <main+0x50>
       gbl_uart2_transmitBuffer[i] = '0' + i;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	3230      	adds	r2, #48	; 0x30
 8001118:	b2d1      	uxtb	r1, r2
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <main+0xc0>)
 800111c:	54d1      	strb	r1, [r2, r3]
       gbl_uart2_receiveBuffer[i] = 0;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <main+0xc4>)
 8001122:	2100      	movs	r1, #0
 8001124:	54d1      	strb	r1, [r2, r3]
	for (unsigned char i = 0; i < UART_BUFFER_SIZE; i++)  {
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	3301      	adds	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b4f      	cmp	r3, #79	; 0x4f
 8001130:	d9ef      	bls.n	8001112 <main+0x36>
    }
	sprintf((char*)gbl_uart2_transmitBuffer,"Project Game Startup\a\n\r");
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <main+0xc0>)
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <main+0xc8>)
 8001136:	4615      	mov	r5, r2
 8001138:	461c      	mov	r4, r3
 800113a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113c:	6028      	str	r0, [r5, #0]
 800113e:	6069      	str	r1, [r5, #4]
 8001140:	60aa      	str	r2, [r5, #8]
 8001142:	60eb      	str	r3, [r5, #12]
 8001144:	cc03      	ldmia	r4!, {r0, r1}
 8001146:	6128      	str	r0, [r5, #16]
 8001148:	6169      	str	r1, [r5, #20]
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 800114a:	4814      	ldr	r0, [pc, #80]	; (800119c <main+0xc0>)
 800114c:	f7ff f840 	bl	80001d0 <strlen>
 8001150:	4603      	mov	r3, r0
 8001152:	b29a      	uxth	r2, r3
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	4911      	ldr	r1, [pc, #68]	; (800119c <main+0xc0>)
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0xcc>)
 800115a:	f003 fe7d 	bl	8004e58 <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800115e:	f004 fbeb 	bl	8005938 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <main+0xd0>)
 8001164:	2101      	movs	r1, #1
 8001166:	2001      	movs	r0, #1
 8001168:	f004 fd24 	bl	8005bb4 <osSemaphoreNew>
 800116c:	4602      	mov	r2, r0
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <main+0xd4>)
 8001170:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <main+0xd8>)
 8001174:	2100      	movs	r1, #0
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <main+0xdc>)
 8001178:	f004 fc48 	bl	8005a0c <osThreadNew>
 800117c:	4602      	mov	r2, r0
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <main+0xe0>)
 8001180:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <main+0xe4>)
 8001184:	2100      	movs	r1, #0
 8001186:	480f      	ldr	r0, [pc, #60]	; (80011c4 <main+0xe8>)
 8001188:	f004 fc40 	bl	8005a0c <osThreadNew>
 800118c:	4602      	mov	r2, r0
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <main+0xec>)
 8001190:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001192:	f004 fc05 	bl	80059a0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001196:	e7fe      	b.n	8001196 <main+0xba>
 8001198:	2000513c 	.word	0x2000513c
 800119c:	200050c4 	.word	0x200050c4
 80011a0:	20004fec 	.word	0x20004fec
 80011a4:	0800977c 	.word	0x0800977c
 80011a8:	2000517c 	.word	0x2000517c
 80011ac:	08009858 	.word	0x08009858
 80011b0:	20005070 	.word	0x20005070
 80011b4:	08009810 	.word	0x08009810
 80011b8:	08001959 	.word	0x08001959
 80011bc:	20004ee8 	.word	0x20004ee8
 80011c0:	08009834 	.word	0x08009834
 80011c4:	08001b39 	.word	0x08001b39
 80011c8:	20005040 	.word	0x20005040

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0b8      	sub	sp, #224	; 0xe0
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d6:	2244      	movs	r2, #68	; 0x44
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f007 fe93 	bl	8008f06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2288      	movs	r2, #136	; 0x88
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f007 fe85 	bl	8008f06 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80011fc:	f001 fd28 	bl	8002c50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <SystemClock_Config+0x138>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001206:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <SystemClock_Config+0x138>)
 8001208:	f023 0318 	bic.w	r3, r3, #24
 800120c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001210:	2314      	movs	r3, #20
 8001212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001216:	2301      	movs	r3, #1
 8001218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001228:	2360      	movs	r3, #96	; 0x60
 800122a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001234:	2301      	movs	r3, #1
 8001236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001240:	2328      	movs	r3, #40	; 0x28
 8001242:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001246:	2307      	movs	r3, #7
 8001248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800125c:	4618      	mov	r0, r3
 800125e:	f001 fd6b 	bl	8002d38 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001268:	f000 fe66 	bl	8001f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800128e:	2104      	movs	r1, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f002 f937 	bl	8003504 <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800129c:	f000 fe4c 	bl	8001f38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <SystemClock_Config+0x13c>)
 80012a2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80012b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012b4:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80012be:	2310      	movs	r3, #16
 80012c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012c2:	2307      	movs	r3, #7
 80012c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012d2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fb4a 	bl	8003970 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80012e2:	f000 fe29 	bl	8001f38 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ea:	f001 fccf 	bl	8002c8c <HAL_PWREx_ControlVoltageScaling>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80012f4:	f000 fe20 	bl	8001f38 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012f8:	f002 fe20 	bl	8003f3c <HAL_RCCEx_EnableMSIPLLMode>
}
 80012fc:	bf00      	nop
 80012fe:	37e0      	adds	r7, #224	; 0xe0
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	000400c2 	.word	0x000400c2

0800130c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_I2C1_Init+0x74>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <MX_I2C1_Init+0x78>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_I2C1_Init+0x74>)
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <MX_I2C1_Init+0x7c>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800131c:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_I2C1_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_I2C1_Init+0x74>)
 8001324:	2201      	movs	r2, #1
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_I2C1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_I2C1_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_I2C1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_I2C1_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001346:	480e      	ldr	r0, [pc, #56]	; (8001380 <MX_I2C1_Init+0x74>)
 8001348:	f001 fb5c 	bl	8002a04 <HAL_I2C_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001352:	f000 fdf1 	bl	8001f38 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4809      	ldr	r0, [pc, #36]	; (8001380 <MX_I2C1_Init+0x74>)
 800135a:	f001 fbe2 	bl	8002b22 <HAL_I2CEx_ConfigAnalogFilter>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001364:	f000 fde8 	bl	8001f38 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_I2C1_Init+0x74>)
 800136c:	f001 fc24 	bl	8002bb8 <HAL_I2CEx_ConfigDigitalFilter>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 fddf 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20004f50 	.word	0x20004f50
 8001384:	40005400 	.word	0x40005400
 8001388:	10909cec 	.word	0x10909cec

0800138c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_I2C2_Init+0x74>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <MX_I2C2_Init+0x78>)
 8001394:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_I2C2_Init+0x74>)
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <MX_I2C2_Init+0x7c>)
 800139a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_I2C2_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_I2C2_Init+0x74>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_I2C2_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_I2C2_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_I2C2_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_I2C2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_I2C2_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_I2C2_Init+0x74>)
 80013c8:	f001 fb1c 	bl	8002a04 <HAL_I2C_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013d2:	f000 fdb1 	bl	8001f38 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <MX_I2C2_Init+0x74>)
 80013da:	f001 fba2 	bl	8002b22 <HAL_I2CEx_ConfigAnalogFilter>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013e4:	f000 fda8 	bl	8001f38 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_I2C2_Init+0x74>)
 80013ec:	f001 fbe4 	bl	8002bb8 <HAL_I2CEx_ConfigDigitalFilter>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013f6:	f000 fd9f 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20004fa0 	.word	0x20004fa0
 8001404:	40005800 	.word	0x40005800
 8001408:	10909cec 	.word	0x10909cec

0800140c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_RNG_Init+0x20>)
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <MX_RNG_Init+0x24>)
 8001414:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_RNG_Init+0x20>)
 8001418:	f002 ff6a 	bl	80042f0 <HAL_RNG_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001422:	f000 fd89 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20005060 	.word	0x20005060
 8001430:	50060800 	.word	0x50060800

08001434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_SPI2_Init+0x74>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <MX_SPI2_Init+0x78>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_SPI2_Init+0x74>)
 800144e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001452:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_SPI2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001466:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_SPI2_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001482:	2207      	movs	r2, #7
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI2_Init+0x74>)
 800148e:	2208      	movs	r2, #8
 8001490:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_SPI2_Init+0x74>)
 8001494:	f002 ffcb 	bl	800442e <HAL_SPI_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800149e:	f000 fd4b 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20004eec 	.word	0x20004eec
 80014ac:	40003800 	.word	0x40003800

080014b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_TIM2_Init+0xa8>)
 80014d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <MX_TIM2_Init+0xa8>)
 80014d8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_TIM2_Init+0xa8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_TIM2_Init+0xa8>)
 80014e6:	2264      	movs	r2, #100	; 0x64
 80014e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM2_Init+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_TIM2_Init+0xa8>)
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <MX_TIM2_Init+0xa8>)
 80014f8:	f003 f831 	bl	800455e <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001502:	f000 fd19 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	4619      	mov	r1, r3
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <MX_TIM2_Init+0xa8>)
 8001514:	f003 f997 	bl	8004846 <HAL_TIM_ConfigClockSource>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800151e:	f000 fd0b 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	480a      	ldr	r0, [pc, #40]	; (8001558 <MX_TIM2_Init+0xa8>)
 8001530:	f003 fb9e 	bl	8004c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800153a:	f000 fcfd 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_SetPriority(TIM2_IRQn,0,0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	201c      	movs	r0, #28
 8001544:	f001 f874 	bl	8002630 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001548:	201c      	movs	r0, #28
 800154a:	f001 f88d 	bl	8002668 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000513c 	.word	0x2000513c

0800155c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <MX_USART2_UART_Init+0x5c>)
 8001564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_USART2_UART_Init+0x58>)
 80015a0:	f003 fc0c 	bl	8004dbc <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015aa:	f000 fcc5 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000517c 	.word	0x2000517c
 80015b8:	40004400 	.word	0x40004400

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	4bb7      	ldr	r3, [pc, #732]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4ab6      	ldr	r2, [pc, #728]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4bb4      	ldr	r3, [pc, #720]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	4bb1      	ldr	r3, [pc, #708]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4ab0      	ldr	r2, [pc, #704]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4bae      	ldr	r3, [pc, #696]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	4bab      	ldr	r3, [pc, #684]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4aaa      	ldr	r2, [pc, #680]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4ba8      	ldr	r3, [pc, #672]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4ba5      	ldr	r3, [pc, #660]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4aa4      	ldr	r2, [pc, #656]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4ba2      	ldr	r3, [pc, #648]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b9f      	ldr	r3, [pc, #636]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a9e      	ldr	r2, [pc, #632]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b9c      	ldr	r3, [pc, #624]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a98      	ldr	r2, [pc, #608]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <MX_GPIO_Init+0x2f4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f240 1109 	movw	r1, #265	; 0x109
 8001668:	4892      	ldr	r0, [pc, #584]	; (80018b4 <MX_GPIO_Init+0x2f8>)
 800166a:	f001 f9b3 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	210c      	movs	r1, #12
 8001672:	4891      	ldr	r0, [pc, #580]	; (80018b8 <MX_GPIO_Init+0x2fc>)
 8001674:	f001 f9ae 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167e:	488f      	ldr	r0, [pc, #572]	; (80018bc <MX_GPIO_Init+0x300>)
 8001680:	f001 f9a8 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800168a:	488c      	ldr	r0, [pc, #560]	; (80018bc <MX_GPIO_Init+0x300>)
 800168c:	f001 f9a2 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	488a      	ldr	r0, [pc, #552]	; (80018c0 <MX_GPIO_Init+0x304>)
 8001696:	f001 f99d 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_MCK_Pin SAI1_FS_Pin SAI1_SCK_Pin SAI1_SD_Pin 
                           AUDIO_DIN_Pin */
  GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin 
 800169a:	23f4      	movs	r3, #244	; 0xf4
 800169c:	61fb      	str	r3, [r7, #28]
                          |AUDIO_DIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80016aa:	230d      	movs	r3, #13
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	487f      	ldr	r0, [pc, #508]	; (80018b4 <MX_GPIO_Init+0x2f8>)
 80016b6:	f000 ffe5 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80016ba:	2308      	movs	r3, #8
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2302      	movs	r3, #2
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4878      	ldr	r0, [pc, #480]	; (80018b4 <MX_GPIO_Init+0x2f8>)
 80016d2:	f000 ffd7 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80016d6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016dc:	4b79      	ldr	r3, [pc, #484]	; (80018c4 <MX_GPIO_Init+0x308>)
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4874      	ldr	r0, [pc, #464]	; (80018bc <MX_GPIO_Init+0x300>)
 80016ec:	f000 ffca 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 80016f0:	2307      	movs	r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	486e      	ldr	r0, [pc, #440]	; (80018bc <MX_GPIO_Init+0x300>)
 8001704:	f000 ffbe 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : VLCD_Pin SEG22_Pin SEG1_Pin SEG14_Pin 
                           SEG9_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin 
 8001708:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800170c:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800171a:	230b      	movs	r3, #11
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4865      	ldr	r0, [pc, #404]	; (80018bc <MX_GPIO_Init+0x300>)
 8001726:	f000 ffad 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin 
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin 
 800172a:	232f      	movs	r3, #47	; 0x2f
 800172c:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001732:	2302      	movs	r3, #2
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001740:	f000 ffa0 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001744:	2310      	movs	r3, #16
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <MX_GPIO_Init+0x308>)
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f000 ff93 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG23_Pin SEG0_Pin COM0_Pin COM1_Pin 
                           COM2_Pin SEG10_Pin */
  GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin 
 800175e:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001762:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001770:	230b      	movs	r3, #11
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f000 ff81 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG21_Pin SEG2_Pin SEG20_Pin SEG3_Pin 
                           SEG19_Pin SEG4_Pin SEG11_Pin SEG12_Pin 
                           COM3_Pin */
  GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin 
 8001782:	f24f 2333 	movw	r3, #62003	; 0xf233
 8001786:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin 
                          |COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001794:	230b      	movs	r3, #11
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4846      	ldr	r0, [pc, #280]	; (80018b8 <MX_GPIO_Init+0x2fc>)
 80017a0:	f000 ff70 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 80017a4:	2304      	movs	r3, #4
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	483f      	ldr	r0, [pc, #252]	; (80018b8 <MX_GPIO_Init+0x2fc>)
 80017bc:	f000 ff62 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 80017c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4836      	ldr	r0, [pc, #216]	; (80018b4 <MX_GPIO_Init+0x2f8>)
 80017da:	f000 ff53 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_CLK_Pin */
  GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80017de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80017f0:	230d      	movs	r3, #13
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	482e      	ldr	r0, [pc, #184]	; (80018b4 <MX_GPIO_Init+0x2f8>)
 80017fc:	f000 ff42 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_CLK_Pin QSPI_CS_Pin QSPI_D0_Pin QSPI_D1_Pin 
                           QSPI_D2_Pin QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin 
 8001800:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001804:	61fb      	str	r3, [r7, #28]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001812:	230a      	movs	r3, #10
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4825      	ldr	r0, [pc, #148]	; (80018b4 <MX_GPIO_Init+0x2f8>)
 800181e:	f000 ff31 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG18_Pin SEG5_Pin SEG17_Pin SEG6_Pin 
                           SEG16_Pin SEG7_Pin SEG15_Pin SEG8_Pin */
  GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin 
 8001822:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001826:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001834:	230b      	movs	r3, #11
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	4820      	ldr	r0, [pc, #128]	; (80018c0 <MX_GPIO_Init+0x304>)
 8001840:	f000 ff20 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8001844:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4817      	ldr	r0, [pc, #92]	; (80018bc <MX_GPIO_Init+0x300>)
 800185e:	f000 ff11 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001862:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001874:	230a      	movs	r3, #10
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f000 feff 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8001886:	2305      	movs	r3, #5
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_GPIO_Init+0x308>)
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4809      	ldr	r0, [pc, #36]	; (80018c0 <MX_GPIO_Init+0x304>)
 800189a:	f000 fef3 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e00c      	b.n	80018c8 <MX_GPIO_Init+0x30c>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48001000 	.word	0x48001000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	48000c00 	.word	0x48000c00
 80018c4:	10120000 	.word	0x10120000
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	481d      	ldr	r0, [pc, #116]	; (8001948 <MX_GPIO_Init+0x38c>)
 80018d2:	f000 fed7 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80018d6:	2308      	movs	r3, #8
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4817      	ldr	r0, [pc, #92]	; (800194c <MX_GPIO_Init+0x390>)
 80018ee:	f000 fec9 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80018f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_GPIO_Init+0x394>)
 80018fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4811      	ldr	r0, [pc, #68]	; (800194c <MX_GPIO_Init+0x390>)
 8001908:	f000 febc 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 800190c:	2301      	movs	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_GPIO_Init+0x398>)
 8001924:	f000 feae 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001928:	2302      	movs	r3, #2
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_GPIO_Init+0x394>)
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <MX_GPIO_Init+0x398>)
 800193c:	f000 fea2 	bl	8002684 <HAL_GPIO_Init>

}
 8001940:	bf00      	nop
 8001942:	3730      	adds	r7, #48	; 0x30
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	48000c00 	.word	0x48000c00
 800194c:	48000400 	.word	0x48000400
 8001950:	10120000 	.word	0x10120000
 8001954:	48001000 	.word	0x48001000

08001958 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001958:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  if(BSP_GYRO_Init() != HAL_OK)  {
 8001962:	f7ff fa2f 	bl	8000dc4 <BSP_GYRO_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <StartDefaultTask+0x18>
	    /* Initialization Error */
	    Error_Handler();
 800196c:	f000 fae4 	bl	8001f38 <Error_Handler>
  }
  // RNG EXAMPLE

  int32_t x_rate = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  int32_t y_rate = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  int max_x = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  int min_x = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f004 f8e9 	bl	8005b58 <osDelay>

	/* Get Raw values */

	BSP_GYRO_GetXYZ(gbl_buffer);
 8001986:	4862      	ldr	r0, [pc, #392]	; (8001b10 <StartDefaultTask+0x1b8>)
 8001988:	f7ff fa86 	bl	8000e98 <BSP_GYRO_GetXYZ>
//	sprintf((char*)gbl_uart2_transmitBuffer,"X:%d Y:%d Z:%d\r\n", (int32_t)gbl_buffer[0], (int32_t)gbl_buffer[1], (int32_t)gbl_buffer[2]);
//	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);

	// x value processing
	x_rate = gbl_buffer[0] - DEFAULT_X_SUB_VAL;
 800198c:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <StartDefaultTask+0x1b8>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800199a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199e:	ee17 3a90 	vmov	r3, s15
 80019a2:	617b      	str	r3, [r7, #20]
	if ((x_rate < X_MIN_RANGE) || (x_rate > X_MAX_RANGE))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	4a5b      	ldr	r2, [pc, #364]	; (8001b14 <StartDefaultTask+0x1bc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	db04      	blt.n	80019b6 <StartDefaultTask+0x5e>
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f240 228a 	movw	r2, #650	; 0x28a
 80019b2:	4293      	cmp	r3, r2
 80019b4:	dd49      	ble.n	8001a4a <StartDefaultTask+0xf2>
	{
		movements.total_dx += x_rate;
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <StartDefaultTask+0x1c0>)
 80019b8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	469b      	mov	fp, r3
 80019c0:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80019c4:	eb1b 0301 	adds.w	r3, fp, r1
 80019c8:	eb4c 0402 	adc.w	r4, ip, r2
 80019cc:	4a52      	ldr	r2, [pc, #328]	; (8001b18 <StartDefaultTask+0x1c0>)
 80019ce:	e9c2 3400 	strd	r3, r4, [r2]

		movements.x_pos = (movements.total_dx - X_TOTAL_MIN_RANGE) / (X_DIVIDING_FACTOR);
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <StartDefaultTask+0x1c0>)
 80019d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019d8:	4950      	ldr	r1, [pc, #320]	; (8001b1c <StartDefaultTask+0x1c4>)
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	eb13 0b01 	adds.w	fp, r3, r1
 80019e2:	eb44 0c02 	adc.w	ip, r4, r2
 80019e6:	4658      	mov	r0, fp
 80019e8:	4661      	mov	r1, ip
 80019ea:	4a4d      	ldr	r2, [pc, #308]	; (8001b20 <StartDefaultTask+0x1c8>)
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	f7fe fc46 	bl	8000280 <__aeabi_ldivmod>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <StartDefaultTask+0x1c0>)
 80019fc:	611a      	str	r2, [r3, #16]

		if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK)
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <StartDefaultTask+0x1cc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d021      	beq.n	8001a4a <StartDefaultTask+0xf2>
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <StartDefaultTask+0x1cc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 f96f 	bl	8005cf0 <osSemaphoreAcquire>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d118      	bne.n	8001a4a <StartDefaultTask+0xf2>
		{

			if (movements.x_pos < 1)
 8001a18:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	dc03      	bgt.n	8001a28 <StartDefaultTask+0xd0>
			{
				calced_x = 1;
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <StartDefaultTask+0x1d0>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e00b      	b.n	8001a40 <StartDefaultTask+0xe8>
			}
			else if ( movements.x_pos > 20)
 8001a28:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	2b14      	cmp	r3, #20
 8001a2e:	dd03      	ble.n	8001a38 <StartDefaultTask+0xe0>
			{
				calced_x = 20;
 8001a30:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <StartDefaultTask+0x1d0>)
 8001a32:	2214      	movs	r2, #20
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e003      	b.n	8001a40 <StartDefaultTask+0xe8>
			}
			else
			{
				calced_x = movements.x_pos;
 8001a38:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	4a3a      	ldr	r2, [pc, #232]	; (8001b28 <StartDefaultTask+0x1d0>)
 8001a3e:	6013      	str	r3, [r2, #0]
			}
			osSemaphoreRelease(myBinarySem01Handle);
 8001a40:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <StartDefaultTask+0x1cc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 f9b9 	bl	8005dbc <osSemaphoreRelease>
		}
	}


	y_rate = gbl_buffer[1] - DEFAULT_Y_SUB_VAL;
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <StartDefaultTask+0x1b8>)
 8001a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a50:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b2c <StartDefaultTask+0x1d4>
 8001a54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5c:	ee17 3a90 	vmov	r3, s15
 8001a60:	613b      	str	r3, [r7, #16]
	if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK)
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <StartDefaultTask+0x1cc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d08a      	beq.n	8001980 <StartDefaultTask+0x28>
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <StartDefaultTask+0x1cc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 f93d 	bl	8005cf0 <osSemaphoreAcquire>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d181      	bne.n	8001980 <StartDefaultTask+0x28>
	{
		if((y_rate < Y_MIN_RANGE) || (y_rate > Y_MAX_RANGE))
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f513 7f61 	cmn.w	r3, #900	; 0x384
 8001a82:	db03      	blt.n	8001a8c <StartDefaultTask+0x134>
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001a8a:	dd37      	ble.n	8001afc <StartDefaultTask+0x1a4>
		{
			movements.total_dy += y_rate;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001a8e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	469b      	mov	fp, r3
 8001a96:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001a9a:	eb1b 0301 	adds.w	r3, fp, r1
 8001a9e:	eb4c 0402 	adc.w	r4, ip, r2
 8001aa2:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001aa4:	e9c2 3402 	strd	r3, r4, [r2, #8]

			movements.y_pos = (movements.total_dy - Y_TOTAL_MIN_RANGE) / (Y_DIVIDING_FACTOR);
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001aaa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001aae:	a216      	add	r2, pc, #88	; (adr r2, 8001b08 <StartDefaultTask+0x1b0>)
 8001ab0:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001ab4:	eb13 0b01 	adds.w	fp, r3, r1
 8001ab8:	eb44 0c02 	adc.w	ip, r4, r2
 8001abc:	4658      	mov	r0, fp
 8001abe:	4661      	mov	r1, ip
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <StartDefaultTask+0x1d8>)
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	f7fe fbdb 	bl	8000280 <__aeabi_ldivmod>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001ad2:	615a      	str	r2, [r3, #20]
			// If range is exceeded go stay only at the bounds
			if (movements.y_pos < 1)
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dc03      	bgt.n	8001ae4 <StartDefaultTask+0x18c>
			{
				calced_y = 1;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <StartDefaultTask+0x1dc>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e00b      	b.n	8001afc <StartDefaultTask+0x1a4>
			}
			else if ( movements.y_pos > 40)
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	2b28      	cmp	r3, #40	; 0x28
 8001aea:	dd03      	ble.n	8001af4 <StartDefaultTask+0x19c>
			{
				calced_y = 40;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <StartDefaultTask+0x1dc>)
 8001aee:	2228      	movs	r2, #40	; 0x28
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e003      	b.n	8001afc <StartDefaultTask+0x1a4>
			}
			else
			{
				calced_y = movements.y_pos;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <StartDefaultTask+0x1c0>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <StartDefaultTask+0x1dc>)
 8001afa:	6013      	str	r3, [r2, #0]
			}
		}
		osSemaphoreRelease(myBinarySem01Handle);
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <StartDefaultTask+0x1cc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 f95b 	bl	8005dbc <osSemaphoreRelease>
    osDelay(1);
 8001b06:	e73b      	b.n	8001980 <StartDefaultTask+0x28>
 8001b08:	03197500 	.word	0x03197500
 8001b0c:	00000000 	.word	0x00000000
 8001b10:	2000012c 	.word	0x2000012c
 8001b14:	fffffd76 	.word	0xfffffd76
 8001b18:	20005048 	.word	0x20005048
 8001b1c:	016e3600 	.word	0x016e3600
 8001b20:	00231860 	.word	0x00231860
 8001b24:	20005070 	.word	0x20005070
 8001b28:	2000503c 	.word	0x2000503c
 8001b2c:	43978000 	.word	0x43978000
 8001b30:	002625a0 	.word	0x002625a0
 8001b34:	20004f9c 	.word	0x20004f9c

08001b38 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b092      	sub	sp, #72	; 0x48
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	unsigned int next_tick = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
	int score = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
	int level =1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // Level 1 round time
	  int round_time = 1000;
 8001b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
	  int round_iter = 1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
	// Init the game board
	for(int i = 0; i <BOARD_HEIGHT;i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
 8001b5a:	e016      	b.n	8001b8a <StartTask02+0x52>
	{
		strcpy(game_board[i],"xxxxxxxxxxxxxxxxxxxx");
 8001b5c:	6a3a      	ldr	r2, [r7, #32]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00da      	lsls	r2, r3, #3
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <StartTask02+0x90>)
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <StartTask02+0x94>)
 8001b6e:	461d      	mov	r5, r3
 8001b70:	4614      	mov	r4, r2
 8001b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b74:	6028      	str	r0, [r5, #0]
 8001b76:	6069      	str	r1, [r5, #4]
 8001b78:	60aa      	str	r2, [r5, #8]
 8001b7a:	60eb      	str	r3, [r5, #12]
 8001b7c:	6820      	ldr	r0, [r4, #0]
 8001b7e:	6128      	str	r0, [r5, #16]
 8001b80:	7923      	ldrb	r3, [r4, #4]
 8001b82:	752b      	strb	r3, [r5, #20]
	for(int i = 0; i <BOARD_HEIGHT;i++)
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	3301      	adds	r3, #1
 8001b88:	623b      	str	r3, [r7, #32]
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	2b27      	cmp	r3, #39	; 0x27
 8001b8e:	dde5      	ble.n	8001b5c <StartTask02+0x24>
	}
//
	sprintf((char*)gbl_uart2_transmitBuffer,"Score:%d Level: %d Round Iter: %d Round Time: %d Time: %d ms\r\n", score,level,round_iter,round_time, master_tick);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <StartTask02+0x98>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba2:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <StartTask02+0x9c>)
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <StartTask02+0xa0>)
 8001ba6:	f007 f9b7 	bl	8008f18 <siprintf>
	HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001baa:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <StartTask02+0xa0>)
 8001bac:	f7fe fb10 	bl	80001d0 <strlen>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2364      	movs	r3, #100	; 0x64
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <StartTask02+0xa0>)
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <StartTask02+0xa4>)
 8001bba:	f003 f94d 	bl	8004e58 <HAL_UART_Transmit>
	// Save cursor at first position
	set_home();
 8001bbe:	f7ff f9bd 	bl	8000f3c <set_home>

	// Print the game board
	for(int i = 0; i < BOARD_HEIGHT;i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e025      	b.n	8001c14 <StartTask02+0xdc>
 8001bc8:	200051fc 	.word	0x200051fc
 8001bcc:	08009794 	.word	0x08009794
 8001bd0:	20004ee4 	.word	0x20004ee4
 8001bd4:	080097ac 	.word	0x080097ac
 8001bd8:	200050c4 	.word	0x200050c4
 8001bdc:	2000517c 	.word	0x2000517c
	{
		sprintf((char*)gbl_uart2_transmitBuffer,"%s\r\n", game_board[i]);
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00da      	lsls	r2, r3, #3
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <StartTask02+0x300>)
 8001bee:	4413      	add	r3, r2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4992      	ldr	r1, [pc, #584]	; (8001e3c <StartTask02+0x304>)
 8001bf4:	4892      	ldr	r0, [pc, #584]	; (8001e40 <StartTask02+0x308>)
 8001bf6:	f007 f98f 	bl	8008f18 <siprintf>
		HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001bfa:	4891      	ldr	r0, [pc, #580]	; (8001e40 <StartTask02+0x308>)
 8001bfc:	f7fe fae8 	bl	80001d0 <strlen>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	498e      	ldr	r1, [pc, #568]	; (8001e40 <StartTask02+0x308>)
 8001c08:	488e      	ldr	r0, [pc, #568]	; (8001e44 <StartTask02+0x30c>)
 8001c0a:	f003 f925 	bl	8004e58 <HAL_UART_Transmit>
	for(int i = 0; i < BOARD_HEIGHT;i++)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b27      	cmp	r3, #39	; 0x27
 8001c18:	dde2      	ble.n	8001be0 <StartTask02+0xa8>

	}
	return_home();
 8001c1a:	f7ff f9a7 	bl	8000f6c <return_home>
	// Init positions

	positions.b_pos[0] = 1;
 8001c1e:	4b8a      	ldr	r3, [pc, #552]	; (8001e48 <StartTask02+0x310>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	611a      	str	r2, [r3, #16]
	positions.b_pos[1] = 1;
 8001c24:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <StartTask02+0x310>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	615a      	str	r2, [r3, #20]
	positions.m_pos[0] = 1;
 8001c2a:	4b87      	ldr	r3, [pc, #540]	; (8001e48 <StartTask02+0x310>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	619a      	str	r2, [r3, #24]
	positions.m_pos[1] = 1;
 8001c30:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <StartTask02+0x310>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	61da      	str	r2, [r3, #28]
	positions.s_pos[0] = 1;
 8001c36:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <StartTask02+0x310>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	621a      	str	r2, [r3, #32]
	positions.s_pos[1] = 1;
 8001c3c:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <StartTask02+0x310>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24
	positions.curr_pos[0] = 1;
 8001c42:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <StartTask02+0x310>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	609a      	str	r2, [r3, #8]
	positions.curr_pos[1] = 1;
 8001c48:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <StartTask02+0x310>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	60da      	str	r2, [r3, #12]
	// Generate initial random values
	  unsigned int random_x;
	  unsigned int random_y;
	  // random value for x
	  HAL_RNG_GenerateRandomNumber(&hrng,&random_x);
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	4619      	mov	r1, r3
 8001c54:	487d      	ldr	r0, [pc, #500]	; (8001e4c <StartTask02+0x314>)
 8001c56:	f002 fb9b 	bl	8004390 <HAL_RNG_GenerateRandomNumber>
	  HAL_RNG_GenerateRandomNumber(&hrng,&random_y);
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	487a      	ldr	r0, [pc, #488]	; (8001e4c <StartTask02+0x314>)
 8001c62:	f002 fb95 	bl	8004390 <HAL_RNG_GenerateRandomNumber>
	  positions.rand_pos[0]= random_limit(random_x,BOARD_WIDTH);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2114      	movs	r1, #20
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f952 	bl	8000f14 <random_limit>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <StartTask02+0x310>)
 8001c74:	601a      	str	r2, [r3, #0]
	  positions.rand_pos[1] = random_limit(random_y,BOARD_HEIGHT);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2128      	movs	r1, #40	; 0x28
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f94a 	bl	8000f14 <random_limit>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b71      	ldr	r3, [pc, #452]	; (8001e48 <StartTask02+0x310>)
 8001c84:	605a      	str	r2, [r3, #4]
	  draw_char(positions.rand_pos[0],positions.rand_pos[1],' ');
 8001c86:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <StartTask02+0x310>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <StartTask02+0x310>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7ff f9f3 	bl	800107c <draw_char>


	  int last_x = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61bb      	str	r3, [r7, #24]
	  int last_y = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
  for(;;)
  {

	  // master tick updates once every .01s. Update the board every .05s
	  // Done this way to avoid overloading an interrupt function
	  if((master_tick> next_tick) && (level <= 6))
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <StartTask02+0x318>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f080 8128 	bcs.w	8001efa <StartTask02+0x3c2>
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	f300 8124 	bgt.w	8001efa <StartTask02+0x3c2>
	  {
		  // Draw there the point is every time
		  draw_char(positions.rand_pos[0],positions.rand_pos[1],' ');
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <StartTask02+0x310>)
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <StartTask02+0x310>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7ff f9dd 	bl	800107c <draw_char>
		  move_cursor(0,1);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff f969 	bl	8000f9c <move_cursor>
		  sprintf((char*)gbl_uart2_transmitBuffer,"\x1b[K");
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <StartTask02+0x308>)
 8001ccc:	4a61      	ldr	r2, [pc, #388]	; (8001e54 <StartTask02+0x31c>)
 8001cce:	6810      	ldr	r0, [r2, #0]
 8001cd0:	6018      	str	r0, [r3, #0]
		  HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001cd2:	485b      	ldr	r0, [pc, #364]	; (8001e40 <StartTask02+0x308>)
 8001cd4:	f7fe fa7c 	bl	80001d0 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	2364      	movs	r3, #100	; 0x64
 8001cde:	4958      	ldr	r1, [pc, #352]	; (8001e40 <StartTask02+0x308>)
 8001ce0:	4858      	ldr	r0, [pc, #352]	; (8001e44 <StartTask02+0x30c>)
 8001ce2:	f003 f8b9 	bl	8004e58 <HAL_UART_Transmit>
//
		  sprintf((char*)gbl_uart2_transmitBuffer,"Score:%d Level: %d Round Iter: %d Round Time: %d Time: %d ms\r\n", score,level,round_iter,round_time, master_tick);
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <StartTask02+0x318>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf8:	4957      	ldr	r1, [pc, #348]	; (8001e58 <StartTask02+0x320>)
 8001cfa:	4851      	ldr	r0, [pc, #324]	; (8001e40 <StartTask02+0x308>)
 8001cfc:	f007 f90c 	bl	8008f18 <siprintf>
		  HAL_UART_Transmit(&huart2, gbl_uart2_transmitBuffer, strlen((char *)gbl_uart2_transmitBuffer),100);
 8001d00:	484f      	ldr	r0, [pc, #316]	; (8001e40 <StartTask02+0x308>)
 8001d02:	f7fe fa65 	bl	80001d0 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	2364      	movs	r3, #100	; 0x64
 8001d0c:	494c      	ldr	r1, [pc, #304]	; (8001e40 <StartTask02+0x308>)
 8001d0e:	484d      	ldr	r0, [pc, #308]	; (8001e44 <StartTask02+0x30c>)
 8001d10:	f003 f8a2 	bl	8004e58 <HAL_UART_Transmit>


		  // First update positions
		  next_tick = master_tick + 5;
 8001d14:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <StartTask02+0x318>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3305      	adds	r3, #5
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34

		  // Recover the original input
		  //draw_char(positions.s_pos[0],positions.s_pos[1],'x');
		  last_x = positions.s_pos[0];
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <StartTask02+0x310>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	61bb      	str	r3, [r7, #24]
		  last_y = positions.s_pos[1];
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <StartTask02+0x310>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	617b      	str	r3, [r7, #20]
		  if (myBinarySem01Handle != NULL && osSemaphoreAcquire(myBinarySem01Handle,0) == osOK)
 8001d28:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <StartTask02+0x324>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d015      	beq.n	8001d5c <StartTask02+0x224>
 8001d30:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <StartTask02+0x324>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 ffda 	bl	8005cf0 <osSemaphoreAcquire>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <StartTask02+0x224>
		  {
		  update_tail_positions(&positions, calced_x, calced_y);
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <StartTask02+0x328>)
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <StartTask02+0x32c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	483e      	ldr	r0, [pc, #248]	; (8001e48 <StartTask02+0x310>)
 8001d4e:	f7ff f8b7 	bl	8000ec0 <update_tail_positions>
		  osSemaphoreRelease(myBinarySem01Handle);
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <StartTask02+0x324>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 f830 	bl	8005dbc <osSemaphoreRelease>
		  }
//		  if ((positions.s_pos[0] != positions.m_pos[0]) && (positions.s_pos[1] != positions.m_pos[1]))
//		  {

		  draw_char(last_x,last_y,'x');
 8001d5c:	2278      	movs	r2, #120	; 0x78
 8001d5e:	6979      	ldr	r1, [r7, #20]
 8001d60:	69b8      	ldr	r0, [r7, #24]
 8001d62:	f7ff f98b 	bl	800107c <draw_char>
		  draw_char(positions.s_pos[0],positions.s_pos[1],'.');
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <StartTask02+0x310>)
 8001d68:	6a18      	ldr	r0, [r3, #32]
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <StartTask02+0x310>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	222e      	movs	r2, #46	; 0x2e
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7ff f983 	bl	800107c <draw_char>
//		  }
//		  if ((positions.m_pos[0] != positions.b_pos[0]) && (positions.m_pos[1] != positions.b_pos[1]))
//		  {
		  draw_char(positions.m_pos[0],positions.m_pos[1],'o');
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <StartTask02+0x310>)
 8001d78:	6998      	ldr	r0, [r3, #24]
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <StartTask02+0x310>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	226f      	movs	r2, #111	; 0x6f
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7ff f97b 	bl	800107c <draw_char>
//		  }
//		  if ((positions.b_pos[0] != positions.curr_pos[0]) && (positions.b_pos[1] != positions.curr_pos[1]))
//		  {
		  draw_char(positions.b_pos[0],positions.b_pos[1],'O');
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <StartTask02+0x310>)
 8001d88:	6918      	ldr	r0, [r3, #16]
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <StartTask02+0x310>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	224f      	movs	r2, #79	; 0x4f
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7ff f973 	bl	800107c <draw_char>
//		  }
		  draw_char(positions.curr_pos[0],positions.curr_pos[1],'@');
 8001d96:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <StartTask02+0x310>)
 8001d98:	6898      	ldr	r0, [r3, #8]
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <StartTask02+0x310>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2240      	movs	r2, #64	; 0x40
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7ff f96b 	bl	800107c <draw_char>

		  // If cursor is on the random character when time ends
		  if((positions.rand_pos[0] == positions.curr_pos[0]) && (positions.rand_pos[1] == positions.curr_pos[1]) && (master_tick > round_time))
 8001da6:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <StartTask02+0x310>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <StartTask02+0x310>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d15a      	bne.n	8001e68 <StartTask02+0x330>
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <StartTask02+0x310>)
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <StartTask02+0x310>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d154      	bne.n	8001e68 <StartTask02+0x330>
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <StartTask02+0x318>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d94f      	bls.n	8001e68 <StartTask02+0x330>
		  {
			  // Increment the score
			  score++;
 8001dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dca:	3301      	adds	r3, #1
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
			  round_iter++;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24

			  master_tick = 0;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <StartTask02+0x318>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
			  next_tick = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34

			  // Fill in old character
			  draw_char(positions.rand_pos[0],positions.rand_pos[1],'x');
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <StartTask02+0x310>)
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <StartTask02+0x310>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2278      	movs	r2, #120	; 0x78
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7ff f947 	bl	800107c <draw_char>
			  // Draw new random character
			  HAL_RNG_GenerateRandomNumber(&hrng,&random_x);
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4619      	mov	r1, r3
 8001df4:	4815      	ldr	r0, [pc, #84]	; (8001e4c <StartTask02+0x314>)
 8001df6:	f002 facb 	bl	8004390 <HAL_RNG_GenerateRandomNumber>
			  HAL_RNG_GenerateRandomNumber(&hrng,&random_y);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4812      	ldr	r0, [pc, #72]	; (8001e4c <StartTask02+0x314>)
 8001e02:	f002 fac5 	bl	8004390 <HAL_RNG_GenerateRandomNumber>
			  positions.rand_pos[0]= random_limit(random_x,BOARD_WIDTH);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2114      	movs	r1, #20
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f882 	bl	8000f14 <random_limit>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <StartTask02+0x310>)
 8001e14:	601a      	str	r2, [r3, #0]
			  positions.rand_pos[1] = random_limit(random_y,BOARD_HEIGHT);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2128      	movs	r1, #40	; 0x28
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f87a 	bl	8000f14 <random_limit>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <StartTask02+0x310>)
 8001e24:	605a      	str	r2, [r3, #4]
			  draw_char(positions.rand_pos[0],positions.rand_pos[1],' ');
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <StartTask02+0x310>)
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <StartTask02+0x310>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7ff f923 	bl	800107c <draw_char>
 8001e36:	e050      	b.n	8001eda <StartTask02+0x3a2>
 8001e38:	200051fc 	.word	0x200051fc
 8001e3c:	080097ec 	.word	0x080097ec
 8001e40:	200050c4 	.word	0x200050c4
 8001e44:	2000517c 	.word	0x2000517c
 8001e48:	20005114 	.word	0x20005114
 8001e4c:	20005060 	.word	0x20005060
 8001e50:	20004ee4 	.word	0x20004ee4
 8001e54:	080097f4 	.word	0x080097f4
 8001e58:	080097ac 	.word	0x080097ac
 8001e5c:	20005070 	.word	0x20005070
 8001e60:	2000503c 	.word	0x2000503c
 8001e64:	20004f9c 	.word	0x20004f9c

		  }
		  else if (master_tick > round_time)
 8001e68:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <StartTask02+0x3cc>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d933      	bls.n	8001eda <StartTask02+0x3a2>
		  {
			  round_iter++;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	3301      	adds	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24

			  master_tick = 0;
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <StartTask02+0x3cc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
			  next_tick = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
			  draw_char(positions.rand_pos[0],positions.rand_pos[1],'x');
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <StartTask02+0x3d0>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <StartTask02+0x3d0>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2278      	movs	r2, #120	; 0x78
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7ff f8f5 	bl	800107c <draw_char>
			  // Draw new random character
			  HAL_RNG_GenerateRandomNumber(&hrng,&random_x);
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	4619      	mov	r1, r3
 8001e98:	481c      	ldr	r0, [pc, #112]	; (8001f0c <StartTask02+0x3d4>)
 8001e9a:	f002 fa79 	bl	8004390 <HAL_RNG_GenerateRandomNumber>
			  HAL_RNG_GenerateRandomNumber(&hrng,&random_y);
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4819      	ldr	r0, [pc, #100]	; (8001f0c <StartTask02+0x3d4>)
 8001ea6:	f002 fa73 	bl	8004390 <HAL_RNG_GenerateRandomNumber>
			  positions.rand_pos[0]= random_limit(random_x,BOARD_WIDTH);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2114      	movs	r1, #20
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f830 	bl	8000f14 <random_limit>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <StartTask02+0x3d0>)
 8001eb8:	601a      	str	r2, [r3, #0]
			  positions.rand_pos[1] = random_limit(random_y,BOARD_HEIGHT);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2128      	movs	r1, #40	; 0x28
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f828 	bl	8000f14 <random_limit>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <StartTask02+0x3d0>)
 8001ec8:	605a      	str	r2, [r3, #4]
			  draw_char(positions.rand_pos[0],positions.rand_pos[1],' ');
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <StartTask02+0x3d0>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <StartTask02+0x3d0>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7ff f8d1 	bl	800107c <draw_char>
		  }
		  if (round_iter > ROUNDS_PER_LEVEL)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	dd0c      	ble.n	8001efa <StartTask02+0x3c2>
		  {
			  // Decrease round time and reset round iterations
			  level++;
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
			  round_time = (round_time * 2 / 3);
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <StartTask02+0x3d8>)
 8001eec:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef0:	17db      	asrs	r3, r3, #31
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
			  round_iter = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
		  }
	  }

    osDelay(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f003 fe2c 	bl	8005b58 <osDelay>
	  if((master_tick> next_tick) && (level <= 6))
 8001f00:	e6cd      	b.n	8001c9e <StartTask02+0x166>
 8001f02:	bf00      	nop
 8001f04:	20004ee4 	.word	0x20004ee4
 8001f08:	20005114 	.word	0x20005114
 8001f0c:	20005060 	.word	0x20005060
 8001f10:	55555556 	.word	0x55555556

08001f14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f26:	f000 faad 	bl	8002484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40012c00 	.word	0x40012c00

08001f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6593      	str	r3, [r2, #88]	; 0x58
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	210f      	movs	r1, #15
 8001f82:	f06f 0001 	mvn.w	r0, #1
 8001f86:	f000 fb53 	bl	8002630 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_I2C_MspInit+0xd8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d128      	bne.n	800200c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a2d      	ldr	r2, [pc, #180]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8001fc0:	f043 0302 	orr.w	r3, r3, #2
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	4619      	mov	r1, r3
 8001fec:	4822      	ldr	r0, [pc, #136]	; (8002078 <HAL_I2C_MspInit+0xe0>)
 8001fee:	f000 fb49 	bl	8002684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8001ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800200a:	e02d      	b.n	8002068 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_I2C_MspInit+0xe4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d128      	bne.n	8002068 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800202e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002034:	2312      	movs	r3, #18
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002038:	2301      	movs	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002040:	2304      	movs	r3, #4
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	480b      	ldr	r0, [pc, #44]	; (8002078 <HAL_I2C_MspInit+0xe0>)
 800204c:	f000 fb1a 	bl	8002684 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 8002056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_I2C_MspInit+0xdc>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	bf00      	nop
 800206a:	3730      	adds	r7, #48	; 0x30
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40005400 	.word	0x40005400
 8002074:	40021000 	.word	0x40021000
 8002078:	48000400 	.word	0x48000400
 800207c:	40005800 	.word	0x40005800

08002080 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_RNG_MspInit+0x38>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10b      	bne.n	80020aa <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_RNG_MspInit+0x3c>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RNG_MspInit+0x3c>)
 8002098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_RNG_MspInit+0x3c>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	50060800 	.word	0x50060800
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_SPI_MspInit+0x7c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d127      	bne.n	8002132 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_SPI_MspInit+0x80>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_SPI_MspInit+0x80>)
 80020e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_SPI_MspInit+0x80>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <HAL_SPI_MspInit+0x80>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a10      	ldr	r2, [pc, #64]	; (8002140 <HAL_SPI_MspInit+0x80>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_SPI_MspInit+0x80>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8002112:	231a      	movs	r3, #26
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002122:	2305      	movs	r3, #5
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	4805      	ldr	r0, [pc, #20]	; (8002144 <HAL_SPI_MspInit+0x84>)
 800212e:	f000 faa9 	bl	8002684 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40003800 	.word	0x40003800
 8002140:	40021000 	.word	0x40021000
 8002144:	48000c00 	.word	0x48000c00

08002148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002158:	d113      	bne.n	8002182 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <HAL_TIM_Base_MspInit+0x44>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a0b      	ldr	r2, [pc, #44]	; (800218c <HAL_TIM_Base_MspInit+0x44>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_TIM_Base_MspInit+0x44>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2105      	movs	r1, #5
 8002176:	201c      	movs	r0, #28
 8002178:	f000 fa5a 	bl	8002630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800217c:	201c      	movs	r0, #28
 800217e:	f000 fa73 	bl	8002668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_UART_MspInit+0x7c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d127      	bne.n	8002202 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_UART_MspInit+0x80>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <HAL_UART_MspInit+0x80>)
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_UART_MspInit+0x80>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_UART_MspInit+0x80>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_UART_MspInit+0x80>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_UART_MspInit+0x80>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021e2:	2360      	movs	r3, #96	; 0x60
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ea:	2301      	movs	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f2:	2307      	movs	r3, #7
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4805      	ldr	r0, [pc, #20]	; (8002214 <HAL_UART_MspInit+0x84>)
 80021fe:	f000 fa41 	bl	8002684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	; 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40004400 	.word	0x40004400
 8002210:	40021000 	.word	0x40021000
 8002214:	48000c00 	.word	0x48000c00

08002218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	2019      	movs	r0, #25
 800222e:	f000 f9ff 	bl	8002630 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8002232:	2019      	movs	r0, #25
 8002234:	f000 fa18 	bl	8002668 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_InitTick+0x9c>)
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <HAL_InitTick+0x9c>)
 800223e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002242:	6613      	str	r3, [r2, #96]	; 0x60
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_InitTick+0x9c>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002250:	f107 0210 	add.w	r2, r7, #16
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f001 faf6 	bl	800384c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002260:	f001 fade 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8002264:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_InitTick+0xa0>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0c9b      	lsrs	r3, r3, #18
 8002270:	3b01      	subs	r3, #1
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_InitTick+0xa4>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_InitTick+0xa8>)
 8002278:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_InitTick+0xa4>)
 800227c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002280:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_InitTick+0xa4>)
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_InitTick+0xa4>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_InitTick+0xa4>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002294:	4809      	ldr	r0, [pc, #36]	; (80022bc <HAL_InitTick+0xa4>)
 8002296:	f002 f962 	bl	800455e <HAL_TIM_Base_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022a0:	4806      	ldr	r0, [pc, #24]	; (80022bc <HAL_InitTick+0xa4>)
 80022a2:	f002 f987 	bl	80045b4 <HAL_TIM_Base_Start_IT>
 80022a6:	4603      	mov	r3, r0
 80022a8:	e000      	b.n	80022ac <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	431bde83 	.word	0x431bde83
 80022bc:	20005544 	.word	0x20005544
 80022c0:	40012c00 	.word	0x40012c00

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022fe:	f002 f983 	bl	8004608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20005544 	.word	0x20005544

0800230c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  master_tick++;
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <TIM2_IRQHandler+0x18>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a03      	ldr	r2, [pc, #12]	; (8002324 <TIM2_IRQHandler+0x18>)
 8002318:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800231a:	4803      	ldr	r0, [pc, #12]	; (8002328 <TIM2_IRQHandler+0x1c>)
 800231c:	f002 f974 	bl	8004608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20004ee4 	.word	0x20004ee4
 8002328:	2000513c 	.word	0x2000513c

0800232c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <_sbrk+0x50>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x16>
		heap_end = &end;
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <_sbrk+0x50>)
 800233e:	4a10      	ldr	r2, [pc, #64]	; (8002380 <_sbrk+0x54>)
 8002340:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <_sbrk+0x50>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <_sbrk+0x50>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	466a      	mov	r2, sp
 8002352:	4293      	cmp	r3, r2
 8002354:	d907      	bls.n	8002366 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002356:	f006 fda1 	bl	8008e9c <__errno>
 800235a:	4602      	mov	r2, r0
 800235c:	230c      	movs	r3, #12
 800235e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002364:	e006      	b.n	8002374 <_sbrk+0x48>
	}

	heap_end += incr;
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <_sbrk+0x50>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a03      	ldr	r2, [pc, #12]	; (800237c <_sbrk+0x50>)
 8002370:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000138 	.word	0x20000138
 8002380:	200055d0 	.word	0x200055d0

08002384 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <SystemInit+0x64>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <SystemInit+0x64>)
 8002390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <SystemInit+0x68>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a13      	ldr	r2, [pc, #76]	; (80023ec <SystemInit+0x68>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <SystemInit+0x68>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <SystemInit+0x68>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <SystemInit+0x68>)
 80023b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <SystemInit+0x68>)
 80023bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <SystemInit+0x68>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <SystemInit+0x68>)
 80023c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <SystemInit+0x68>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SystemInit+0x64>)
 80023d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023da:	609a      	str	r2, [r3, #8]
#endif
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00
 80023ec:	40021000 	.word	0x40021000

080023f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023f6:	e003      	b.n	8002400 <LoopCopyDataInit>

080023f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023fe:	3104      	adds	r1, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002404:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002406:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002408:	d3f6      	bcc.n	80023f8 <CopyDataInit>
	ldr	r2, =_sbss
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <LoopForever+0x12>)
	b	LoopFillZerobss
 800240c:	e002      	b.n	8002414 <LoopFillZerobss>

0800240e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800240e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002410:	f842 3b04 	str.w	r3, [r2], #4

08002414 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <LoopForever+0x16>)
	cmp	r2, r3
 8002416:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002418:	d3f9      	bcc.n	800240e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800241a:	f7ff ffb3 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f006 fd43 	bl	8008ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002422:	f7fe fe5b 	bl	80010dc <main>

08002426 <LoopForever>:

LoopForever:
    b LoopForever
 8002426:	e7fe      	b.n	8002426 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002428:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800242c:	080098f4 	.word	0x080098f4
	ldr	r0, =_sdata
 8002430:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002434:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8002438:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 800243c:	200055cc 	.word	0x200055cc

08002440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC1_2_IRQHandler>
	...

08002444 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_Init+0x3c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <HAL_Init+0x3c>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245a:	2003      	movs	r0, #3
 800245c:	f000 f8dd 	bl	800261a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fed9 	bl	8002218 <HAL_InitTick>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	71fb      	strb	r3, [r7, #7]
 8002470:	e001      	b.n	8002476 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002472:	f7ff fd69 	bl	8001f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002476:	79fb      	ldrb	r3, [r7, #7]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40022000 	.word	0x40022000

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_IncTick+0x1c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_IncTick+0x20>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4413      	add	r3, r2
 8002492:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <HAL_IncTick+0x1c>)
 8002494:	6013      	str	r3, [r2, #0]
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	20005584 	.word	0x20005584
 80024a4:	2000003c 	.word	0x2000003c

080024a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_GetTick+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20005584 	.word	0x20005584

080024c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff4c 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002642:	f7ff ff61 	bl	8002508 <__NVIC_GetPriorityGrouping>
 8002646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	6978      	ldr	r0, [r7, #20]
 800264e:	f7ff ffb1 	bl	80025b4 <NVIC_EncodePriority>
 8002652:	4602      	mov	r2, r0
 8002654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff80 	bl	8002560 <__NVIC_SetPriority>
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff54 	bl	8002524 <__NVIC_EnableIRQ>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002692:	e17f      	b.n	8002994 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8171 	beq.w	800298e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d00b      	beq.n	80026cc <HAL_GPIO_Init+0x48>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d130      	bne.n	800272e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002702:	2201      	movs	r2, #1
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 0201 	and.w	r2, r3, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b03      	cmp	r3, #3
 8002738:	d118      	bne.n	800276c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002740:	2201      	movs	r2, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	f003 0201 	and.w	r2, r3, #1
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x128>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b12      	cmp	r3, #18
 80027aa:	d123      	bne.n	80027f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	08da      	lsrs	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3208      	adds	r2, #8
 80027b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	6939      	ldr	r1, [r7, #16]
 80027f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0203 	and.w	r2, r3, #3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80ac 	beq.w	800298e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	4b5e      	ldr	r3, [pc, #376]	; (80029b0 <HAL_GPIO_Init+0x32c>)
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	4a5d      	ldr	r2, [pc, #372]	; (80029b0 <HAL_GPIO_Init+0x32c>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6613      	str	r3, [r2, #96]	; 0x60
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_GPIO_Init+0x32c>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800284e:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_GPIO_Init+0x330>)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002878:	d025      	beq.n	80028c6 <HAL_GPIO_Init+0x242>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4e      	ldr	r2, [pc, #312]	; (80029b8 <HAL_GPIO_Init+0x334>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01f      	beq.n	80028c2 <HAL_GPIO_Init+0x23e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x338>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d019      	beq.n	80028be <HAL_GPIO_Init+0x23a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x33c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_GPIO_Init+0x236>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_GPIO_Init+0x340>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00d      	beq.n	80028b6 <HAL_GPIO_Init+0x232>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4a      	ldr	r2, [pc, #296]	; (80029c8 <HAL_GPIO_Init+0x344>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <HAL_GPIO_Init+0x22e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a49      	ldr	r2, [pc, #292]	; (80029cc <HAL_GPIO_Init+0x348>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_GPIO_Init+0x22a>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e00c      	b.n	80028c8 <HAL_GPIO_Init+0x244>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00a      	b.n	80028c8 <HAL_GPIO_Init+0x244>
 80028b2:	2305      	movs	r3, #5
 80028b4:	e008      	b.n	80028c8 <HAL_GPIO_Init+0x244>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x244>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_Init+0x244>
 80028be:	2302      	movs	r3, #2
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_Init+0x244>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x244>
 80028c6:	2300      	movs	r3, #0
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	f002 0203 	and.w	r2, r2, #3
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028d8:	4936      	ldr	r1, [pc, #216]	; (80029b4 <HAL_GPIO_Init+0x330>)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800290a:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002910:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	43db      	mvns	r3, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002934:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_GPIO_Init+0x34c>)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f47f ae78 	bne.w	8002694 <HAL_GPIO_Init+0x10>
  }
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010000 	.word	0x40010000
 80029b8:	48000400 	.word	0x48000400
 80029bc:	48000800 	.word	0x48000800
 80029c0:	48000c00 	.word	0x48000c00
 80029c4:	48001000 	.word	0x48001000
 80029c8:	48001400 	.word	0x48001400
 80029cc:	48001800 	.word	0x48001800
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e081      	b.n	8002b1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fab4 	bl	8001f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e006      	b.n	8002a8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d104      	bne.n	8002a9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	ea42 0103 	orr.w	r1, r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	021a      	lsls	r2, r3, #8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69d9      	ldr	r1, [r3, #28]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1a      	ldr	r2, [r3, #32]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d138      	bne.n	8002baa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e032      	b.n	8002bac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2224      	movs	r2, #36	; 0x24
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b74:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0201 	orr.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e000      	b.n	8002bac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
  }
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d139      	bne.n	8002c42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e033      	b.n	8002c44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	; 0x24
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e000      	b.n	8002c44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
  }
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40007000 	.word	0x40007000

08002c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000

08002c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9a:	d130      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca8:	d038      	beq.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2232      	movs	r2, #50	; 0x32
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0c9b      	lsrs	r3, r3, #18
 8002ccc:	3301      	adds	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd0:	e002      	b.n	8002cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce4:	d102      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f2      	bne.n	8002cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d110      	bne.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e00f      	b.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0a:	d007      	beq.n	8002d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d14:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	20000034 	.word	0x20000034
 8002d34:	431bde83 	.word	0x431bde83

08002d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e3d4      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4a:	4ba1      	ldr	r3, [pc, #644]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d54:	4b9e      	ldr	r3, [pc, #632]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80e4 	beq.w	8002f34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_RCC_OscConfig+0x4a>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	f040 808b 	bne.w	8002e90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f040 8087 	bne.w	8002e90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d82:	4b93      	ldr	r3, [pc, #588]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x62>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e3ac      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	4b8c      	ldr	r3, [pc, #560]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_RCC_OscConfig+0x7c>
 8002daa:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db2:	e005      	b.n	8002dc0 <HAL_RCC_OscConfig+0x88>
 8002db4:	4b86      	ldr	r3, [pc, #536]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d223      	bcs.n	8002e0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fd71 	bl	80038b0 <RCC_SetFlashLatencyFromMSIRange>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e38d      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd8:	4b7d      	ldr	r3, [pc, #500]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002dde:	f043 0308 	orr.w	r3, r3, #8
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4977      	ldr	r1, [pc, #476]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df6:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	4972      	ldr	r1, [pc, #456]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
 8002e0a:	e025      	b.n	8002e58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e0c:	4b70      	ldr	r3, [pc, #448]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6f      	ldr	r2, [pc, #444]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e12:	f043 0308 	orr.w	r3, r3, #8
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	496a      	ldr	r1, [pc, #424]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2a:	4b69      	ldr	r3, [pc, #420]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	4965      	ldr	r1, [pc, #404]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fd31 	bl	80038b0 <RCC_SetFlashLatencyFromMSIRange>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e34d      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e58:	f000 fc36 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8002e5c:	4601      	mov	r1, r0
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	4a5a      	ldr	r2, [pc, #360]	; (8002fd4 <HAL_RCC_OscConfig+0x29c>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	fa21 f303 	lsr.w	r3, r1, r3
 8002e74:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_RCC_OscConfig+0x2a0>)
 8002e76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e78:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <HAL_RCC_OscConfig+0x2a4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f9cb 	bl	8002218 <HAL_InitTick>
 8002e82:	4603      	mov	r3, r0
 8002e84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d052      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	e331      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d032      	beq.n	8002efe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e98:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4c      	ldr	r2, [pc, #304]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea4:	f7ff fb00 	bl	80024a8 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eac:	f7ff fafc 	bl	80024a8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e31a      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ebe:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a40      	ldr	r2, [pc, #256]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ed0:	f043 0308 	orr.w	r3, r3, #8
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	493b      	ldr	r1, [pc, #236]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee8:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	4936      	ldr	r1, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
 8002efc:	e01a      	b.n	8002f34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a33      	ldr	r2, [pc, #204]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0a:	f7ff facd 	bl	80024a8 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f12:	f7ff fac9 	bl	80024a8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e2e7      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x1da>
 8002f30:	e000      	b.n	8002f34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d074      	beq.n	800302a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d005      	beq.n	8002f52 <HAL_RCC_OscConfig+0x21a>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d10e      	bne.n	8002f6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d10b      	bne.n	8002f6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d064      	beq.n	8003028 <HAL_RCC_OscConfig+0x2f0>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d160      	bne.n	8003028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e2c4      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x24a>
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e01d      	b.n	8002fbe <HAL_RCC_OscConfig+0x286>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x26e>
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	e00b      	b.n	8002fbe <HAL_RCC_OscConfig+0x286>
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a06      	ldr	r2, [pc, #24]	; (8002fd0 <HAL_RCC_OscConfig+0x298>)
 8002fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01c      	beq.n	8003000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7ff fa6f 	bl	80024a8 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fcc:	e011      	b.n	8002ff2 <HAL_RCC_OscConfig+0x2ba>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08009868 	.word	0x08009868
 8002fd8:	20000034 	.word	0x20000034
 8002fdc:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7ff fa62 	bl	80024a8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e280      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff2:	4baf      	ldr	r3, [pc, #700]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x2a8>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7ff fa52 	bl	80024a8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7ff fa4e 	bl	80024a8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e26c      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800301a:	4ba5      	ldr	r3, [pc, #660]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x2d0>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d060      	beq.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d005      	beq.n	8003048 <HAL_RCC_OscConfig+0x310>
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d119      	bne.n	8003076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d116      	bne.n	8003076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003048:	4b99      	ldr	r3, [pc, #612]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_OscConfig+0x328>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e249      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b93      	ldr	r3, [pc, #588]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	4990      	ldr	r1, [pc, #576]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003074:	e040      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d023      	beq.n	80030c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307e:	4b8c      	ldr	r3, [pc, #560]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a8b      	ldr	r2, [pc, #556]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7ff fa0d 	bl	80024a8 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7ff fa09 	bl	80024a8 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e227      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030a4:	4b82      	ldr	r3, [pc, #520]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b7f      	ldr	r3, [pc, #508]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	497c      	ldr	r1, [pc, #496]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	e018      	b.n	80030f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a79      	ldr	r2, [pc, #484]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7ff f9e9 	bl	80024a8 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030da:	f7ff f9e5 	bl	80024a8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e203      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ec:	4b70      	ldr	r3, [pc, #448]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f0      	bne.n	80030da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d03c      	beq.n	800317e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01c      	beq.n	8003146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800310e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003112:	4a67      	ldr	r2, [pc, #412]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7ff f9c4 	bl	80024a8 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7ff f9c0 	bl	80024a8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e1de      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003136:	4b5e      	ldr	r3, [pc, #376]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ef      	beq.n	8003124 <HAL_RCC_OscConfig+0x3ec>
 8003144:	e01b      	b.n	800317e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003146:	4b5a      	ldr	r3, [pc, #360]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314c:	4a58      	ldr	r2, [pc, #352]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7ff f9a7 	bl	80024a8 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315e:	f7ff f9a3 	bl	80024a8 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1c1      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003170:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ef      	bne.n	800315e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80a6 	beq.w	80032d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318c:	2300      	movs	r3, #0
 800318e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003190:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10d      	bne.n	80031b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b44      	ldr	r3, [pc, #272]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	4a43      	ldr	r2, [pc, #268]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	; 0x58
 80031a8:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d118      	bne.n	80031f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d0:	f7ff f96a 	bl	80024a8 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7ff f966 	bl	80024a8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e184      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <HAL_RCC_OscConfig+0x57c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <HAL_RCC_OscConfig+0x4d8>
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320e:	e024      	b.n	800325a <HAL_RCC_OscConfig+0x522>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d110      	bne.n	800323a <HAL_RCC_OscConfig+0x502>
 8003218:	4b25      	ldr	r3, [pc, #148]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003238:	e00f      	b.n	800325a <HAL_RCC_OscConfig+0x522>
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7ff f921 	bl	80024a8 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7ff f91d 	bl	80024a8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e139      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_OscConfig+0x578>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ed      	beq.n	800326a <HAL_RCC_OscConfig+0x532>
 800328e:	e01a      	b.n	80032c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7ff f90a 	bl	80024a8 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003296:	e00f      	b.n	80032b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7ff f906 	bl	80024a8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d906      	bls.n	80032b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e122      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b8:	4b90      	ldr	r3, [pc, #576]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e8      	bne.n	8003298 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c6:	7ffb      	ldrb	r3, [r7, #31]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b8b      	ldr	r3, [pc, #556]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	4a8a      	ldr	r2, [pc, #552]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8108 	beq.w	80034f2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	f040 80d0 	bne.w	800348c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032ec:	4b83      	ldr	r3, [pc, #524]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0203 	and.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d130      	bne.n	8003362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	3b01      	subs	r3, #1
 800330c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d127      	bne.n	8003362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11f      	bne.n	8003362 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800332c:	2a07      	cmp	r2, #7
 800332e:	bf14      	ite	ne
 8003330:	2201      	movne	r2, #1
 8003332:	2200      	moveq	r2, #0
 8003334:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003336:	4293      	cmp	r3, r2
 8003338:	d113      	bne.n	8003362 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d109      	bne.n	8003362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	3b01      	subs	r3, #1
 800335c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d06e      	beq.n	8003440 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b0c      	cmp	r3, #12
 8003366:	d069      	beq.n	800343c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003368:	4b64      	ldr	r3, [pc, #400]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003374:	4b61      	ldr	r3, [pc, #388]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0b7      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003384:	4b5d      	ldr	r3, [pc, #372]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a5c      	ldr	r2, [pc, #368]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 800338a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800338e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003390:	f7ff f88a 	bl	80024a8 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7ff f886 	bl	80024a8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e0a4      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <HAL_RCC_OscConfig+0x7c8>)
 80033bc:	4013      	ands	r3, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033c6:	3a01      	subs	r2, #1
 80033c8:	0112      	lsls	r2, r2, #4
 80033ca:	4311      	orrs	r1, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033d0:	0212      	lsls	r2, r2, #8
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033d8:	0852      	lsrs	r2, r2, #1
 80033da:	3a01      	subs	r2, #1
 80033dc:	0552      	lsls	r2, r2, #21
 80033de:	4311      	orrs	r1, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033e4:	0852      	lsrs	r2, r2, #1
 80033e6:	3a01      	subs	r2, #1
 80033e8:	0652      	lsls	r2, r2, #25
 80033ea:	4311      	orrs	r1, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f0:	0912      	lsrs	r2, r2, #4
 80033f2:	0452      	lsls	r2, r2, #17
 80033f4:	430a      	orrs	r2, r1
 80033f6:	4941      	ldr	r1, [pc, #260]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033fc:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a3e      	ldr	r2, [pc, #248]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003408:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a3b      	ldr	r2, [pc, #236]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 800340e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003414:	f7ff f848 	bl	80024a8 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7ff f844 	bl	80024a8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e062      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342e:	4b33      	ldr	r3, [pc, #204]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800343a:	e05a      	b.n	80034f2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e059      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003440:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d152      	bne.n	80034f2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a2a      	ldr	r2, [pc, #168]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 800345e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003464:	f7ff f820 	bl	80024a8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7ff f81c 	bl	80024a8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e03a      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347e:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0x734>
 800348a:	e032      	b.n	80034f2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d02d      	beq.n	80034ee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a19      	ldr	r2, [pc, #100]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 8003498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4a13      	ldr	r2, [pc, #76]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80034b0:	f023 0303 	bic.w	r3, r3, #3
 80034b4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80034bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe ffef 	bl	80024a8 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe ffeb 	bl	80024a8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e009      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_OscConfig+0x7c4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0x796>
 80034ec:	e001      	b.n	80034f2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000
 8003500:	f99d808c 	.word	0xf99d808c

08003504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0c8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d910      	bls.n	8003548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0207 	bic.w	r2, r3, #7
 800352e:	4961      	ldr	r1, [pc, #388]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b5f      	ldr	r3, [pc, #380]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b0      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d04c      	beq.n	80035ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d107      	bne.n	800356c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355c:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d121      	bne.n	80035ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e09e      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d115      	bne.n	80035ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e092      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800358c:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e086      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359c:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e07e      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ac:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f023 0203 	bic.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	493f      	ldr	r1, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035be:	f7fe ff73 	bl	80024a8 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c6:	f7fe ff6f 	bl	80024a8 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e066      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 020c 	and.w	r2, r3, #12
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d1eb      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fa:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	492c      	ldr	r1, [pc, #176]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d210      	bcs.n	800363c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 0207 	bic.w	r2, r3, #7
 8003622:	4924      	ldr	r1, [pc, #144]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e036      	b.n	80036aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4918      	ldr	r1, [pc, #96]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4910      	ldr	r1, [pc, #64]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800367a:	f000 f825 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 800367e:	4601      	mov	r1, r0
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	fa21 f303 	lsr.w	r3, r1, r3
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe fdba 	bl	8002218 <HAL_InitTick>
 80036a4:	4603      	mov	r3, r0
 80036a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80036a8:	7afb      	ldrb	r3, [r7, #11]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40022000 	.word	0x40022000
 80036b8:	40021000 	.word	0x40021000
 80036bc:	08009868 	.word	0x08009868
 80036c0:	20000034 	.word	0x20000034
 80036c4:	20000038 	.word	0x20000038

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e0:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d121      	bne.n	800373a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d11e      	bne.n	800373a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036fc:	4b33      	ldr	r3, [pc, #204]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d107      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003708:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	e005      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003718:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003724:	4a2a      	ldr	r2, [pc, #168]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10d      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003738:	e00a      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d102      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e004      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d101      	bne.n	8003750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800374c:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800374e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d133      	bne.n	80037be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d002      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xa4>
 8003766:	2b03      	cmp	r3, #3
 8003768:	d003      	beq.n	8003772 <HAL_RCC_GetSysClockFreq+0xaa>
 800376a:	e005      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800376e:	617b      	str	r3, [r7, #20]
      break;
 8003770:	e005      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003774:	617b      	str	r3, [r7, #20]
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	617b      	str	r3, [r7, #20]
      break;
 800377c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	3301      	adds	r3, #1
 800378a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800378c:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	fb02 f203 	mul.w	r2, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_GetSysClockFreq+0x104>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0e5b      	lsrs	r3, r3, #25
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037be:	69bb      	ldr	r3, [r7, #24]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3724      	adds	r7, #36	; 0x24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40021000 	.word	0x40021000
 80037d0:	08009880 	.word	0x08009880
 80037d4:	00f42400 	.word	0x00f42400
 80037d8:	007a1200 	.word	0x007a1200

080037dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000034 	.word	0x20000034

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037f8:	f7ff fff0 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 80037fc:	4601      	mov	r1, r0
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <HAL_RCC_GetPCLK1Freq+0x28>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000
 800381c:	08009878 	.word	0x08009878

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003824:	f7ff ffda 	bl	80037dc <HAL_RCC_GetHCLKFreq>
 8003828:	4601      	mov	r1, r0
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0adb      	lsrs	r3, r3, #11
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	08009878 	.word	0x08009878

0800384c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	220f      	movs	r2, #15
 800385a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_RCC_GetClockConfig+0x60>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0207 	and.w	r2, r3, #7
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40022000 	.word	0x40022000

080038b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c8:	f7ff f9d2 	bl	8002c70 <HAL_PWREx_GetVoltageRange>
 80038cc:	6178      	str	r0, [r7, #20]
 80038ce:	e014      	b.n	80038fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038da:	6593      	str	r3, [r2, #88]	; 0x58
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e8:	f7ff f9c2 	bl	8002c70 <HAL_PWREx_GetVoltageRange>
 80038ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003900:	d10b      	bne.n	800391a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d919      	bls.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2ba0      	cmp	r3, #160	; 0xa0
 800390c:	d902      	bls.n	8003914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800390e:	2302      	movs	r3, #2
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	e013      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003914:	2301      	movs	r3, #1
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	e010      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b80      	cmp	r3, #128	; 0x80
 800391e:	d902      	bls.n	8003926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003920:	2303      	movs	r3, #3
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	e00a      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d102      	bne.n	8003932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800392c:	2302      	movs	r3, #2
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	e004      	b.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b70      	cmp	r3, #112	; 0x70
 8003936:	d101      	bne.n	800393c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003938:	2301      	movs	r3, #1
 800393a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 0207 	bic.w	r2, r3, #7
 8003944:	4909      	ldr	r1, [pc, #36]	; (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	429a      	cmp	r2, r3
 8003958:	d001      	beq.n	800395e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	40022000 	.word	0x40022000

08003970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003978:	2300      	movs	r3, #0
 800397a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800397c:	2300      	movs	r3, #0
 800397e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03f      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d01c      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399a:	d802      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80039a0:	e01f      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80039a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a6:	d003      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80039a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ac:	d01c      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80039ae:	e018      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039b0:	4b85      	ldr	r3, [pc, #532]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a84      	ldr	r2, [pc, #528]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039bc:	e015      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fac9 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ce:	e00c      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3320      	adds	r3, #32
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fbb0 	bl	800413c <RCCEx_PLLSAI2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e0:	e003      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	74fb      	strb	r3, [r7, #19]
      break;
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80039e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fe:	4972      	ldr	r1, [pc, #456]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a06:	e001      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d03f      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a20:	d01c      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003a22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a26:	d802      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00e      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003a2c:	e01f      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a32:	d003      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003a34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a38:	d01c      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003a3a:	e018      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a3c:	4b62      	ldr	r3, [pc, #392]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a61      	ldr	r2, [pc, #388]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a48:	e015      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fa83 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a5a:	e00c      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3320      	adds	r3, #32
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fb6a 	bl	800413c <RCCEx_PLLSAI2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	74fb      	strb	r3, [r7, #19]
      break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10b      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a7c:	4b52      	ldr	r3, [pc, #328]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8a:	494f      	ldr	r1, [pc, #316]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a0 	beq.w	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	4a40      	ldr	r2, [pc, #256]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	; 0x58
 8003acc:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003adc:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae8:	f7fe fcde 	bl	80024a8 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aee:	e009      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fe fcda 	bl	80024a8 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	74fb      	strb	r3, [r7, #19]
        break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d15c      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b16:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01f      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d019      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b40:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	4a20      	ldr	r2, [pc, #128]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b60:	4a19      	ldr	r2, [pc, #100]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b72:	f7fe fc99 	bl	80024a8 <HAL_GetTick>
 8003b76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b78:	e00b      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fe fc95 	bl	80024a8 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d902      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ec      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bbe:	e009      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bd4:	7c7b      	ldrb	r3, [r7, #17]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b9e      	ldr	r3, [pc, #632]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	4a9d      	ldr	r2, [pc, #628]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf2:	4b98      	ldr	r3, [pc, #608]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f023 0203 	bic.w	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	4994      	ldr	r1, [pc, #592]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c14:	4b8f      	ldr	r3, [pc, #572]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f023 020c 	bic.w	r2, r3, #12
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	498c      	ldr	r1, [pc, #560]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c36:	4b87      	ldr	r3, [pc, #540]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	4983      	ldr	r1, [pc, #524]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c58:	4b7e      	ldr	r3, [pc, #504]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	497b      	ldr	r1, [pc, #492]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c7a:	4b76      	ldr	r3, [pc, #472]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c88:	4972      	ldr	r1, [pc, #456]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c9c:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	496a      	ldr	r1, [pc, #424]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	4961      	ldr	r1, [pc, #388]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce0:	4b5c      	ldr	r3, [pc, #368]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cee:	4959      	ldr	r1, [pc, #356]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d02:	4b54      	ldr	r3, [pc, #336]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d10:	4950      	ldr	r1, [pc, #320]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	4948      	ldr	r1, [pc, #288]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d46:	4b43      	ldr	r3, [pc, #268]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	493f      	ldr	r1, [pc, #252]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d028      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d76:	4937      	ldr	r1, [pc, #220]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d86:	d106      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d88:	4b32      	ldr	r3, [pc, #200]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a31      	ldr	r2, [pc, #196]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d92:	60d3      	str	r3, [r2, #12]
 8003d94:	e011      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9e:	d10c      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2101      	movs	r1, #1
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f8d8 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dc6:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dcc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	491f      	ldr	r1, [pc, #124]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de4:	d106      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df0:	60d3      	str	r3, [r2, #12]
 8003df2:	e011      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 f8a9 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003e14:	7cfb      	ldrb	r3, [r7, #19]
 8003e16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e42:	d109      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	4a02      	ldr	r2, [pc, #8]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e4e:	60d3      	str	r3, [r2, #12]
 8003e50:	e014      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	2101      	movs	r1, #1
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f877 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e96:	4928      	ldr	r1, [pc, #160]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f854 	bl	8003f5c <RCCEx_PLLSAI1_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d014      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	74bb      	strb	r3, [r7, #18]
 8003ec2:	e011      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3320      	adds	r3, #32
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f931 	bl	800413c <RCCEx_PLLSAI2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f02:	490d      	ldr	r1, [pc, #52]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f26:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000

08003f3c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6013      	str	r3, [r2, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000

08003f5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f6a:	4b73      	ldr	r3, [pc, #460]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f76:	4b70      	ldr	r3, [pc, #448]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0203 	and.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d10d      	bne.n	8003fa2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
       ||
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f8e:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d044      	beq.n	800402c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
 8003fa6:	e041      	b.n	800402c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d00c      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x6e>
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d013      	beq.n	8003fdc <RCCEx_PLLSAI1_Config+0x80>
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d120      	bne.n	8003ffa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fb8:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d11d      	bne.n	8004000 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e01a      	b.n	8004000 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fca:	4b5b      	ldr	r3, [pc, #364]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d116      	bne.n	8004004 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fda:	e013      	b.n	8004004 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fdc:	4b56      	ldr	r3, [pc, #344]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10f      	bne.n	8004008 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fe8:	4b53      	ldr	r3, [pc, #332]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ff8:	e006      	b.n	8004008 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffe:	e004      	b.n	800400a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004008:	bf00      	nop
    }

    if(status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10d      	bne.n	800402c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004010:	4b49      	ldr	r3, [pc, #292]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6819      	ldr	r1, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	3b01      	subs	r3, #1
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	430b      	orrs	r3, r1
 8004026:	4944      	ldr	r1, [pc, #272]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004028:	4313      	orrs	r3, r2
 800402a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d17d      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004032:	4b41      	ldr	r3, [pc, #260]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a40      	ldr	r2, [pc, #256]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004038:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800403c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403e:	f7fe fa33 	bl	80024a8 <HAL_GetTick>
 8004042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004044:	e009      	b.n	800405a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004046:	f7fe fa2f 	bl	80024a8 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d902      	bls.n	800405a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	73fb      	strb	r3, [r7, #15]
        break;
 8004058:	e005      	b.n	8004066 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800405a:	4b37      	ldr	r3, [pc, #220]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1ef      	bne.n	8004046 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d160      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d111      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004072:	4b31      	ldr	r3, [pc, #196]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800407a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6892      	ldr	r2, [r2, #8]
 8004082:	0211      	lsls	r1, r2, #8
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68d2      	ldr	r2, [r2, #12]
 8004088:	0912      	lsrs	r2, r2, #4
 800408a:	0452      	lsls	r2, r2, #17
 800408c:	430a      	orrs	r2, r1
 800408e:	492a      	ldr	r1, [pc, #168]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]
 8004094:	e027      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d112      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409c:	4b26      	ldr	r3, [pc, #152]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6892      	ldr	r2, [r2, #8]
 80040ac:	0211      	lsls	r1, r2, #8
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6912      	ldr	r2, [r2, #16]
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0552      	lsls	r2, r2, #21
 80040b8:	430a      	orrs	r2, r1
 80040ba:	491f      	ldr	r1, [pc, #124]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	610b      	str	r3, [r1, #16]
 80040c0:	e011      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6892      	ldr	r2, [r2, #8]
 80040d2:	0211      	lsls	r1, r2, #8
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6952      	ldr	r2, [r2, #20]
 80040d8:	0852      	lsrs	r2, r2, #1
 80040da:	3a01      	subs	r2, #1
 80040dc:	0652      	lsls	r2, r2, #25
 80040de:	430a      	orrs	r2, r1
 80040e0:	4915      	ldr	r1, [pc, #84]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 80040ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fe f9d9 	bl	80024a8 <HAL_GetTick>
 80040f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f8:	e009      	b.n	800410e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040fa:	f7fe f9d5 	bl	80024a8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d902      	bls.n	800410e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	73fb      	strb	r3, [r7, #15]
          break;
 800410c:	e005      	b.n	800411a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ef      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	4903      	ldr	r1, [pc, #12]	; (8004138 <RCCEx_PLLSAI1_Config+0x1dc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000

0800413c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800414a:	4b68      	ldr	r3, [pc, #416]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004156:	4b65      	ldr	r3, [pc, #404]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d10d      	bne.n	8004182 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
       ||
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800416e:	4b5f      	ldr	r3, [pc, #380]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
       ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d044      	beq.n	800420c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	e041      	b.n	800420c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d00c      	beq.n	80041aa <RCCEx_PLLSAI2_Config+0x6e>
 8004190:	2b03      	cmp	r3, #3
 8004192:	d013      	beq.n	80041bc <RCCEx_PLLSAI2_Config+0x80>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d120      	bne.n	80041da <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004198:	4b54      	ldr	r3, [pc, #336]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11d      	bne.n	80041e0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e01a      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041aa:	4b50      	ldr	r3, [pc, #320]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ba:	e013      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041bc:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10f      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041c8:	4b48      	ldr	r3, [pc, #288]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041d8:	e006      	b.n	80041e8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
      break;
 80041de:	e004      	b.n	80041ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041e0:	bf00      	nop
 80041e2:	e002      	b.n	80041ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80041e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10d      	bne.n	800420c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f0:	4b3e      	ldr	r3, [pc, #248]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6819      	ldr	r1, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	3b01      	subs	r3, #1
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	430b      	orrs	r3, r1
 8004206:	4939      	ldr	r1, [pc, #228]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004208:	4313      	orrs	r3, r2
 800420a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d167      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a35      	ldr	r2, [pc, #212]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421e:	f7fe f943 	bl	80024a8 <HAL_GetTick>
 8004222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004224:	e009      	b.n	800423a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004226:	f7fe f93f 	bl	80024a8 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d902      	bls.n	800423a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	73fb      	strb	r3, [r7, #15]
        break;
 8004238:	e005      	b.n	8004246 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800423a:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ef      	bne.n	8004226 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d14a      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d111      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004252:	4b26      	ldr	r3, [pc, #152]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6892      	ldr	r2, [r2, #8]
 8004262:	0211      	lsls	r1, r2, #8
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	68d2      	ldr	r2, [r2, #12]
 8004268:	0912      	lsrs	r2, r2, #4
 800426a:	0452      	lsls	r2, r2, #17
 800426c:	430a      	orrs	r2, r1
 800426e:	491f      	ldr	r1, [pc, #124]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	614b      	str	r3, [r1, #20]
 8004274:	e011      	b.n	800429a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004276:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800427e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6892      	ldr	r2, [r2, #8]
 8004286:	0211      	lsls	r1, r2, #8
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6912      	ldr	r2, [r2, #16]
 800428c:	0852      	lsrs	r2, r2, #1
 800428e:	3a01      	subs	r2, #1
 8004290:	0652      	lsls	r2, r2, #25
 8004292:	430a      	orrs	r2, r1
 8004294:	4915      	ldr	r1, [pc, #84]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8004296:	4313      	orrs	r3, r2
 8004298:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800429a:	4b14      	ldr	r3, [pc, #80]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fe f8ff 	bl	80024a8 <HAL_GetTick>
 80042aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042ac:	e009      	b.n	80042c2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042ae:	f7fe f8fb 	bl	80024a8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d902      	bls.n	80042c2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	73fb      	strb	r3, [r7, #15]
          break;
 80042c0:	e005      	b.n	80042ce <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ef      	beq.n	80042ae <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	4903      	ldr	r1, [pc, #12]	; (80042ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e042      	b.n	8004388 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	795b      	ldrb	r3, [r3, #5]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd feb4 	bl	8002080 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0204 	orr.w	r2, r2, #4
 800432c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d104      	bne.n	8004346 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2204      	movs	r2, #4
 8004340:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e020      	b.n	8004388 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004346:	f7fe f8af 	bl	80024a8 <HAL_GetTick>
 800434a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800434c:	e00e      	b.n	800436c <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800434e:	f7fe f8ab 	bl	80024a8 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d907      	bls.n	800436c <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2204      	movs	r2, #4
 8004360:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e00d      	b.n	8004388 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b04      	cmp	r3, #4
 8004378:	d0e9      	beq.n	800434e <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	791b      	ldrb	r3, [r3, #4]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_RNG_GenerateRandomNumber+0x1a>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e03d      	b.n	8004426 <HAL_RNG_GenerateRandomNumber+0x96>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	795b      	ldrb	r3, [r3, #5]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d12c      	bne.n	8004414 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043c0:	f7fe f872 	bl	80024a8 <HAL_GetTick>
 80043c4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80043c6:	e011      	b.n	80043ec <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80043c8:	f7fe f86e 	bl	80024a8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d90a      	bls.n	80043ec <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e01c      	b.n	8004426 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d1e6      	bne.n	80043c8 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	715a      	strb	r2, [r3, #5]
 8004412:	e004      	b.n	800441e <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2204      	movs	r2, #4
 8004418:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	711a      	strb	r2, [r3, #4]

  return status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e07c      	b.n	800453a <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fe30 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004476:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004480:	d902      	bls.n	8004488 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e002      	b.n	800448e <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800448c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004496:	d007      	beq.n	80044a8 <HAL_SPI_Init+0x7a>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044a0:	d002      	beq.n	80044a8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044b8:	d903      	bls.n	80044c2 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
 80044c0:	e002      	b.n	80044c8 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	ea42 0103 	orr.w	r1, r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	f003 0204 	and.w	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	ea42 0103 	orr.w	r1, r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004550:	b2db      	uxtb	r3, r3
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e01d      	b.n	80045ac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fd fddf 	bl	8002148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 fa33 	bl	8004a08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <HAL_TIM_Base_Start_IT+0x50>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d00b      	beq.n	80045f6 <HAL_TIM_Base_Start_IT+0x42>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e4:	d007      	beq.n	80045f6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	00010007 	.word	0x00010007

08004608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d122      	bne.n	8004664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	d11b      	bne.n	8004664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0202 	mvn.w	r2, #2
 8004634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9be 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9b0 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f9c1 	bl	80049e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b04      	cmp	r3, #4
 8004670:	d122      	bne.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d11b      	bne.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0204 	mvn.w	r2, #4
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f994 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 80046a4:	e005      	b.n	80046b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f986 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f997 	bl	80049e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d122      	bne.n	800470c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d11b      	bne.n	800470c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0208 	mvn.w	r2, #8
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2204      	movs	r2, #4
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f96a 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f95c 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f96d 	bl	80049e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b10      	cmp	r3, #16
 8004718:	d122      	bne.n	8004760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b10      	cmp	r3, #16
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0210 	mvn.w	r2, #16
 8004730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2208      	movs	r2, #8
 8004736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f940 	bl	80049cc <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f932 	bl	80049b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f943 	bl	80049e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0201 	mvn.w	r2, #1
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd fbc4 	bl	8001f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 faee 	bl	8004d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c6:	d10e      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d107      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fae1 	bl	8004da8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d10e      	bne.n	8004812 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d107      	bne.n	8004812 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800480a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8f1 	bl	80049f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b20      	cmp	r3, #32
 800481e:	d10e      	bne.n	800483e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b20      	cmp	r3, #32
 800482c:	d107      	bne.n	800483e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0220 	mvn.w	r2, #32
 8004836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 faa1 	bl	8004d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_TIM_ConfigClockSource+0x18>
 800485a:	2302      	movs	r3, #2
 800485c:	e0a8      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x16a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004880:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004888:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	d067      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x124>
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d80b      	bhi.n	80048b6 <HAL_TIM_ConfigClockSource+0x70>
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d073      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x144>
 80048a2:	2b10      	cmp	r3, #16
 80048a4:	d802      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x66>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d06f      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048aa:	e078      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d06c      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x144>
 80048b0:	2b30      	cmp	r3, #48	; 0x30
 80048b2:	d06a      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x144>
      break;
 80048b4:	e073      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80048b6:	2b70      	cmp	r3, #112	; 0x70
 80048b8:	d00d      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x90>
 80048ba:	2b70      	cmp	r3, #112	; 0x70
 80048bc:	d804      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x82>
 80048be:	2b50      	cmp	r3, #80	; 0x50
 80048c0:	d033      	beq.n	800492a <HAL_TIM_ConfigClockSource+0xe4>
 80048c2:	2b60      	cmp	r3, #96	; 0x60
 80048c4:	d041      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80048c6:	e06a      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048cc:	d066      	beq.n	800499c <HAL_TIM_ConfigClockSource+0x156>
 80048ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d2:	d017      	beq.n	8004904 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80048d4:	e063      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6899      	ldr	r1, [r3, #8]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f000 f9a3 	bl	8004c30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	609a      	str	r2, [r3, #8]
      break;
 8004902:	e04c      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6899      	ldr	r1, [r3, #8]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f000 f98c 	bl	8004c30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004926:	609a      	str	r2, [r3, #8]
      break;
 8004928:	e039      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	461a      	mov	r2, r3
 8004938:	f000 f900 	bl	8004b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2150      	movs	r1, #80	; 0x50
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f959 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 8004948:	e029      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	461a      	mov	r2, r3
 8004958:	f000 f91f 	bl	8004b9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2160      	movs	r1, #96	; 0x60
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f949 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 8004968:	e019      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	461a      	mov	r2, r3
 8004978:	f000 f8e0 	bl	8004b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2140      	movs	r1, #64	; 0x40
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f939 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 8004988:	e009      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f000 f930 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 800499a:	e000      	b.n	800499e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800499c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a40      	ldr	r2, [pc, #256]	; (8004b1c <TIM_Base_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a26:	d00f      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3d      	ldr	r2, [pc, #244]	; (8004b20 <TIM_Base_SetConfig+0x118>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a3c      	ldr	r2, [pc, #240]	; (8004b24 <TIM_Base_SetConfig+0x11c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a3b      	ldr	r2, [pc, #236]	; (8004b28 <TIM_Base_SetConfig+0x120>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3a      	ldr	r2, [pc, #232]	; (8004b2c <TIM_Base_SetConfig+0x124>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d108      	bne.n	8004a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <TIM_Base_SetConfig+0x114>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01f      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a68:	d01b      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2c      	ldr	r2, [pc, #176]	; (8004b20 <TIM_Base_SetConfig+0x118>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d017      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <TIM_Base_SetConfig+0x11c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <TIM_Base_SetConfig+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00f      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a29      	ldr	r2, [pc, #164]	; (8004b2c <TIM_Base_SetConfig+0x124>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a28      	ldr	r2, [pc, #160]	; (8004b30 <TIM_Base_SetConfig+0x128>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a27      	ldr	r2, [pc, #156]	; (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d003      	beq.n	8004aa2 <TIM_Base_SetConfig+0x9a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	; (8004b38 <TIM_Base_SetConfig+0x130>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d108      	bne.n	8004ab4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <TIM_Base_SetConfig+0x114>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00f      	beq.n	8004b00 <TIM_Base_SetConfig+0xf8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <TIM_Base_SetConfig+0x124>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <TIM_Base_SetConfig+0xf8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a11      	ldr	r2, [pc, #68]	; (8004b30 <TIM_Base_SetConfig+0x128>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d007      	beq.n	8004b00 <TIM_Base_SetConfig+0xf8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_Base_SetConfig+0xf8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a0f      	ldr	r2, [pc, #60]	; (8004b38 <TIM_Base_SetConfig+0x130>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d103      	bne.n	8004b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	615a      	str	r2, [r3, #20]
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800

08004b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f023 0201 	bic.w	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 030a 	bic.w	r3, r3, #10
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f023 0210 	bic.w	r2, r3, #16
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	031b      	lsls	r3, r3, #12
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	621a      	str	r2, [r3, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f043 0307 	orr.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	609a      	str	r2, [r3, #8]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e068      	b.n	8004d5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2e      	ldr	r2, [pc, #184]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2d      	ldr	r2, [pc, #180]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d108      	bne.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01d      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfa:	d018      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10c      	bne.n	8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40013400 	.word	0x40013400
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40014000 	.word	0x40014000

08004d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e040      	b.n	8004e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fd f9d6 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f8c0 	bl	8004f80 <UART_SetConfig>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e022      	b.n	8004e50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fc26 	bl	8005664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fcad 	bl	80057a8 <UART_CheckIdleState>
 8004e4e:	4603      	mov	r3, r0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	f040 8081 	bne.w	8004f74 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_UART_Transmit+0x26>
 8004e78:	88fb      	ldrh	r3, [r7, #6]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e079      	b.n	8004f76 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_UART_Transmit+0x38>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e072      	b.n	8004f76 <HAL_UART_Transmit+0x11e>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2221      	movs	r2, #33	; 0x21
 8004ea2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004ea4:	f7fd fb00 	bl	80024a8 <HAL_GetTick>
 8004ea8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	88fa      	ldrh	r2, [r7, #6]
 8004eae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ec2:	d108      	bne.n	8004ed6 <HAL_UART_Transmit+0x7e>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	e003      	b.n	8004ede <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004ee6:	e02d      	b.n	8004f44 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fc9d 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e039      	b.n	8004f76 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f14:	b292      	uxth	r2, r2
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e008      	b.n	8004f32 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1cb      	bne.n	8004ee8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fc69 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e005      	b.n	8004f76 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004f74:	2302      	movs	r3, #2
  }
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3720      	adds	r7, #32
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004f84:	b08a      	sub	sp, #40	; 0x28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4bb8      	ldr	r3, [pc, #736]	; (8005298 <UART_SetConfig+0x318>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fbe:	430b      	orrs	r3, r1
 8004fc0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4aae      	ldr	r2, [pc, #696]	; (800529c <UART_SetConfig+0x31c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4aa5      	ldr	r2, [pc, #660]	; (80052a0 <UART_SetConfig+0x320>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d126      	bne.n	800505e <UART_SetConfig+0xde>
 8005010:	4ba4      	ldr	r3, [pc, #656]	; (80052a4 <UART_SetConfig+0x324>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b03      	cmp	r3, #3
 800501c:	d81a      	bhi.n	8005054 <UART_SetConfig+0xd4>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0xa4>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005035 	.word	0x08005035
 8005028:	08005045 	.word	0x08005045
 800502c:	0800503d 	.word	0x0800503d
 8005030:	0800504d 	.word	0x0800504d
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e105      	b.n	8005248 <UART_SetConfig+0x2c8>
 800503c:	2302      	movs	r3, #2
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e101      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504a:	e0fd      	b.n	8005248 <UART_SetConfig+0x2c8>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005052:	e0f9      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505a:	bf00      	nop
 800505c:	e0f4      	b.n	8005248 <UART_SetConfig+0x2c8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a91      	ldr	r2, [pc, #580]	; (80052a8 <UART_SetConfig+0x328>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d138      	bne.n	80050da <UART_SetConfig+0x15a>
 8005068:	4b8e      	ldr	r3, [pc, #568]	; (80052a4 <UART_SetConfig+0x324>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d82c      	bhi.n	80050d0 <UART_SetConfig+0x150>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <UART_SetConfig+0xfc>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050d1 	.word	0x080050d1
 8005084:	080050d1 	.word	0x080050d1
 8005088:	080050d1 	.word	0x080050d1
 800508c:	080050c1 	.word	0x080050c1
 8005090:	080050d1 	.word	0x080050d1
 8005094:	080050d1 	.word	0x080050d1
 8005098:	080050d1 	.word	0x080050d1
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	080050d1 	.word	0x080050d1
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050c9 	.word	0x080050c9
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e0c7      	b.n	8005248 <UART_SetConfig+0x2c8>
 80050b8:	2302      	movs	r3, #2
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e0c3      	b.n	8005248 <UART_SetConfig+0x2c8>
 80050c0:	2304      	movs	r3, #4
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	e0bf      	b.n	8005248 <UART_SetConfig+0x2c8>
 80050c8:	2308      	movs	r3, #8
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ce:	e0bb      	b.n	8005248 <UART_SetConfig+0x2c8>
 80050d0:	2310      	movs	r3, #16
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050d6:	bf00      	nop
 80050d8:	e0b6      	b.n	8005248 <UART_SetConfig+0x2c8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a73      	ldr	r2, [pc, #460]	; (80052ac <UART_SetConfig+0x32c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d125      	bne.n	8005130 <UART_SetConfig+0x1b0>
 80050e4:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <UART_SetConfig+0x324>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d011      	beq.n	8005116 <UART_SetConfig+0x196>
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d802      	bhi.n	80050fc <UART_SetConfig+0x17c>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <UART_SetConfig+0x186>
 80050fa:	e014      	b.n	8005126 <UART_SetConfig+0x1a6>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d006      	beq.n	800510e <UART_SetConfig+0x18e>
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	d00c      	beq.n	800511e <UART_SetConfig+0x19e>
 8005104:	e00f      	b.n	8005126 <UART_SetConfig+0x1a6>
 8005106:	2300      	movs	r3, #0
 8005108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510c:	e09c      	b.n	8005248 <UART_SetConfig+0x2c8>
 800510e:	2302      	movs	r3, #2
 8005110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005114:	e098      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005116:	2304      	movs	r3, #4
 8005118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511c:	e094      	b.n	8005248 <UART_SetConfig+0x2c8>
 800511e:	2308      	movs	r3, #8
 8005120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005124:	e090      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005126:	2310      	movs	r3, #16
 8005128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512c:	bf00      	nop
 800512e:	e08b      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <UART_SetConfig+0x330>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d125      	bne.n	8005186 <UART_SetConfig+0x206>
 800513a:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <UART_SetConfig+0x324>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005140:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d011      	beq.n	800516c <UART_SetConfig+0x1ec>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d802      	bhi.n	8005152 <UART_SetConfig+0x1d2>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <UART_SetConfig+0x1dc>
 8005150:	e014      	b.n	800517c <UART_SetConfig+0x1fc>
 8005152:	2b80      	cmp	r3, #128	; 0x80
 8005154:	d006      	beq.n	8005164 <UART_SetConfig+0x1e4>
 8005156:	2bc0      	cmp	r3, #192	; 0xc0
 8005158:	d00c      	beq.n	8005174 <UART_SetConfig+0x1f4>
 800515a:	e00f      	b.n	800517c <UART_SetConfig+0x1fc>
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e071      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005164:	2302      	movs	r3, #2
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e06d      	b.n	8005248 <UART_SetConfig+0x2c8>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e069      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e065      	b.n	8005248 <UART_SetConfig+0x2c8>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	bf00      	nop
 8005184:	e060      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a4a      	ldr	r2, [pc, #296]	; (80052b4 <UART_SetConfig+0x334>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d129      	bne.n	80051e4 <UART_SetConfig+0x264>
 8005190:	4b44      	ldr	r3, [pc, #272]	; (80052a4 <UART_SetConfig+0x324>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519e:	d014      	beq.n	80051ca <UART_SetConfig+0x24a>
 80051a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a4:	d802      	bhi.n	80051ac <UART_SetConfig+0x22c>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <UART_SetConfig+0x23a>
 80051aa:	e016      	b.n	80051da <UART_SetConfig+0x25a>
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b0:	d007      	beq.n	80051c2 <UART_SetConfig+0x242>
 80051b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b6:	d00c      	beq.n	80051d2 <UART_SetConfig+0x252>
 80051b8:	e00f      	b.n	80051da <UART_SetConfig+0x25a>
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c0:	e042      	b.n	8005248 <UART_SetConfig+0x2c8>
 80051c2:	2302      	movs	r3, #2
 80051c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c8:	e03e      	b.n	8005248 <UART_SetConfig+0x2c8>
 80051ca:	2304      	movs	r3, #4
 80051cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d0:	e03a      	b.n	8005248 <UART_SetConfig+0x2c8>
 80051d2:	2308      	movs	r3, #8
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d8:	e036      	b.n	8005248 <UART_SetConfig+0x2c8>
 80051da:	2310      	movs	r3, #16
 80051dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e0:	bf00      	nop
 80051e2:	e031      	b.n	8005248 <UART_SetConfig+0x2c8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2c      	ldr	r2, [pc, #176]	; (800529c <UART_SetConfig+0x31c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d129      	bne.n	8005242 <UART_SetConfig+0x2c2>
 80051ee:	4b2d      	ldr	r3, [pc, #180]	; (80052a4 <UART_SetConfig+0x324>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fc:	d014      	beq.n	8005228 <UART_SetConfig+0x2a8>
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d802      	bhi.n	800520a <UART_SetConfig+0x28a>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <UART_SetConfig+0x298>
 8005208:	e016      	b.n	8005238 <UART_SetConfig+0x2b8>
 800520a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520e:	d007      	beq.n	8005220 <UART_SetConfig+0x2a0>
 8005210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005214:	d00c      	beq.n	8005230 <UART_SetConfig+0x2b0>
 8005216:	e00f      	b.n	8005238 <UART_SetConfig+0x2b8>
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521e:	e013      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005220:	2302      	movs	r3, #2
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005228:	2304      	movs	r3, #4
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e00b      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005230:	2308      	movs	r3, #8
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005236:	e007      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005238:	2310      	movs	r3, #16
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523e:	bf00      	nop
 8005240:	e002      	b.n	8005248 <UART_SetConfig+0x2c8>
 8005242:	2310      	movs	r3, #16
 8005244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <UART_SetConfig+0x31c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	f040 80fe 	bne.w	8005450 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005254:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005258:	2b08      	cmp	r3, #8
 800525a:	d837      	bhi.n	80052cc <UART_SetConfig+0x34c>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x2e4>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005289 	.word	0x08005289
 8005268:	080052cd 	.word	0x080052cd
 800526c:	08005291 	.word	0x08005291
 8005270:	080052cd 	.word	0x080052cd
 8005274:	080052bd 	.word	0x080052bd
 8005278:	080052cd 	.word	0x080052cd
 800527c:	080052cd 	.word	0x080052cd
 8005280:	080052cd 	.word	0x080052cd
 8005284:	080052c5 	.word	0x080052c5
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fe fab4 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 800528c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800528e:	e020      	b.n	80052d2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005290:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <UART_SetConfig+0x338>)
 8005292:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005294:	e01d      	b.n	80052d2 <UART_SetConfig+0x352>
 8005296:	bf00      	nop
 8005298:	efff69f3 	.word	0xefff69f3
 800529c:	40008000 	.word	0x40008000
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40004400 	.word	0x40004400
 80052ac:	40004800 	.word	0x40004800
 80052b0:	40004c00 	.word	0x40004c00
 80052b4:	40005000 	.word	0x40005000
 80052b8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80052bc:	f7fe fa04 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 80052c0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052c2:	e006      	b.n	80052d2 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80052c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80052ca:	e002      	b.n	80052d2 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	76fb      	strb	r3, [r7, #27]
        break;
 80052d0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 81b9 	beq.w	800564c <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d305      	bcc.n	80052f6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d902      	bls.n	80052fc <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	76fb      	strb	r3, [r7, #27]
 80052fa:	e1a7      	b.n	800564c <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80052fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005300:	2b08      	cmp	r3, #8
 8005302:	f200 8092 	bhi.w	800542a <UART_SetConfig+0x4aa>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0x38c>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005331 	.word	0x08005331
 8005310:	0800542b 	.word	0x0800542b
 8005314:	0800537f 	.word	0x0800537f
 8005318:	0800542b 	.word	0x0800542b
 800531c:	080053b3 	.word	0x080053b3
 8005320:	0800542b 	.word	0x0800542b
 8005324:	0800542b 	.word	0x0800542b
 8005328:	0800542b 	.word	0x0800542b
 800532c:	08005401 	.word	0x08005401
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005330:	f7fe fa60 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005334:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4619      	mov	r1, r3
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	f04f 0400 	mov.w	r4, #0
 8005346:	0214      	lsls	r4, r2, #8
 8005348:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800534c:	020b      	lsls	r3, r1, #8
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6852      	ldr	r2, [r2, #4]
 8005352:	0852      	lsrs	r2, r2, #1
 8005354:	4611      	mov	r1, r2
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	eb13 0b01 	adds.w	fp, r3, r1
 800535e:	eb44 0c02 	adc.w	ip, r4, r2
 8005362:	4658      	mov	r0, fp
 8005364:	4661      	mov	r1, ip
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f04f 0400 	mov.w	r4, #0
 800536e:	461a      	mov	r2, r3
 8005370:	4623      	mov	r3, r4
 8005372:	f7fa ffd5 	bl	8000320 <__aeabi_uldivmod>
 8005376:	4603      	mov	r3, r0
 8005378:	460c      	mov	r4, r1
 800537a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800537c:	e058      	b.n	8005430 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	085b      	lsrs	r3, r3, #1
 8005384:	f04f 0400 	mov.w	r4, #0
 8005388:	49ae      	ldr	r1, [pc, #696]	; (8005644 <UART_SetConfig+0x6c4>)
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	eb13 0b01 	adds.w	fp, r3, r1
 8005392:	eb44 0c02 	adc.w	ip, r4, r2
 8005396:	4658      	mov	r0, fp
 8005398:	4661      	mov	r1, ip
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f04f 0400 	mov.w	r4, #0
 80053a2:	461a      	mov	r2, r3
 80053a4:	4623      	mov	r3, r4
 80053a6:	f7fa ffbb 	bl	8000320 <__aeabi_uldivmod>
 80053aa:	4603      	mov	r3, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80053b0:	e03e      	b.n	8005430 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fe f989 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 80053b6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4619      	mov	r1, r3
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	f04f 0400 	mov.w	r4, #0
 80053c8:	0214      	lsls	r4, r2, #8
 80053ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80053ce:	020b      	lsls	r3, r1, #8
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6852      	ldr	r2, [r2, #4]
 80053d4:	0852      	lsrs	r2, r2, #1
 80053d6:	4611      	mov	r1, r2
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	eb13 0b01 	adds.w	fp, r3, r1
 80053e0:	eb44 0c02 	adc.w	ip, r4, r2
 80053e4:	4658      	mov	r0, fp
 80053e6:	4661      	mov	r1, ip
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f04f 0400 	mov.w	r4, #0
 80053f0:	461a      	mov	r2, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	f7fa ff94 	bl	8000320 <__aeabi_uldivmod>
 80053f8:	4603      	mov	r3, r0
 80053fa:	460c      	mov	r4, r1
 80053fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80053fe:	e017      	b.n	8005430 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	f04f 0400 	mov.w	r4, #0
 800540a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800540e:	f144 0100 	adc.w	r1, r4, #0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f04f 0400 	mov.w	r4, #0
 800541a:	461a      	mov	r2, r3
 800541c:	4623      	mov	r3, r4
 800541e:	f7fa ff7f 	bl	8000320 <__aeabi_uldivmod>
 8005422:	4603      	mov	r3, r0
 8005424:	460c      	mov	r4, r1
 8005426:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005428:	e002      	b.n	8005430 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	76fb      	strb	r3, [r7, #27]
            break;
 800542e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005436:	d308      	bcc.n	800544a <UART_SetConfig+0x4ca>
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543e:	d204      	bcs.n	800544a <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e100      	b.n	800564c <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	76fb      	strb	r3, [r7, #27]
 800544e:	e0fd      	b.n	800564c <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	f040 8084 	bne.w	8005564 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800545c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005460:	2b08      	cmp	r3, #8
 8005462:	d85f      	bhi.n	8005524 <UART_SetConfig+0x5a4>
 8005464:	a201      	add	r2, pc, #4	; (adr r2, 800546c <UART_SetConfig+0x4ec>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	08005491 	.word	0x08005491
 8005470:	080054b1 	.word	0x080054b1
 8005474:	080054d1 	.word	0x080054d1
 8005478:	08005525 	.word	0x08005525
 800547c:	080054ed 	.word	0x080054ed
 8005480:	08005525 	.word	0x08005525
 8005484:	08005525 	.word	0x08005525
 8005488:	08005525 	.word	0x08005525
 800548c:	0800550d 	.word	0x0800550d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005490:	f7fe f9b0 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005494:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	005a      	lsls	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	085b      	lsrs	r3, r3, #1
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054ae:	e03c      	b.n	800552a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b0:	f7fe f9b6 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 80054b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	005a      	lsls	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054ce:	e02c      	b.n	800552a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80054da:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6852      	ldr	r2, [r2, #4]
 80054e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80054ea:	e01e      	b.n	800552a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ec:	f7fe f8ec 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 80054f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	005a      	lsls	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	441a      	add	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	fbb2 f3f3 	udiv	r3, r2, r3
 8005506:	b29b      	uxth	r3, r3
 8005508:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800550a:	e00e      	b.n	800552a <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	fbb2 f3f3 	udiv	r3, r2, r3
 800551e:	b29b      	uxth	r3, r3
 8005520:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005522:	e002      	b.n	800552a <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	76fb      	strb	r3, [r7, #27]
        break;
 8005528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	2b0f      	cmp	r3, #15
 800552e:	d916      	bls.n	800555e <UART_SetConfig+0x5de>
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005536:	d212      	bcs.n	800555e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	b29b      	uxth	r3, r3
 800553c:	f023 030f 	bic.w	r3, r3, #15
 8005540:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	b29a      	uxth	r2, r3
 800554e:	89fb      	ldrh	r3, [r7, #14]
 8005550:	4313      	orrs	r3, r2
 8005552:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	89fa      	ldrh	r2, [r7, #14]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	e076      	b.n	800564c <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	76fb      	strb	r3, [r7, #27]
 8005562:	e073      	b.n	800564c <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005568:	2b08      	cmp	r3, #8
 800556a:	d85c      	bhi.n	8005626 <UART_SetConfig+0x6a6>
 800556c:	a201      	add	r2, pc, #4	; (adr r2, 8005574 <UART_SetConfig+0x5f4>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	08005599 	.word	0x08005599
 8005578:	080055b7 	.word	0x080055b7
 800557c:	080055d5 	.word	0x080055d5
 8005580:	08005627 	.word	0x08005627
 8005584:	080055f1 	.word	0x080055f1
 8005588:	08005627 	.word	0x08005627
 800558c:	08005627 	.word	0x08005627
 8005590:	08005627 	.word	0x08005627
 8005594:	0800560f 	.word	0x0800560f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005598:	f7fe f92c 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 800559c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	085a      	lsrs	r2, r3, #1
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	441a      	add	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055b4:	e03a      	b.n	800562c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b6:	f7fe f933 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 80055ba:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	085a      	lsrs	r2, r3, #1
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	441a      	add	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055d2:	e02b      	b.n	800562c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	085b      	lsrs	r3, r3, #1
 80055da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80055de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6852      	ldr	r2, [r2, #4]
 80055e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80055ee:	e01d      	b.n	800562c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055f0:	f7fe f86a 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 80055f4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	085a      	lsrs	r2, r3, #1
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	441a      	add	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	b29b      	uxth	r3, r3
 800560a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800560c:	e00e      	b.n	800562c <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	b29b      	uxth	r3, r3
 8005622:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005624:	e002      	b.n	800562c <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	76fb      	strb	r3, [r7, #27]
        break;
 800562a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2b0f      	cmp	r3, #15
 8005630:	d90a      	bls.n	8005648 <UART_SetConfig+0x6c8>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005638:	d206      	bcs.n	8005648 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	e003      	b.n	800564c <UART_SetConfig+0x6cc>
 8005644:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005658:	7efb      	ldrb	r3, [r7, #27]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3728      	adds	r7, #40	; 0x28
 800565e:	46bd      	mov	sp, r7
 8005660:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01a      	beq.n	800577a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005762:	d10a      	bne.n	800577a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80057b6:	f7fc fe77 	bl	80024a8 <HAL_GetTick>
 80057ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d10e      	bne.n	80057e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f82a 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e020      	b.n	800582a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d10e      	bne.n	8005814 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f814 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e00a      	b.n	800582a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	e05d      	b.n	8005900 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800584a:	d059      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584c:	f7fc fe2c 	bl	80024a8 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	429a      	cmp	r2, r3
 800585a:	d302      	bcc.n	8005862 <UART_WaitOnFlagUntilTimeout+0x30>
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11b      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005870:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0201 	bic.w	r2, r2, #1
 8005880:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e042      	b.n	8005920 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d02b      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058b6:	d123      	bne.n	8005900 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e00f      	b.n	8005920 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4013      	ands	r3, r2
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2300      	movne	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	429a      	cmp	r2, r3
 800591c:	d092      	beq.n	8005844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800592c:	bf00      	nop
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800593e:	f3ef 8305 	mrs	r3, IPSR
 8005942:	60bb      	str	r3, [r7, #8]
  return(result);
 8005944:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10f      	bne.n	800596a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594a:	f3ef 8310 	mrs	r3, PRIMASK
 800594e:	607b      	str	r3, [r7, #4]
  return(result);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005956:	f3ef 8311 	mrs	r3, BASEPRI
 800595a:	603b      	str	r3, [r7, #0]
  return(result);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <osKernelInitialize+0x3a>
 8005962:	4b0e      	ldr	r3, [pc, #56]	; (800599c <osKernelInitialize+0x64>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d103      	bne.n	8005972 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800596a:	f06f 0305 	mvn.w	r3, #5
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	e00c      	b.n	800598c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005972:	4b0a      	ldr	r3, [pc, #40]	; (800599c <osKernelInitialize+0x64>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d105      	bne.n	8005986 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <osKernelInitialize+0x64>)
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e002      	b.n	800598c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800598a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800598c:	68fb      	ldr	r3, [r7, #12]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	2000013c 	.word	0x2000013c

080059a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a6:	f3ef 8305 	mrs	r3, IPSR
 80059aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b2:	f3ef 8310 	mrs	r3, PRIMASK
 80059b6:	607b      	str	r3, [r7, #4]
  return(result);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d105      	bne.n	80059ca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059be:	f3ef 8311 	mrs	r3, BASEPRI
 80059c2:	603b      	str	r3, [r7, #0]
  return(result);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <osKernelStart+0x3a>
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <osKernelStart+0x68>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d103      	bne.n	80059da <osKernelStart+0x3a>
    stat = osErrorISR;
 80059d2:	f06f 0305 	mvn.w	r3, #5
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e010      	b.n	80059fc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <osKernelStart+0x68>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d109      	bne.n	80059f6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059e2:	f7ff ffa1 	bl	8005928 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <osKernelStart+0x68>)
 80059e8:	2202      	movs	r2, #2
 80059ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059ec:	f001 fce6 	bl	80073bc <vTaskStartScheduler>
      stat = osOK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e002      	b.n	80059fc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059fc:	68fb      	ldr	r3, [r7, #12]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2000013c 	.word	0x2000013c

08005a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b090      	sub	sp, #64	; 0x40
 8005a10:	af04      	add	r7, sp, #16
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1c:	f3ef 8305 	mrs	r3, IPSR
 8005a20:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a22:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 8090 	bne.w	8005b4a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a36:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3a:	617b      	str	r3, [r7, #20]
  return(result);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <osThreadNew+0x3e>
 8005a42:	4b44      	ldr	r3, [pc, #272]	; (8005b54 <osThreadNew+0x148>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d07f      	beq.n	8005b4a <osThreadNew+0x13e>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d07c      	beq.n	8005b4a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005a56:	2318      	movs	r3, #24
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a62:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d045      	beq.n	8005af6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <osThreadNew+0x6c>
        name = attr->name;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d008      	beq.n	8005a9e <osThreadNew+0x92>
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	2b38      	cmp	r3, #56	; 0x38
 8005a90:	d805      	bhi.n	8005a9e <osThreadNew+0x92>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <osThreadNew+0x96>
        return (NULL);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	e054      	b.n	8005b4c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <osThreadNew+0xcc>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b5b      	cmp	r3, #91	; 0x5b
 8005ac0:	d90a      	bls.n	8005ad8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d006      	beq.n	8005ad8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <osThreadNew+0xcc>
        mem = 1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	623b      	str	r3, [r7, #32]
 8005ad6:	e010      	b.n	8005afa <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10c      	bne.n	8005afa <osThreadNew+0xee>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d108      	bne.n	8005afa <osThreadNew+0xee>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <osThreadNew+0xee>
          mem = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	623b      	str	r3, [r7, #32]
 8005af4:	e001      	b.n	8005afa <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d110      	bne.n	8005b22 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b08:	9202      	str	r2, [sp, #8]
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f001 fa7e 	bl	8007018 <xTaskCreateStatic>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e013      	b.n	8005b4a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d110      	bne.n	8005b4a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 fac6 	bl	80070cc <xTaskCreate>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d001      	beq.n	8005b4a <osThreadNew+0x13e>
          hTask = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b4a:	693b      	ldr	r3, [r7, #16]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3730      	adds	r7, #48	; 0x30
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	2000013c 	.word	0x2000013c

08005b58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b60:	f3ef 8305 	mrs	r3, IPSR
 8005b64:	613b      	str	r3, [r7, #16]
  return(result);
 8005b66:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10f      	bne.n	8005b8c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b70:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b78:	f3ef 8311 	mrs	r3, BASEPRI
 8005b7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <osDelay+0x3c>
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <osDelay+0x58>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d103      	bne.n	8005b94 <osDelay+0x3c>
    stat = osErrorISR;
 8005b8c:	f06f 0305 	mvn.w	r3, #5
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e007      	b.n	8005ba4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 fbd8 	bl	8007354 <vTaskDelay>
    }
  }

  return (stat);
 8005ba4:	697b      	ldr	r3, [r7, #20]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	2000013c 	.word	0x2000013c

08005bb4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	; 0x30
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc4:	f3ef 8305 	mrs	r3, IPSR
 8005bc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f040 8087 	bne.w	8005ce0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd6:	617b      	str	r3, [r7, #20]
  return(result);
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bde:	f3ef 8311 	mrs	r3, BASEPRI
 8005be2:	613b      	str	r3, [r7, #16]
  return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <osSemaphoreNew+0x3e>
 8005bea:	4b40      	ldr	r3, [pc, #256]	; (8005cec <osSemaphoreNew+0x138>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d076      	beq.n	8005ce0 <osSemaphoreNew+0x12c>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d073      	beq.n	8005ce0 <osSemaphoreNew+0x12c>
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d86f      	bhi.n	8005ce0 <osSemaphoreNew+0x12c>
    mem = -1;
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d015      	beq.n	8005c38 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d006      	beq.n	8005c22 <osSemaphoreNew+0x6e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b4f      	cmp	r3, #79	; 0x4f
 8005c1a:	d902      	bls.n	8005c22 <osSemaphoreNew+0x6e>
        mem = 1;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	623b      	str	r3, [r7, #32]
 8005c20:	e00c      	b.n	8005c3c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d108      	bne.n	8005c3c <osSemaphoreNew+0x88>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d104      	bne.n	8005c3c <osSemaphoreNew+0x88>
          mem = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	e001      	b.n	8005c3c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c42:	d04d      	beq.n	8005ce0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d129      	bne.n	8005c9e <osSemaphoreNew+0xea>
        if (mem == 1) {
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d10b      	bne.n	8005c68 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	2303      	movs	r3, #3
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f000 fa54 	bl	800610c <xQueueGenericCreateStatic>
 8005c64:	6278      	str	r0, [r7, #36]	; 0x24
 8005c66:	e005      	b.n	8005c74 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005c68:	2203      	movs	r2, #3
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f000 fac0 	bl	80061f2 <xQueueGenericCreate>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d022      	beq.n	8005cc0 <osSemaphoreNew+0x10c>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01f      	beq.n	8005cc0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c80:	2300      	movs	r3, #0
 8005c82:	2200      	movs	r2, #0
 8005c84:	2100      	movs	r1, #0
 8005c86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c88:	f000 fb7c 	bl	8006384 <xQueueGenericSend>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d016      	beq.n	8005cc0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8005c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c94:	f000 ffef 	bl	8006c76 <vQueueDelete>
            hSemaphore = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	e010      	b.n	8005cc0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d108      	bne.n	8005cb6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fb02 	bl	80062b6 <xQueueCreateCountingSemaphoreStatic>
 8005cb2:	6278      	str	r0, [r7, #36]	; 0x24
 8005cb4:	e004      	b.n	8005cc0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fb31 	bl	8006320 <xQueueCreateCountingSemaphore>
 8005cbe:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <osSemaphoreNew+0x120>
          name = attr->name;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e001      	b.n	8005cd8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cdc:	f001 f916 	bl	8006f0c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3728      	adds	r7, #40	; 0x28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	2000013c 	.word	0x2000013c

08005cf0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005d08:	f06f 0303 	mvn.w	r3, #3
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e04b      	b.n	8005da8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d10:	f3ef 8305 	mrs	r3, IPSR
 8005d14:	617b      	str	r3, [r7, #20]
  return(result);
 8005d16:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10f      	bne.n	8005d3c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d20:	613b      	str	r3, [r7, #16]
  return(result);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d28:	f3ef 8311 	mrs	r3, BASEPRI
 8005d2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d026      	beq.n	8005d82 <osSemaphoreAcquire+0x92>
 8005d34:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <osSemaphoreAcquire+0xc4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d122      	bne.n	8005d82 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005d42:	f06f 0303 	mvn.w	r3, #3
 8005d46:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005d48:	e02d      	b.n	8005da6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005d4e:	f107 0308 	add.w	r3, r7, #8
 8005d52:	461a      	mov	r2, r3
 8005d54:	2100      	movs	r1, #0
 8005d56:	69b8      	ldr	r0, [r7, #24]
 8005d58:	f000 ff10 	bl	8006b7c <xQueueReceiveFromISR>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d003      	beq.n	8005d6a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005d62:	f06f 0302 	mvn.w	r3, #2
 8005d66:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005d68:	e01d      	b.n	8005da6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <osSemaphoreAcquire+0xb6>
 8005d70:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <osSemaphoreAcquire+0xc8>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005d80:	e011      	b.n	8005da6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	69b8      	ldr	r0, [r7, #24]
 8005d86:	f000 fdf1 	bl	800696c <xQueueSemaphoreTake>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d00b      	beq.n	8005da8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005d96:	f06f 0301 	mvn.w	r3, #1
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e004      	b.n	8005da8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005d9e:	f06f 0302 	mvn.w	r3, #2
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e000      	b.n	8005da8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005da6:	bf00      	nop
      }
    }
  }

  return (stat);
 8005da8:	69fb      	ldr	r3, [r7, #28]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	2000013c 	.word	0x2000013c
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005dd2:	f06f 0303 	mvn.w	r3, #3
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e03e      	b.n	8005e58 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dda:	f3ef 8305 	mrs	r3, IPSR
 8005dde:	617b      	str	r3, [r7, #20]
  return(result);
 8005de0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10f      	bne.n	8005e06 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dea:	613b      	str	r3, [r7, #16]
  return(result);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d105      	bne.n	8005dfe <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005df2:	f3ef 8311 	mrs	r3, BASEPRI
 8005df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01e      	beq.n	8005e3c <osSemaphoreRelease+0x80>
 8005dfe:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <osSemaphoreRelease+0xa8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d11a      	bne.n	8005e3c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e0a:	f107 0308 	add.w	r3, r7, #8
 8005e0e:	4619      	mov	r1, r3
 8005e10:	69b8      	ldr	r0, [r7, #24]
 8005e12:	f000 fc45 	bl	80066a0 <xQueueGiveFromISR>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d003      	beq.n	8005e24 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005e1c:	f06f 0302 	mvn.w	r3, #2
 8005e20:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e22:	e018      	b.n	8005e56 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d015      	beq.n	8005e56 <osSemaphoreRelease+0x9a>
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <osSemaphoreRelease+0xac>)
 8005e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e3a:	e00c      	b.n	8005e56 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2100      	movs	r1, #0
 8005e42:	69b8      	ldr	r0, [r7, #24]
 8005e44:	f000 fa9e 	bl	8006384 <xQueueGenericSend>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d004      	beq.n	8005e58 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005e4e:	f06f 0302 	mvn.w	r3, #2
 8005e52:	61fb      	str	r3, [r7, #28]
 8005e54:	e000      	b.n	8005e58 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e56:	bf00      	nop
    }
  }

  return (stat);
 8005e58:	69fb      	ldr	r3, [r7, #28]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	2000013c 	.word	0x2000013c
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a06      	ldr	r2, [pc, #24]	; (8005e9c <vApplicationGetIdleTaskMemory+0x30>)
 8005e82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e8a:	601a      	str	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	20000140 	.word	0x20000140
 8005e9c:	2000019c 	.word	0x2000019c

08005ea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <vApplicationGetTimerTaskMemory+0x2c>)
 8005eb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a06      	ldr	r2, [pc, #24]	; (8005ed0 <vApplicationGetTimerTaskMemory+0x30>)
 8005eb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	2000059c 	.word	0x2000059c
 8005ed0:	200005f8 	.word	0x200005f8

08005ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f103 0208 	add.w	r2, r3, #8
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f103 0208 	add.w	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f103 0208 	add.w	r2, r3, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8c:	d103      	bne.n	8005f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e00c      	b.n	8005fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e002      	b.n	8005fa4 <vListInsert+0x2e>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d2f6      	bcs.n	8005f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	601a      	str	r2, [r3, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6892      	ldr	r2, [r2, #8]
 8005ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6852      	ldr	r2, [r2, #4]
 8006008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d103      	bne.n	800601c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	1e5a      	subs	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	60bb      	str	r3, [r7, #8]
 8006062:	e7fe      	b.n	8006062 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006064:	f002 fc2a 	bl	80088bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	441a      	add	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	3b01      	subs	r3, #1
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	22ff      	movs	r2, #255	; 0xff
 80060a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	22ff      	movs	r2, #255	; 0xff
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d114      	bne.n	80060e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01a      	beq.n	80060f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3310      	adds	r3, #16
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 fbf8 	bl	80078bc <xTaskRemoveFromEventList>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <xQueueGenericReset+0xcc>)
 80060d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	e009      	b.n	80060f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3310      	adds	r3, #16
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff fef3 	bl	8005ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3324      	adds	r3, #36	; 0x24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff feee 	bl	8005ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060f8:	f002 fc0e 	bl	8008918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060fc:	2301      	movs	r3, #1
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08e      	sub	sp, #56	; 0x38
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <xQueueGenericCreateStatic+0x28>
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	e7fe      	b.n	8006132 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <xQueueGenericCreateStatic+0x42>
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
 800614c:	e7fe      	b.n	800614c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <xQueueGenericCreateStatic+0x4e>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <xQueueGenericCreateStatic+0x52>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <xQueueGenericCreateStatic+0x54>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d109      	bne.n	8006178 <xQueueGenericCreateStatic+0x6c>
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	623b      	str	r3, [r7, #32]
 8006176:	e7fe      	b.n	8006176 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <xQueueGenericCreateStatic+0x78>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <xQueueGenericCreateStatic+0x7c>
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <xQueueGenericCreateStatic+0x7e>
 8006188:	2300      	movs	r3, #0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <xQueueGenericCreateStatic+0x96>
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e7fe      	b.n	80061a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061a2:	2350      	movs	r3, #80	; 0x50
 80061a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b50      	cmp	r3, #80	; 0x50
 80061aa:	d009      	beq.n	80061c0 <xQueueGenericCreateStatic+0xb4>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e7fe      	b.n	80061be <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00d      	beq.n	80061e8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68b9      	ldr	r1, [r7, #8]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f844 	bl	8006270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3730      	adds	r7, #48	; 0x30
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08a      	sub	sp, #40	; 0x28
 80061f6:	af02      	add	r7, sp, #8
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	4613      	mov	r3, r2
 80061fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <xQueueGenericCreate+0x28>
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	e7fe      	b.n	8006218 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d102      	bne.n	8006226 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006220:	2300      	movs	r3, #0
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	e004      	b.n	8006230 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	3350      	adds	r3, #80	; 0x50
 8006234:	4618      	mov	r0, r3
 8006236:	f002 fc5b 	bl	8008af0 <pvPortMalloc>
 800623a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d011      	beq.n	8006266 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	3350      	adds	r3, #80	; 0x50
 800624a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006254:	79fa      	ldrb	r2, [r7, #7]
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	4613      	mov	r3, r2
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f805 	bl	8006270 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006266:	69bb      	ldr	r3, [r7, #24]
	}
 8006268:	4618      	mov	r0, r3
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d103      	bne.n	800628c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e002      	b.n	8006292 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800629e:	2101      	movs	r1, #1
 80062a0:	69b8      	ldr	r0, [r7, #24]
 80062a2:	f7ff fecb 	bl	800603c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b08a      	sub	sp, #40	; 0x28
 80062ba:	af02      	add	r7, sp, #8
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d109      	bne.n	80062dc <xQueueCreateCountingSemaphoreStatic+0x26>
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	e7fe      	b.n	80062da <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d909      	bls.n	80062f8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e7fe      	b.n	80062f6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80062f8:	2302      	movs	r3, #2
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff ff02 	bl	800610c <xQueueGenericCreateStatic>
 8006308:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006316:	69fb      	ldr	r3, [r7, #28]
	}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <xQueueCreateCountingSemaphore+0x24>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	e7fe      	b.n	8006342 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	429a      	cmp	r2, r3
 800634a:	d909      	bls.n	8006360 <xQueueCreateCountingSemaphore+0x40>
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e7fe      	b.n	800635e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006360:	2202      	movs	r2, #2
 8006362:	2100      	movs	r1, #0
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ff44 	bl	80061f2 <xQueueGenericCreate>
 800636a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006378:	697b      	ldr	r3, [r7, #20]
	}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	; 0x38
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006392:	2300      	movs	r3, #0
 8006394:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <xQueueGenericSend+0x30>
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b2:	e7fe      	b.n	80063b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <xQueueGenericSend+0x3e>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <xQueueGenericSend+0x42>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <xQueueGenericSend+0x44>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <xQueueGenericSend+0x5c>
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
 80063de:	e7fe      	b.n	80063de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d103      	bne.n	80063ee <xQueueGenericSend+0x6a>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <xQueueGenericSend+0x6e>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueGenericSend+0x70>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d109      	bne.n	800640c <xQueueGenericSend+0x88>
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	623b      	str	r3, [r7, #32]
 800640a:	e7fe      	b.n	800640a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800640c:	f001 fc0c 	bl	8007c28 <xTaskGetSchedulerState>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <xQueueGenericSend+0x98>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <xQueueGenericSend+0x9c>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <xQueueGenericSend+0x9e>
 8006420:	2300      	movs	r3, #0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <xQueueGenericSend+0xb6>
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e7fe      	b.n	8006438 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800643a:	f002 fa3f 	bl	80088bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <xQueueGenericSend+0xcc>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d129      	bne.n	80064a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	68b9      	ldr	r1, [r7, #8]
 8006454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006456:	f000 fc48 	bl	8006cea <prvCopyDataToQueue>
 800645a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	3324      	adds	r3, #36	; 0x24
 8006468:	4618      	mov	r0, r3
 800646a:	f001 fa27 	bl	80078bc <xTaskRemoveFromEventList>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d013      	beq.n	800649c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006474:	4b3f      	ldr	r3, [pc, #252]	; (8006574 <xQueueGenericSend+0x1f0>)
 8006476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	e00a      	b.n	800649c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800648c:	4b39      	ldr	r3, [pc, #228]	; (8006574 <xQueueGenericSend+0x1f0>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800649c:	f002 fa3c 	bl	8008918 <vPortExitCritical>
				return pdPASS;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e063      	b.n	800656c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064aa:	f002 fa35 	bl	8008918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	e05c      	b.n	800656c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064b8:	f107 0314 	add.w	r3, r7, #20
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 fa5f 	bl	8007980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064c2:	2301      	movs	r3, #1
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064c6:	f002 fa27 	bl	8008918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064ca:	f000 ffdb 	bl	8007484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ce:	f002 f9f5 	bl	80088bc <vPortEnterCritical>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064de:	d103      	bne.n	80064e8 <xQueueGenericSend+0x164>
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ee:	b25b      	sxtb	r3, r3
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f4:	d103      	bne.n	80064fe <xQueueGenericSend+0x17a>
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fe:	f002 fa0b 	bl	8008918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006502:	1d3a      	adds	r2, r7, #4
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fa4e 	bl	80079ac <xTaskCheckForTimeOut>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d124      	bne.n	8006560 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006518:	f000 fcdf 	bl	8006eda <prvIsQueueFull>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d018      	beq.n	8006554 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	3310      	adds	r3, #16
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f001 f978 	bl	8007820 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006530:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006532:	f000 fc6a 	bl	8006e0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006536:	f000 ffb3 	bl	80074a0 <xTaskResumeAll>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f47f af7c 	bne.w	800643a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006542:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <xQueueGenericSend+0x1f0>)
 8006544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	e772      	b.n	800643a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006556:	f000 fc58 	bl	8006e0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800655a:	f000 ffa1 	bl	80074a0 <xTaskResumeAll>
 800655e:	e76c      	b.n	800643a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006562:	f000 fc52 	bl	8006e0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006566:	f000 ff9b 	bl	80074a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800656a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800656c:	4618      	mov	r0, r3
 800656e:	3738      	adds	r7, #56	; 0x38
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	; 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <xQueueGenericSendFromISR+0x2c>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	e7fe      	b.n	80065a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <xQueueGenericSendFromISR+0x3a>
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <xQueueGenericSendFromISR+0x3e>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <xQueueGenericSendFromISR+0x40>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <xQueueGenericSendFromISR+0x58>
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	623b      	str	r3, [r7, #32]
 80065ce:	e7fe      	b.n	80065ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d103      	bne.n	80065de <xQueueGenericSendFromISR+0x66>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <xQueueGenericSendFromISR+0x6a>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <xQueueGenericSendFromISR+0x6c>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <xQueueGenericSendFromISR+0x84>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	e7fe      	b.n	80065fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065fc:	f002 fa3a 	bl	8008a74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006600:	f3ef 8211 	mrs	r2, BASEPRI
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61ba      	str	r2, [r7, #24]
 8006616:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006618:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006624:	429a      	cmp	r2, r3
 8006626:	d302      	bcc.n	800662e <xQueueGenericSendFromISR+0xb6>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d12c      	bne.n	8006688 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800663e:	f000 fb54 	bl	8006cea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006642:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800664a:	d112      	bne.n	8006672 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	d016      	beq.n	8006682 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	3324      	adds	r3, #36	; 0x24
 8006658:	4618      	mov	r0, r3
 800665a:	f001 f92f 	bl	80078bc <xTaskRemoveFromEventList>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00e      	beq.n	8006682 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e007      	b.n	8006682 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006676:	3301      	adds	r3, #1
 8006678:	b2db      	uxtb	r3, r3
 800667a:	b25a      	sxtb	r2, r3
 800667c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006682:	2301      	movs	r3, #1
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006686:	e001      	b.n	800668c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006688:	2300      	movs	r3, #0
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006698:	4618      	mov	r0, r3
 800669a:	3738      	adds	r7, #56	; 0x38
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08e      	sub	sp, #56	; 0x38
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	e7fe      	b.n	80066c6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <xQueueGiveFromISR+0x44>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	e7fe      	b.n	80066e2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d103      	bne.n	80066f4 <xQueueGiveFromISR+0x54>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <xQueueGiveFromISR+0x58>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <xQueueGiveFromISR+0x5a>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d109      	bne.n	8006712 <xQueueGiveFromISR+0x72>
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e7fe      	b.n	8006710 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006712:	f002 f9af 	bl	8008a74 <vPortValidateInterruptPriority>
	__asm volatile
 8006716:	f3ef 8211 	mrs	r2, BASEPRI
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	617a      	str	r2, [r7, #20]
 800672c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800672e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800673e:	429a      	cmp	r2, r3
 8006740:	d22b      	bcs.n	800679a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675c:	d112      	bne.n	8006784 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	d016      	beq.n	8006794 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	3324      	adds	r3, #36	; 0x24
 800676a:	4618      	mov	r0, r3
 800676c:	f001 f8a6 	bl	80078bc <xTaskRemoveFromEventList>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00b      	beq.n	8006794 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2201      	movs	r2, #1
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e007      	b.n	8006794 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006788:	3301      	adds	r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	b25a      	sxtb	r2, r3
 800678e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006794:	2301      	movs	r3, #1
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
 8006798:	e001      	b.n	800679e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800679a:	2300      	movs	r3, #0
 800679c:	637b      	str	r3, [r7, #52]	; 0x34
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3738      	adds	r7, #56	; 0x38
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08c      	sub	sp, #48	; 0x30
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <xQueueReceive+0x2e>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	e7fe      	b.n	80067e0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d103      	bne.n	80067f0 <xQueueReceive+0x3c>
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <xQueueReceive+0x40>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e000      	b.n	80067f6 <xQueueReceive+0x42>
 80067f4:	2300      	movs	r3, #0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <xQueueReceive+0x5a>
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	e7fe      	b.n	800680c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800680e:	f001 fa0b 	bl	8007c28 <xTaskGetSchedulerState>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <xQueueReceive+0x6a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <xQueueReceive+0x6e>
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <xQueueReceive+0x70>
 8006822:	2300      	movs	r3, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d109      	bne.n	800683c <xQueueReceive+0x88>
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	e7fe      	b.n	800683a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800683c:	f002 f83e 	bl	80088bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01f      	beq.n	800688c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006850:	f000 fab5 	bl	8006dbe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	1e5a      	subs	r2, r3, #1
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00f      	beq.n	8006884 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	3310      	adds	r3, #16
 8006868:	4618      	mov	r0, r3
 800686a:	f001 f827 	bl	80078bc <xTaskRemoveFromEventList>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006874:	4b3c      	ldr	r3, [pc, #240]	; (8006968 <xQueueReceive+0x1b4>)
 8006876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006884:	f002 f848 	bl	8008918 <vPortExitCritical>
				return pdPASS;
 8006888:	2301      	movs	r3, #1
 800688a:	e069      	b.n	8006960 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006892:	f002 f841 	bl	8008918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006896:	2300      	movs	r3, #0
 8006898:	e062      	b.n	8006960 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a0:	f107 0310 	add.w	r3, r7, #16
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f86b 	bl	8007980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068aa:	2301      	movs	r3, #1
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068ae:	f002 f833 	bl	8008918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068b2:	f000 fde7 	bl	8007484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068b6:	f002 f801 	bl	80088bc <vPortEnterCritical>
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c6:	d103      	bne.n	80068d0 <xQueueReceive+0x11c>
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068dc:	d103      	bne.n	80068e6 <xQueueReceive+0x132>
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e6:	f002 f817 	bl	8008918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ea:	1d3a      	adds	r2, r7, #4
 80068ec:	f107 0310 	add.w	r3, r7, #16
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 f85a 	bl	80079ac <xTaskCheckForTimeOut>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d123      	bne.n	8006946 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006900:	f000 fad5 	bl	8006eae <prvIsQueueEmpty>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d017      	beq.n	800693a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	3324      	adds	r3, #36	; 0x24
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	4611      	mov	r1, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 ff84 	bl	8007820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691a:	f000 fa76 	bl	8006e0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800691e:	f000 fdbf 	bl	80074a0 <xTaskResumeAll>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d189      	bne.n	800683c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006928:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <xQueueReceive+0x1b4>)
 800692a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	e780      	b.n	800683c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800693a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800693c:	f000 fa65 	bl	8006e0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006940:	f000 fdae 	bl	80074a0 <xTaskResumeAll>
 8006944:	e77a      	b.n	800683c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006948:	f000 fa5f 	bl	8006e0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800694c:	f000 fda8 	bl	80074a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006952:	f000 faac 	bl	8006eae <prvIsQueueEmpty>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	f43f af6f 	beq.w	800683c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800695e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006960:	4618      	mov	r0, r3
 8006962:	3730      	adds	r7, #48	; 0x30
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <xQueueSemaphoreTake+0x30>
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	623b      	str	r3, [r7, #32]
 800699a:	e7fe      	b.n	800699a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <xQueueSemaphoreTake+0x4c>
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	e7fe      	b.n	80069b6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069b8:	f001 f936 	bl	8007c28 <xTaskGetSchedulerState>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <xQueueSemaphoreTake+0x5c>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <xQueueSemaphoreTake+0x60>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <xQueueSemaphoreTake+0x62>
 80069cc:	2300      	movs	r3, #0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <xQueueSemaphoreTake+0x7a>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e7fe      	b.n	80069e4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069e6:	f001 ff69 	bl	80088bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d024      	beq.n	8006a40 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	1e5a      	subs	r2, r3, #1
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a06:	f001 fa81 	bl	8007f0c <pvTaskIncrementMutexHeldCount>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00f      	beq.n	8006a38 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	3310      	adds	r3, #16
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 ff4d 	bl	80078bc <xTaskRemoveFromEventList>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a28:	4b53      	ldr	r3, [pc, #332]	; (8006b78 <xQueueSemaphoreTake+0x20c>)
 8006a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2e:	601a      	str	r2, [r3, #0]
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a38:	f001 ff6e 	bl	8008918 <vPortExitCritical>
				return pdPASS;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e096      	b.n	8006b6e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d110      	bne.n	8006a68 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <xQueueSemaphoreTake+0xf4>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	e7fe      	b.n	8006a5e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a60:	f001 ff5a 	bl	8008918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e082      	b.n	8006b6e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 ff84 	bl	8007980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a7c:	f001 ff4c 	bl	8008918 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a80:	f000 fd00 	bl	8007484 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a84:	f001 ff1a 	bl	80088bc <vPortEnterCritical>
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a8e:	b25b      	sxtb	r3, r3
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a94:	d103      	bne.n	8006a9e <xQueueSemaphoreTake+0x132>
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aaa:	d103      	bne.n	8006ab4 <xQueueSemaphoreTake+0x148>
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab4:	f001 ff30 	bl	8008918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ab8:	463a      	mov	r2, r7
 8006aba:	f107 030c 	add.w	r3, r7, #12
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 ff73 	bl	80079ac <xTaskCheckForTimeOut>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d132      	bne.n	8006b32 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006acc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ace:	f000 f9ee 	bl	8006eae <prvIsQueueEmpty>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d026      	beq.n	8006b26 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006ae0:	f001 feec 	bl	80088bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 f8bb 	bl	8007c64 <xTaskPriorityInherit>
 8006aee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006af0:	f001 ff12 	bl	8008918 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	3324      	adds	r3, #36	; 0x24
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	4611      	mov	r1, r2
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fe8f 	bl	8007820 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b04:	f000 f981 	bl	8006e0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b08:	f000 fcca 	bl	80074a0 <xTaskResumeAll>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f af69 	bne.w	80069e6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006b14:	4b18      	ldr	r3, [pc, #96]	; (8006b78 <xQueueSemaphoreTake+0x20c>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	e75f      	b.n	80069e6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b28:	f000 f96f 	bl	8006e0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b2c:	f000 fcb8 	bl	80074a0 <xTaskResumeAll>
 8006b30:	e759      	b.n	80069e6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b34:	f000 f969 	bl	8006e0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b38:	f000 fcb2 	bl	80074a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b3e:	f000 f9b6 	bl	8006eae <prvIsQueueEmpty>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f43f af4e 	beq.w	80069e6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006b50:	f001 feb4 	bl	80088bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b56:	f000 f8b0 	bl	8006cba <prvGetDisinheritPriorityAfterTimeout>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 f952 	bl	8007e0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b68:	f001 fed6 	bl	8008918 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3738      	adds	r7, #56	; 0x38
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08e      	sub	sp, #56	; 0x38
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <xQueueReceiveFromISR+0x2a>
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	623b      	str	r3, [r7, #32]
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d103      	bne.n	8006bb4 <xQueueReceiveFromISR+0x38>
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <xQueueReceiveFromISR+0x3c>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <xQueueReceiveFromISR+0x3e>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <xQueueReceiveFromISR+0x56>
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bd2:	f001 ff4f 	bl	8008a74 <vPortValidateInterruptPriority>
	__asm volatile
 8006bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	61ba      	str	r2, [r7, #24]
 8006bec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006bee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d02f      	beq.n	8006c5e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0c:	f000 f8d7 	bl	8006dbe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	1e5a      	subs	r2, r3, #1
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c20:	d112      	bne.n	8006c48 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	3310      	adds	r3, #16
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fe44 	bl	80078bc <xTaskRemoveFromEventList>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00e      	beq.n	8006c58 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00b      	beq.n	8006c58 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e007      	b.n	8006c58 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	b25a      	sxtb	r2, r3
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c5c:	e001      	b.n	8006c62 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3738      	adds	r7, #56	; 0x38
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <vQueueDelete+0x26>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	60bb      	str	r3, [r7, #8]
 8006c9a:	e7fe      	b.n	8006c9a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f95d 	bl	8006f5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f001 ffe1 	bl	8008c74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d006      	beq.n	8006cd8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	e001      	b.n	8006cdc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
	}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10d      	bne.n	8006d24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d14d      	bne.n	8006dac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f001 f80d 	bl	8007d34 <xTaskPriorityDisinherit>
 8006d1a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	609a      	str	r2, [r3, #8]
 8006d22:	e043      	b.n	8006dac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d119      	bne.n	8006d5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6858      	ldr	r0, [r3, #4]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	461a      	mov	r2, r3
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	f002 f8db 	bl	8008ef0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	441a      	add	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d32b      	bcc.n	8006dac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	605a      	str	r2, [r3, #4]
 8006d5c:	e026      	b.n	8006dac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	68d8      	ldr	r0, [r3, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	461a      	mov	r2, r3
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	f002 f8c1 	bl	8008ef0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	425b      	negs	r3, r3
 8006d78:	441a      	add	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d207      	bcs.n	8006d9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	425b      	negs	r3, r3
 8006d94:	441a      	add	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d105      	bne.n	8006dac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006db4:	697b      	ldr	r3, [r7, #20]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d018      	beq.n	8006e02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	441a      	add	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d303      	bcc.n	8006df2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68d9      	ldr	r1, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6838      	ldr	r0, [r7, #0]
 8006dfe:	f002 f877 	bl	8008ef0 <memcpy>
	}
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e12:	f001 fd53 	bl	80088bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e1e:	e011      	b.n	8006e44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d012      	beq.n	8006e4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fd45 	bl	80078bc <xTaskRemoveFromEventList>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e38:	f000 fe18 	bl	8007a6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dce9      	bgt.n	8006e20 <prvUnlockQueue+0x16>
 8006e4c:	e000      	b.n	8006e50 <prvUnlockQueue+0x46>
					break;
 8006e4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	22ff      	movs	r2, #255	; 0xff
 8006e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e58:	f001 fd5e 	bl	8008918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e5c:	f001 fd2e 	bl	80088bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e68:	e011      	b.n	8006e8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d012      	beq.n	8006e98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3310      	adds	r3, #16
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fd20 	bl	80078bc <xTaskRemoveFromEventList>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e82:	f000 fdf3 	bl	8007a6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dce9      	bgt.n	8006e6a <prvUnlockQueue+0x60>
 8006e96:	e000      	b.n	8006e9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	22ff      	movs	r2, #255	; 0xff
 8006e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ea2:	f001 fd39 	bl	8008918 <vPortExitCritical>
}
 8006ea6:	bf00      	nop
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006eb6:	f001 fd01 	bl	80088bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	e001      	b.n	8006ecc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ecc:	f001 fd24 	bl	8008918 <vPortExitCritical>

	return xReturn;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ee2:	f001 fceb 	bl	80088bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d102      	bne.n	8006ef8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e001      	b.n	8006efc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006efc:	f001 fd0c 	bl	8008918 <vPortExitCritical>

	return xReturn;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	e014      	b.n	8006f46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f1c:	4a0e      	ldr	r2, [pc, #56]	; (8006f58 <vQueueAddToRegistry+0x4c>)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10b      	bne.n	8006f40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f28:	490b      	ldr	r1, [pc, #44]	; (8006f58 <vQueueAddToRegistry+0x4c>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f32:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <vQueueAddToRegistry+0x4c>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4413      	add	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f3e:	e005      	b.n	8006f4c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b07      	cmp	r3, #7
 8006f4a:	d9e7      	bls.n	8006f1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f4c:	bf00      	nop
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20005588 	.word	0x20005588

08006f5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e016      	b.n	8006f98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006f6a:	4a10      	ldr	r2, [pc, #64]	; (8006fac <vQueueUnregisterQueue+0x50>)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4413      	add	r3, r2
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d10b      	bne.n	8006f92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006f7a:	4a0c      	ldr	r2, [pc, #48]	; (8006fac <vQueueUnregisterQueue+0x50>)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006f84:	4a09      	ldr	r2, [pc, #36]	; (8006fac <vQueueUnregisterQueue+0x50>)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	4413      	add	r3, r2
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]
				break;
 8006f90:	e005      	b.n	8006f9e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b07      	cmp	r3, #7
 8006f9c:	d9e5      	bls.n	8006f6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20005588 	.word	0x20005588

08006fb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fc0:	f001 fc7c 	bl	80088bc <vPortEnterCritical>
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fca:	b25b      	sxtb	r3, r3
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd0:	d103      	bne.n	8006fda <vQueueWaitForMessageRestricted+0x2a>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe0:	b25b      	sxtb	r3, r3
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe6:	d103      	bne.n	8006ff0 <vQueueWaitForMessageRestricted+0x40>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ff0:	f001 fc92 	bl	8008918 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d106      	bne.n	800700a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	3324      	adds	r3, #36	; 0x24
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fc2f 	bl	8007868 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800700a:	6978      	ldr	r0, [r7, #20]
 800700c:	f7ff fefd 	bl	8006e0a <prvUnlockQueue>
	}
 8007010:	bf00      	nop
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08e      	sub	sp, #56	; 0x38
 800701c:	af04      	add	r7, sp, #16
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <xTaskCreateStatic+0x28>
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	623b      	str	r3, [r7, #32]
 800703e:	e7fe      	b.n	800703e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <xTaskCreateStatic+0x42>
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	e7fe      	b.n	8007058 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800705a:	235c      	movs	r3, #92	; 0x5c
 800705c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2b5c      	cmp	r3, #92	; 0x5c
 8007062:	d009      	beq.n	8007078 <xTaskCreateStatic+0x60>
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	e7fe      	b.n	8007076 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007078:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01e      	beq.n	80070be <xTaskCreateStatic+0xa6>
 8007080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007082:	2b00      	cmp	r3, #0
 8007084:	d01b      	beq.n	80070be <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800708e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	2202      	movs	r2, #2
 8007094:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007098:	2300      	movs	r3, #0
 800709a:	9303      	str	r3, [sp, #12]
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	9302      	str	r3, [sp, #8]
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f850 	bl	8007156 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070b8:	f000 f8dc 	bl	8007274 <prvAddNewTaskToReadyList>
 80070bc:	e001      	b.n	80070c2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070c2:	697b      	ldr	r3, [r7, #20]
	}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3728      	adds	r7, #40	; 0x28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08c      	sub	sp, #48	; 0x30
 80070d0:	af04      	add	r7, sp, #16
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4613      	mov	r3, r2
 80070da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 fd05 	bl	8008af0 <pvPortMalloc>
 80070e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070ee:	205c      	movs	r0, #92	; 0x5c
 80070f0:	f001 fcfe 	bl	8008af0 <pvPortMalloc>
 80070f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
 8007102:	e005      	b.n	8007110 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007104:	6978      	ldr	r0, [r7, #20]
 8007106:	f001 fdb5 	bl	8008c74 <vPortFree>
 800710a:	e001      	b.n	8007110 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d017      	beq.n	8007146 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	2300      	movs	r3, #0
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	9302      	str	r3, [sp, #8]
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f80e 	bl	8007156 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800713a:	69f8      	ldr	r0, [r7, #28]
 800713c:	f000 f89a 	bl	8007274 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007140:	2301      	movs	r3, #1
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e002      	b.n	800714c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800714a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800714c:	69bb      	ldr	r3, [r7, #24]
	}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b088      	sub	sp, #32
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	461a      	mov	r2, r3
 800716e:	21a5      	movs	r1, #165	; 0xa5
 8007170:	f001 fec9 	bl	8008f06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800717e:	3b01      	subs	r3, #1
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	f023 0307 	bic.w	r3, r3, #7
 800718c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	2b00      	cmp	r3, #0
 8007196:	d009      	beq.n	80071ac <prvInitialiseNewTask+0x56>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	617b      	str	r3, [r7, #20]
 80071aa:	e7fe      	b.n	80071aa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01f      	beq.n	80071f2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	e012      	b.n	80071de <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	4413      	add	r3, r2
 80071be:	7819      	ldrb	r1, [r3, #0]
 80071c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	3334      	adds	r3, #52	; 0x34
 80071c8:	460a      	mov	r2, r1
 80071ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d006      	beq.n	80071e6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	3301      	adds	r3, #1
 80071dc:	61fb      	str	r3, [r7, #28]
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	2b0f      	cmp	r3, #15
 80071e2:	d9e9      	bls.n	80071b8 <prvInitialiseNewTask+0x62>
 80071e4:	e000      	b.n	80071e8 <prvInitialiseNewTask+0x92>
			{
				break;
 80071e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071f0:	e003      	b.n	80071fa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	2b37      	cmp	r3, #55	; 0x37
 80071fe:	d901      	bls.n	8007204 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007200:	2337      	movs	r3, #55	; 0x37
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007208:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800720e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	2200      	movs	r2, #0
 8007214:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	3304      	adds	r3, #4
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fe7a 	bl	8005f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	3318      	adds	r3, #24
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fe75 	bl	8005f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	2200      	movs	r2, #0
 8007244:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	68f9      	ldr	r1, [r7, #12]
 8007252:	69b8      	ldr	r0, [r7, #24]
 8007254:	f001 fa08 	bl	8008668 <pxPortInitialiseStack>
 8007258:	4602      	mov	r2, r0
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800726a:	bf00      	nop
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800727c:	f001 fb1e 	bl	80088bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007280:	4b2d      	ldr	r3, [pc, #180]	; (8007338 <prvAddNewTaskToReadyList+0xc4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a2c      	ldr	r2, [pc, #176]	; (8007338 <prvAddNewTaskToReadyList+0xc4>)
 8007288:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800728a:	4b2c      	ldr	r3, [pc, #176]	; (800733c <prvAddNewTaskToReadyList+0xc8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007292:	4a2a      	ldr	r2, [pc, #168]	; (800733c <prvAddNewTaskToReadyList+0xc8>)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007298:	4b27      	ldr	r3, [pc, #156]	; (8007338 <prvAddNewTaskToReadyList+0xc4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d110      	bne.n	80072c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072a0:	f000 fc08 	bl	8007ab4 <prvInitialiseTaskLists>
 80072a4:	e00d      	b.n	80072c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072a6:	4b26      	ldr	r3, [pc, #152]	; (8007340 <prvAddNewTaskToReadyList+0xcc>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d109      	bne.n	80072c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072ae:	4b23      	ldr	r3, [pc, #140]	; (800733c <prvAddNewTaskToReadyList+0xc8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d802      	bhi.n	80072c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072bc:	4a1f      	ldr	r2, [pc, #124]	; (800733c <prvAddNewTaskToReadyList+0xc8>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072c2:	4b20      	ldr	r3, [pc, #128]	; (8007344 <prvAddNewTaskToReadyList+0xd0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3301      	adds	r3, #1
 80072c8:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <prvAddNewTaskToReadyList+0xd0>)
 80072ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072cc:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <prvAddNewTaskToReadyList+0xd0>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d8:	4b1b      	ldr	r3, [pc, #108]	; (8007348 <prvAddNewTaskToReadyList+0xd4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d903      	bls.n	80072e8 <prvAddNewTaskToReadyList+0x74>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	4a18      	ldr	r2, [pc, #96]	; (8007348 <prvAddNewTaskToReadyList+0xd4>)
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4a15      	ldr	r2, [pc, #84]	; (800734c <prvAddNewTaskToReadyList+0xd8>)
 80072f6:	441a      	add	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3304      	adds	r3, #4
 80072fc:	4619      	mov	r1, r3
 80072fe:	4610      	mov	r0, r2
 8007300:	f7fe fe15 	bl	8005f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007304:	f001 fb08 	bl	8008918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007308:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <prvAddNewTaskToReadyList+0xcc>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00e      	beq.n	800732e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <prvAddNewTaskToReadyList+0xc8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	429a      	cmp	r2, r3
 800731c:	d207      	bcs.n	800732e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <prvAddNewTaskToReadyList+0xdc>)
 8007320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	200012cc 	.word	0x200012cc
 800733c:	20000df8 	.word	0x20000df8
 8007340:	200012d8 	.word	0x200012d8
 8007344:	200012e8 	.word	0x200012e8
 8007348:	200012d4 	.word	0x200012d4
 800734c:	20000dfc 	.word	0x20000dfc
 8007350:	e000ed04 	.word	0xe000ed04

08007354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d016      	beq.n	8007394 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007366:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <vTaskDelay+0x60>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <vTaskDelay+0x2e>
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	e7fe      	b.n	8007380 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007382:	f000 f87f 	bl	8007484 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007386:	2100      	movs	r1, #0
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fdd3 	bl	8007f34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800738e:	f000 f887 	bl	80074a0 <xTaskResumeAll>
 8007392:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d107      	bne.n	80073aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800739a:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <vTaskDelay+0x64>)
 800739c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	200012f4 	.word	0x200012f4
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073ca:	463a      	mov	r2, r7
 80073cc:	1d39      	adds	r1, r7, #4
 80073ce:	f107 0308 	add.w	r3, r7, #8
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fd4a 	bl	8005e6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	9202      	str	r2, [sp, #8]
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	2300      	movs	r3, #0
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	460a      	mov	r2, r1
 80073ea:	4920      	ldr	r1, [pc, #128]	; (800746c <vTaskStartScheduler+0xb0>)
 80073ec:	4820      	ldr	r0, [pc, #128]	; (8007470 <vTaskStartScheduler+0xb4>)
 80073ee:	f7ff fe13 	bl	8007018 <xTaskCreateStatic>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b1f      	ldr	r3, [pc, #124]	; (8007474 <vTaskStartScheduler+0xb8>)
 80073f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073f8:	4b1e      	ldr	r3, [pc, #120]	; (8007474 <vTaskStartScheduler+0xb8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007400:	2301      	movs	r3, #1
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	e001      	b.n	800740a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d102      	bne.n	8007416 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007410:	f000 fde4 	bl	8007fdc <xTimerCreateTimerTask>
 8007414:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d115      	bne.n	8007448 <vTaskStartScheduler+0x8c>
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <vTaskStartScheduler+0xbc>)
 8007430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007434:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007436:	4b11      	ldr	r3, [pc, #68]	; (800747c <vTaskStartScheduler+0xc0>)
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800743c:	4b10      	ldr	r3, [pc, #64]	; (8007480 <vTaskStartScheduler+0xc4>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007442:	f001 f99d 	bl	8008780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007446:	e00d      	b.n	8007464 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800744e:	d109      	bne.n	8007464 <vTaskStartScheduler+0xa8>
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e7fe      	b.n	8007462 <vTaskStartScheduler+0xa6>
}
 8007464:	bf00      	nop
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	080097f8 	.word	0x080097f8
 8007470:	08007a85 	.word	0x08007a85
 8007474:	200012f0 	.word	0x200012f0
 8007478:	200012ec 	.word	0x200012ec
 800747c:	200012d8 	.word	0x200012d8
 8007480:	200012d0 	.word	0x200012d0

08007484 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <vTaskSuspendAll+0x18>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3301      	adds	r3, #1
 800748e:	4a03      	ldr	r2, [pc, #12]	; (800749c <vTaskSuspendAll+0x18>)
 8007490:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	200012f4 	.word	0x200012f4

080074a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074ae:	4b41      	ldr	r3, [pc, #260]	; (80075b4 <xTaskResumeAll+0x114>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d109      	bne.n	80074ca <xTaskResumeAll+0x2a>
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	e7fe      	b.n	80074c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074ca:	f001 f9f7 	bl	80088bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074ce:	4b39      	ldr	r3, [pc, #228]	; (80075b4 <xTaskResumeAll+0x114>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	4a37      	ldr	r2, [pc, #220]	; (80075b4 <xTaskResumeAll+0x114>)
 80074d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d8:	4b36      	ldr	r3, [pc, #216]	; (80075b4 <xTaskResumeAll+0x114>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d162      	bne.n	80075a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074e0:	4b35      	ldr	r3, [pc, #212]	; (80075b8 <xTaskResumeAll+0x118>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d05e      	beq.n	80075a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074e8:	e02f      	b.n	800754a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ea:	4b34      	ldr	r3, [pc, #208]	; (80075bc <xTaskResumeAll+0x11c>)
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3318      	adds	r3, #24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fd76 	bl	8005fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe fd71 	bl	8005fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750a:	4b2d      	ldr	r3, [pc, #180]	; (80075c0 <xTaskResumeAll+0x120>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d903      	bls.n	800751a <xTaskResumeAll+0x7a>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	4a2a      	ldr	r2, [pc, #168]	; (80075c0 <xTaskResumeAll+0x120>)
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	4613      	mov	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4a27      	ldr	r2, [pc, #156]	; (80075c4 <xTaskResumeAll+0x124>)
 8007528:	441a      	add	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f7fe fcfc 	bl	8005f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753a:	4b23      	ldr	r3, [pc, #140]	; (80075c8 <xTaskResumeAll+0x128>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	429a      	cmp	r2, r3
 8007542:	d302      	bcc.n	800754a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007544:	4b21      	ldr	r3, [pc, #132]	; (80075cc <xTaskResumeAll+0x12c>)
 8007546:	2201      	movs	r2, #1
 8007548:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800754a:	4b1c      	ldr	r3, [pc, #112]	; (80075bc <xTaskResumeAll+0x11c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1cb      	bne.n	80074ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007558:	f000 fb46 	bl	8007be8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800755c:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <xTaskResumeAll+0x130>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d010      	beq.n	800758a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007568:	f000 f846 	bl	80075f8 <xTaskIncrementTick>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007572:	4b16      	ldr	r3, [pc, #88]	; (80075cc <xTaskResumeAll+0x12c>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3b01      	subs	r3, #1
 800757c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f1      	bne.n	8007568 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007584:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <xTaskResumeAll+0x130>)
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <xTaskResumeAll+0x12c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007592:	2301      	movs	r3, #1
 8007594:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007596:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <xTaskResumeAll+0x134>)
 8007598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075a6:	f001 f9b7 	bl	8008918 <vPortExitCritical>

	return xAlreadyYielded;
 80075aa:	68bb      	ldr	r3, [r7, #8]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	200012f4 	.word	0x200012f4
 80075b8:	200012cc 	.word	0x200012cc
 80075bc:	2000128c 	.word	0x2000128c
 80075c0:	200012d4 	.word	0x200012d4
 80075c4:	20000dfc 	.word	0x20000dfc
 80075c8:	20000df8 	.word	0x20000df8
 80075cc:	200012e0 	.word	0x200012e0
 80075d0:	200012dc 	.word	0x200012dc
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075de:	4b05      	ldr	r3, [pc, #20]	; (80075f4 <xTaskGetTickCount+0x1c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075e4:	687b      	ldr	r3, [r7, #4]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	200012d0 	.word	0x200012d0

080075f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007602:	4b4e      	ldr	r3, [pc, #312]	; (800773c <xTaskIncrementTick+0x144>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f040 8088 	bne.w	800771c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800760c:	4b4c      	ldr	r3, [pc, #304]	; (8007740 <xTaskIncrementTick+0x148>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007614:	4a4a      	ldr	r2, [pc, #296]	; (8007740 <xTaskIncrementTick+0x148>)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11f      	bne.n	8007660 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007620:	4b48      	ldr	r3, [pc, #288]	; (8007744 <xTaskIncrementTick+0x14c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <xTaskIncrementTick+0x46>
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	e7fe      	b.n	800763c <xTaskIncrementTick+0x44>
 800763e:	4b41      	ldr	r3, [pc, #260]	; (8007744 <xTaskIncrementTick+0x14c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	4b40      	ldr	r3, [pc, #256]	; (8007748 <xTaskIncrementTick+0x150>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a3e      	ldr	r2, [pc, #248]	; (8007744 <xTaskIncrementTick+0x14c>)
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	4a3e      	ldr	r2, [pc, #248]	; (8007748 <xTaskIncrementTick+0x150>)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	4b3e      	ldr	r3, [pc, #248]	; (800774c <xTaskIncrementTick+0x154>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	4a3c      	ldr	r2, [pc, #240]	; (800774c <xTaskIncrementTick+0x154>)
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	f000 fac4 	bl	8007be8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007660:	4b3b      	ldr	r3, [pc, #236]	; (8007750 <xTaskIncrementTick+0x158>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	429a      	cmp	r2, r3
 8007668:	d349      	bcc.n	80076fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800766a:	4b36      	ldr	r3, [pc, #216]	; (8007744 <xTaskIncrementTick+0x14c>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007674:	4b36      	ldr	r3, [pc, #216]	; (8007750 <xTaskIncrementTick+0x158>)
 8007676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800767a:	601a      	str	r2, [r3, #0]
					break;
 800767c:	e03f      	b.n	80076fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767e:	4b31      	ldr	r3, [pc, #196]	; (8007744 <xTaskIncrementTick+0x14c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d203      	bcs.n	800769e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007696:	4a2e      	ldr	r2, [pc, #184]	; (8007750 <xTaskIncrementTick+0x158>)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800769c:	e02f      	b.n	80076fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe fca0 	bl	8005fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	3318      	adds	r3, #24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe fc97 	bl	8005fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	4b25      	ldr	r3, [pc, #148]	; (8007754 <xTaskIncrementTick+0x15c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d903      	bls.n	80076ce <xTaskIncrementTick+0xd6>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	4a22      	ldr	r2, [pc, #136]	; (8007754 <xTaskIncrementTick+0x15c>)
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4a1f      	ldr	r2, [pc, #124]	; (8007758 <xTaskIncrementTick+0x160>)
 80076dc:	441a      	add	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f7fe fc22 	bl	8005f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	4b1b      	ldr	r3, [pc, #108]	; (800775c <xTaskIncrementTick+0x164>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d3b8      	bcc.n	800766a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80076f8:	2301      	movs	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076fc:	e7b5      	b.n	800766a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076fe:	4b17      	ldr	r3, [pc, #92]	; (800775c <xTaskIncrementTick+0x164>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	4914      	ldr	r1, [pc, #80]	; (8007758 <xTaskIncrementTick+0x160>)
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d907      	bls.n	8007726 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	e004      	b.n	8007726 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800771c:	4b10      	ldr	r3, [pc, #64]	; (8007760 <xTaskIncrementTick+0x168>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a0f      	ldr	r2, [pc, #60]	; (8007760 <xTaskIncrementTick+0x168>)
 8007724:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <xTaskIncrementTick+0x16c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800772e:	2301      	movs	r3, #1
 8007730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007732:	697b      	ldr	r3, [r7, #20]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	200012f4 	.word	0x200012f4
 8007740:	200012d0 	.word	0x200012d0
 8007744:	20001284 	.word	0x20001284
 8007748:	20001288 	.word	0x20001288
 800774c:	200012e4 	.word	0x200012e4
 8007750:	200012ec 	.word	0x200012ec
 8007754:	200012d4 	.word	0x200012d4
 8007758:	20000dfc 	.word	0x20000dfc
 800775c:	20000df8 	.word	0x20000df8
 8007760:	200012dc 	.word	0x200012dc
 8007764:	200012e0 	.word	0x200012e0

08007768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800776e:	4b27      	ldr	r3, [pc, #156]	; (800780c <vTaskSwitchContext+0xa4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007776:	4b26      	ldr	r3, [pc, #152]	; (8007810 <vTaskSwitchContext+0xa8>)
 8007778:	2201      	movs	r2, #1
 800777a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800777c:	e040      	b.n	8007800 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800777e:	4b24      	ldr	r3, [pc, #144]	; (8007810 <vTaskSwitchContext+0xa8>)
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007784:	4b23      	ldr	r3, [pc, #140]	; (8007814 <vTaskSwitchContext+0xac>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e00f      	b.n	80077ac <vTaskSwitchContext+0x44>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <vTaskSwitchContext+0x3e>
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	607b      	str	r3, [r7, #4]
 80077a4:	e7fe      	b.n	80077a4 <vTaskSwitchContext+0x3c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	491a      	ldr	r1, [pc, #104]	; (8007818 <vTaskSwitchContext+0xb0>)
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0e5      	beq.n	800778c <vTaskSwitchContext+0x24>
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4a13      	ldr	r2, [pc, #76]	; (8007818 <vTaskSwitchContext+0xb0>)
 80077cc:	4413      	add	r3, r2
 80077ce:	60bb      	str	r3, [r7, #8]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	605a      	str	r2, [r3, #4]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	3308      	adds	r3, #8
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d104      	bne.n	80077f0 <vTaskSwitchContext+0x88>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	605a      	str	r2, [r3, #4]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	4a09      	ldr	r2, [pc, #36]	; (800781c <vTaskSwitchContext+0xb4>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	4a06      	ldr	r2, [pc, #24]	; (8007814 <vTaskSwitchContext+0xac>)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	200012f4 	.word	0x200012f4
 8007810:	200012e0 	.word	0x200012e0
 8007814:	200012d4 	.word	0x200012d4
 8007818:	20000dfc 	.word	0x20000dfc
 800781c:	20000df8 	.word	0x20000df8

08007820 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d109      	bne.n	8007844 <vTaskPlaceOnEventList+0x24>
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	e7fe      	b.n	8007842 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007844:	4b07      	ldr	r3, [pc, #28]	; (8007864 <vTaskPlaceOnEventList+0x44>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3318      	adds	r3, #24
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7fe fb92 	bl	8005f76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007852:	2101      	movs	r1, #1
 8007854:	6838      	ldr	r0, [r7, #0]
 8007856:	f000 fb6d 	bl	8007f34 <prvAddCurrentTaskToDelayedList>
}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000df8 	.word	0x20000df8

08007868 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <vTaskPlaceOnEventListRestricted+0x26>
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e7fe      	b.n	800788c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800788e:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <vTaskPlaceOnEventListRestricted+0x50>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3318      	adds	r3, #24
 8007894:	4619      	mov	r1, r3
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7fe fb49 	bl	8005f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	68b8      	ldr	r0, [r7, #8]
 80078ac:	f000 fb42 	bl	8007f34 <prvAddCurrentTaskToDelayedList>
	}
 80078b0:	bf00      	nop
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20000df8 	.word	0x20000df8

080078bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <xTaskRemoveFromEventList+0x2a>
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e7fe      	b.n	80078e4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3318      	adds	r3, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fb7c 	bl	8005fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f0:	4b1d      	ldr	r3, [pc, #116]	; (8007968 <xTaskRemoveFromEventList+0xac>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11d      	bne.n	8007934 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fb73 	bl	8005fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	4b19      	ldr	r3, [pc, #100]	; (800796c <xTaskRemoveFromEventList+0xb0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d903      	bls.n	8007916 <xTaskRemoveFromEventList+0x5a>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	4a16      	ldr	r2, [pc, #88]	; (800796c <xTaskRemoveFromEventList+0xb0>)
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4a13      	ldr	r2, [pc, #76]	; (8007970 <xTaskRemoveFromEventList+0xb4>)
 8007924:	441a      	add	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	3304      	adds	r3, #4
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f7fe fafe 	bl	8005f2e <vListInsertEnd>
 8007932:	e005      	b.n	8007940 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	3318      	adds	r3, #24
 8007938:	4619      	mov	r1, r3
 800793a:	480e      	ldr	r0, [pc, #56]	; (8007974 <xTaskRemoveFromEventList+0xb8>)
 800793c:	f7fe faf7 	bl	8005f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <xTaskRemoveFromEventList+0xbc>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	429a      	cmp	r2, r3
 800794c:	d905      	bls.n	800795a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800794e:	2301      	movs	r3, #1
 8007950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007952:	4b0a      	ldr	r3, [pc, #40]	; (800797c <xTaskRemoveFromEventList+0xc0>)
 8007954:	2201      	movs	r2, #1
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e001      	b.n	800795e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800795e:	697b      	ldr	r3, [r7, #20]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	200012f4 	.word	0x200012f4
 800796c:	200012d4 	.word	0x200012d4
 8007970:	20000dfc 	.word	0x20000dfc
 8007974:	2000128c 	.word	0x2000128c
 8007978:	20000df8 	.word	0x20000df8
 800797c:	200012e0 	.word	0x200012e0

08007980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007988:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <vTaskInternalSetTimeOutState+0x24>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007990:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <vTaskInternalSetTimeOutState+0x28>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	605a      	str	r2, [r3, #4]
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	200012e4 	.word	0x200012e4
 80079a8:	200012d0 	.word	0x200012d0

080079ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <xTaskCheckForTimeOut+0x24>
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	e7fe      	b.n	80079ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <xTaskCheckForTimeOut+0x3e>
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	e7fe      	b.n	80079e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80079ea:	f000 ff67 	bl	80088bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079ee:	4b1d      	ldr	r3, [pc, #116]	; (8007a64 <xTaskCheckForTimeOut+0xb8>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a06:	d102      	bne.n	8007a0e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	e023      	b.n	8007a56 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4b15      	ldr	r3, [pc, #84]	; (8007a68 <xTaskCheckForTimeOut+0xbc>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d007      	beq.n	8007a2a <xTaskCheckForTimeOut+0x7e>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d302      	bcc.n	8007a2a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	e015      	b.n	8007a56 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d20b      	bcs.n	8007a4c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	1ad2      	subs	r2, r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff ff9d 	bl	8007980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61fb      	str	r3, [r7, #28]
 8007a4a:	e004      	b.n	8007a56 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a52:	2301      	movs	r3, #1
 8007a54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a56:	f000 ff5f 	bl	8008918 <vPortExitCritical>

	return xReturn;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	200012d0 	.word	0x200012d0
 8007a68:	200012e4 	.word	0x200012e4

08007a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a70:	4b03      	ldr	r3, [pc, #12]	; (8007a80 <vTaskMissedYield+0x14>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
}
 8007a76:	bf00      	nop
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	200012e0 	.word	0x200012e0

08007a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a8c:	f000 f852 	bl	8007b34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a90:	4b06      	ldr	r3, [pc, #24]	; (8007aac <prvIdleTask+0x28>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d9f9      	bls.n	8007a8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <prvIdleTask+0x2c>)
 8007a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007aa8:	e7f0      	b.n	8007a8c <prvIdleTask+0x8>
 8007aaa:	bf00      	nop
 8007aac:	20000dfc 	.word	0x20000dfc
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aba:	2300      	movs	r3, #0
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	e00c      	b.n	8007ada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4a12      	ldr	r2, [pc, #72]	; (8007b14 <prvInitialiseTaskLists+0x60>)
 8007acc:	4413      	add	r3, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fa00 	bl	8005ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	607b      	str	r3, [r7, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b37      	cmp	r3, #55	; 0x37
 8007ade:	d9ef      	bls.n	8007ac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ae0:	480d      	ldr	r0, [pc, #52]	; (8007b18 <prvInitialiseTaskLists+0x64>)
 8007ae2:	f7fe f9f7 	bl	8005ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ae6:	480d      	ldr	r0, [pc, #52]	; (8007b1c <prvInitialiseTaskLists+0x68>)
 8007ae8:	f7fe f9f4 	bl	8005ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007aec:	480c      	ldr	r0, [pc, #48]	; (8007b20 <prvInitialiseTaskLists+0x6c>)
 8007aee:	f7fe f9f1 	bl	8005ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007af2:	480c      	ldr	r0, [pc, #48]	; (8007b24 <prvInitialiseTaskLists+0x70>)
 8007af4:	f7fe f9ee 	bl	8005ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007af8:	480b      	ldr	r0, [pc, #44]	; (8007b28 <prvInitialiseTaskLists+0x74>)
 8007afa:	f7fe f9eb 	bl	8005ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <prvInitialiseTaskLists+0x78>)
 8007b00:	4a05      	ldr	r2, [pc, #20]	; (8007b18 <prvInitialiseTaskLists+0x64>)
 8007b02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <prvInitialiseTaskLists+0x7c>)
 8007b06:	4a05      	ldr	r2, [pc, #20]	; (8007b1c <prvInitialiseTaskLists+0x68>)
 8007b08:	601a      	str	r2, [r3, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000dfc 	.word	0x20000dfc
 8007b18:	2000125c 	.word	0x2000125c
 8007b1c:	20001270 	.word	0x20001270
 8007b20:	2000128c 	.word	0x2000128c
 8007b24:	200012a0 	.word	0x200012a0
 8007b28:	200012b8 	.word	0x200012b8
 8007b2c:	20001284 	.word	0x20001284
 8007b30:	20001288 	.word	0x20001288

08007b34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b3a:	e019      	b.n	8007b70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b3c:	f000 febe 	bl	80088bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <prvCheckTasksWaitingTermination+0x4c>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fa4b 	bl	8005fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b52:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <prvCheckTasksWaitingTermination+0x50>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <prvCheckTasksWaitingTermination+0x50>)
 8007b5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <prvCheckTasksWaitingTermination+0x54>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	4a09      	ldr	r2, [pc, #36]	; (8007b88 <prvCheckTasksWaitingTermination+0x54>)
 8007b64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b66:	f000 fed7 	bl	8008918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f80e 	bl	8007b8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <prvCheckTasksWaitingTermination+0x54>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e1      	bne.n	8007b3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	200012a0 	.word	0x200012a0
 8007b84:	200012cc 	.word	0x200012cc
 8007b88:	200012b4 	.word	0x200012b4

08007b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d108      	bne.n	8007bb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 f866 	bl	8008c74 <vPortFree>
				vPortFree( pxTCB );
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f863 	bl	8008c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bae:	e017      	b.n	8007be0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d103      	bne.n	8007bc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f001 f85a 	bl	8008c74 <vPortFree>
	}
 8007bc0:	e00e      	b.n	8007be0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d009      	beq.n	8007be0 <prvDeleteTCB+0x54>
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e7fe      	b.n	8007bde <prvDeleteTCB+0x52>
	}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <prvResetNextTaskUnblockTime+0x38>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <prvResetNextTaskUnblockTime+0x3c>)
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c00:	e008      	b.n	8007c14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c02:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <prvResetNextTaskUnblockTime+0x38>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <prvResetNextTaskUnblockTime+0x3c>)
 8007c12:	6013      	str	r3, [r2, #0]
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20001284 	.word	0x20001284
 8007c24:	200012ec 	.word	0x200012ec

08007c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <xTaskGetSchedulerState+0x34>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d102      	bne.n	8007c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c36:	2301      	movs	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	e008      	b.n	8007c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c3c:	4b08      	ldr	r3, [pc, #32]	; (8007c60 <xTaskGetSchedulerState+0x38>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c44:	2302      	movs	r3, #2
 8007c46:	607b      	str	r3, [r7, #4]
 8007c48:	e001      	b.n	8007c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c4e:	687b      	ldr	r3, [r7, #4]
	}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	200012d8 	.word	0x200012d8
 8007c60:	200012f4 	.word	0x200012f4

08007c64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d051      	beq.n	8007d1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <xTaskPriorityInherit+0xc4>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d241      	bcs.n	8007d0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	db06      	blt.n	8007c9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c90:	4b25      	ldr	r3, [pc, #148]	; (8007d28 <xTaskPriorityInherit+0xc4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6959      	ldr	r1, [r3, #20]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4a1f      	ldr	r2, [pc, #124]	; (8007d2c <xTaskPriorityInherit+0xc8>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	4299      	cmp	r1, r3
 8007cb4:	d122      	bne.n	8007cfc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe f994 	bl	8005fe8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cc0:	4b19      	ldr	r3, [pc, #100]	; (8007d28 <xTaskPriorityInherit+0xc4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4b18      	ldr	r3, [pc, #96]	; (8007d30 <xTaskPriorityInherit+0xcc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d903      	bls.n	8007cde <xTaskPriorityInherit+0x7a>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cda:	4a15      	ldr	r2, [pc, #84]	; (8007d30 <xTaskPriorityInherit+0xcc>)
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4a10      	ldr	r2, [pc, #64]	; (8007d2c <xTaskPriorityInherit+0xc8>)
 8007cec:	441a      	add	r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f7fe f91a 	bl	8005f2e <vListInsertEnd>
 8007cfa:	e004      	b.n	8007d06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <xTaskPriorityInherit+0xc4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e008      	b.n	8007d1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d10:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <xTaskPriorityInherit+0xc4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d201      	bcs.n	8007d1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
	}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000df8 	.word	0x20000df8
 8007d2c:	20000dfc 	.word	0x20000dfc
 8007d30:	200012d4 	.word	0x200012d4

08007d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d054      	beq.n	8007df4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d4a:	4b2d      	ldr	r3, [pc, #180]	; (8007e00 <xTaskPriorityDisinherit+0xcc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d009      	beq.n	8007d68 <xTaskPriorityDisinherit+0x34>
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e7fe      	b.n	8007d66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <xTaskPriorityDisinherit+0x50>
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	e7fe      	b.n	8007d82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d02c      	beq.n	8007df4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d128      	bne.n	8007df4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe f91e 	bl	8005fe8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	4b0f      	ldr	r3, [pc, #60]	; (8007e04 <xTaskPriorityDisinherit+0xd0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d903      	bls.n	8007dd4 <xTaskPriorityDisinherit+0xa0>
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	4a0c      	ldr	r2, [pc, #48]	; (8007e04 <xTaskPriorityDisinherit+0xd0>)
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4a09      	ldr	r2, [pc, #36]	; (8007e08 <xTaskPriorityDisinherit+0xd4>)
 8007de2:	441a      	add	r2, r3
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f7fe f89f 	bl	8005f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007df0:	2301      	movs	r3, #1
 8007df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007df4:	697b      	ldr	r3, [r7, #20]
	}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000df8 	.word	0x20000df8
 8007e04:	200012d4 	.word	0x200012d4
 8007e08:	20000dfc 	.word	0x20000dfc

08007e0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d068      	beq.n	8007ef6 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d109      	bne.n	8007e40 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	e7fe      	b.n	8007e3e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d902      	bls.n	8007e50 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	e002      	b.n	8007e56 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e54:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d04a      	beq.n	8007ef6 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d145      	bne.n	8007ef6 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e6a:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d109      	bne.n	8007e88 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	60bb      	str	r3, [r7, #8]
 8007e86:	e7fe      	b.n	8007e86 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	db04      	blt.n	8007ea6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	6959      	ldr	r1, [r3, #20]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4a13      	ldr	r2, [pc, #76]	; (8007f04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007eb6:	4413      	add	r3, r2
 8007eb8:	4299      	cmp	r1, r3
 8007eba:	d11c      	bne.n	8007ef6 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe f891 	bl	8005fe8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	4b0f      	ldr	r3, [pc, #60]	; (8007f08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d903      	bls.n	8007eda <vTaskPriorityDisinheritAfterTimeout+0xce>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	4a0c      	ldr	r2, [pc, #48]	; (8007f08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4a07      	ldr	r2, [pc, #28]	; (8007f04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007ee8:	441a      	add	r2, r3
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7fe f81c 	bl	8005f2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ef6:	bf00      	nop
 8007ef8:	3720      	adds	r7, #32
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	20000df8 	.word	0x20000df8
 8007f04:	20000dfc 	.word	0x20000dfc
 8007f08:	200012d4 	.word	0x200012d4

08007f0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d004      	beq.n	8007f22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f18:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f1e:	3201      	adds	r2, #1
 8007f20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007f22:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f24:	681b      	ldr	r3, [r3, #0]
	}
 8007f26:	4618      	mov	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	20000df8 	.word	0x20000df8

08007f34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f3e:	4b21      	ldr	r3, [pc, #132]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f44:	4b20      	ldr	r3, [pc, #128]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe f84c 	bl	8005fe8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f56:	d10a      	bne.n	8007f6e <prvAddCurrentTaskToDelayedList+0x3a>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f5e:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4619      	mov	r1, r3
 8007f66:	4819      	ldr	r0, [pc, #100]	; (8007fcc <prvAddCurrentTaskToDelayedList+0x98>)
 8007f68:	f7fd ffe1 	bl	8005f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f6c:	e026      	b.n	8007fbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68ba      	ldr	r2, [r7, #8]
 8007f7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d209      	bcs.n	8007f9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f7fd ffef 	bl	8005f76 <vListInsert>
}
 8007f98:	e010      	b.n	8007fbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f9a:	4b0e      	ldr	r3, [pc, #56]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fd ffe5 	bl	8005f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fac:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d202      	bcs.n	8007fbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fb6:	4a08      	ldr	r2, [pc, #32]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	6013      	str	r3, [r2, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	200012d0 	.word	0x200012d0
 8007fc8:	20000df8 	.word	0x20000df8
 8007fcc:	200012b8 	.word	0x200012b8
 8007fd0:	20001288 	.word	0x20001288
 8007fd4:	20001284 	.word	0x20001284
 8007fd8:	200012ec 	.word	0x200012ec

08007fdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fe6:	f000 faff 	bl	80085e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fea:	4b1c      	ldr	r3, [pc, #112]	; (800805c <xTimerCreateTimerTask+0x80>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d021      	beq.n	8008036 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ffa:	1d3a      	adds	r2, r7, #4
 8007ffc:	f107 0108 	add.w	r1, r7, #8
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	4618      	mov	r0, r3
 8008006:	f7fd ff4b 	bl	8005ea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	9202      	str	r2, [sp, #8]
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	2302      	movs	r3, #2
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	460a      	mov	r2, r1
 800801c:	4910      	ldr	r1, [pc, #64]	; (8008060 <xTimerCreateTimerTask+0x84>)
 800801e:	4811      	ldr	r0, [pc, #68]	; (8008064 <xTimerCreateTimerTask+0x88>)
 8008020:	f7fe fffa 	bl	8007018 <xTaskCreateStatic>
 8008024:	4602      	mov	r2, r0
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <xTimerCreateTimerTask+0x8c>)
 8008028:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <xTimerCreateTimerTask+0x8c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008032:	2301      	movs	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d109      	bne.n	8008050 <xTimerCreateTimerTask+0x74>
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	613b      	str	r3, [r7, #16]
 800804e:	e7fe      	b.n	800804e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008050:	697b      	ldr	r3, [r7, #20]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20001328 	.word	0x20001328
 8008060:	08009800 	.word	0x08009800
 8008064:	0800819d 	.word	0x0800819d
 8008068:	2000132c 	.word	0x2000132c

0800806c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800807a:	2300      	movs	r3, #0
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <xTimerGenericCommand+0x2c>
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	623b      	str	r3, [r7, #32]
 8008096:	e7fe      	b.n	8008096 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008098:	4b19      	ldr	r3, [pc, #100]	; (8008100 <xTimerGenericCommand+0x94>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d02a      	beq.n	80080f6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b05      	cmp	r3, #5
 80080b0:	dc18      	bgt.n	80080e4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080b2:	f7ff fdb9 	bl	8007c28 <xTaskGetSchedulerState>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d109      	bne.n	80080d0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080bc:	4b10      	ldr	r3, [pc, #64]	; (8008100 <xTimerGenericCommand+0x94>)
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	f107 0110 	add.w	r1, r7, #16
 80080c4:	2300      	movs	r3, #0
 80080c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080c8:	f7fe f95c 	bl	8006384 <xQueueGenericSend>
 80080cc:	6278      	str	r0, [r7, #36]	; 0x24
 80080ce:	e012      	b.n	80080f6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <xTimerGenericCommand+0x94>)
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	f107 0110 	add.w	r1, r7, #16
 80080d8:	2300      	movs	r3, #0
 80080da:	2200      	movs	r2, #0
 80080dc:	f7fe f952 	bl	8006384 <xQueueGenericSend>
 80080e0:	6278      	str	r0, [r7, #36]	; 0x24
 80080e2:	e008      	b.n	80080f6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <xTimerGenericCommand+0x94>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	f107 0110 	add.w	r1, r7, #16
 80080ec:	2300      	movs	r3, #0
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	f7fe fa42 	bl	8006578 <xQueueGenericSendFromISR>
 80080f4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3728      	adds	r7, #40	; 0x28
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	20001328 	.word	0x20001328

08008104 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af02      	add	r7, sp, #8
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810e:	4b22      	ldr	r3, [pc, #136]	; (8008198 <prvProcessExpiredTimer+0x94>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3304      	adds	r3, #4
 800811c:	4618      	mov	r0, r3
 800811e:	f7fd ff63 	bl	8005fe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d021      	beq.n	8008174 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	699a      	ldr	r2, [r3, #24]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	18d1      	adds	r1, r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	6978      	ldr	r0, [r7, #20]
 800813e:	f000 f8d1 	bl	80082e4 <prvInsertTimerInActiveList>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d01e      	beq.n	8008186 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008148:	2300      	movs	r3, #0
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	2100      	movs	r1, #0
 8008152:	6978      	ldr	r0, [r7, #20]
 8008154:	f7ff ff8a 	bl	800806c <xTimerGenericCommand>
 8008158:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d112      	bne.n	8008186 <prvProcessExpiredTimer+0x82>
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e7fe      	b.n	8008172 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	b2da      	uxtb	r2, r3
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	6978      	ldr	r0, [r7, #20]
 800818c:	4798      	blx	r3
}
 800818e:	bf00      	nop
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20001320 	.word	0x20001320

0800819c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a4:	f107 0308 	add.w	r3, r7, #8
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 f857 	bl	800825c <prvGetNextExpireTime>
 80081ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4619      	mov	r1, r3
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f803 	bl	80081c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081ba:	f000 f8d5 	bl	8008368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081be:	e7f1      	b.n	80081a4 <prvTimerTask+0x8>

080081c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081ca:	f7ff f95b 	bl	8007484 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f866 	bl	80082a4 <prvSampleTimeNow>
 80081d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d130      	bne.n	8008242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <prvProcessTimerOrBlockTask+0x3c>
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d806      	bhi.n	80081fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081ee:	f7ff f957 	bl	80074a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff ff85 	bl	8008104 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081fa:	e024      	b.n	8008246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d008      	beq.n	8008214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008202:	4b13      	ldr	r3, [pc, #76]	; (8008250 <prvProcessTimerOrBlockTask+0x90>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <prvProcessTimerOrBlockTask+0x50>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <prvProcessTimerOrBlockTask+0x52>
 8008210:	2300      	movs	r3, #0
 8008212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008214:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <prvProcessTimerOrBlockTask+0x94>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4619      	mov	r1, r3
 8008222:	f7fe fec5 	bl	8006fb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008226:	f7ff f93b 	bl	80074a0 <xTaskResumeAll>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d10a      	bne.n	8008246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <prvProcessTimerOrBlockTask+0x98>)
 8008232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
}
 8008240:	e001      	b.n	8008246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008242:	f7ff f92d 	bl	80074a0 <xTaskResumeAll>
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20001324 	.word	0x20001324
 8008254:	20001328 	.word	0x20001328
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <prvGetNextExpireTime+0x44>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <prvGetNextExpireTime+0x16>
 800826e:	2201      	movs	r2, #1
 8008270:	e000      	b.n	8008274 <prvGetNextExpireTime+0x18>
 8008272:	2200      	movs	r2, #0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d105      	bne.n	800828c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <prvGetNextExpireTime+0x44>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	e001      	b.n	8008290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800828c:	2300      	movs	r3, #0
 800828e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008290:	68fb      	ldr	r3, [r7, #12]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20001320 	.word	0x20001320

080082a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082ac:	f7ff f994 	bl	80075d8 <xTaskGetTickCount>
 80082b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <prvSampleTimeNow+0x3c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d205      	bcs.n	80082c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082bc:	f000 f930 	bl	8008520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e002      	b.n	80082ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082ce:	4a04      	ldr	r2, [pc, #16]	; (80082e0 <prvSampleTimeNow+0x3c>)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082d4:	68fb      	ldr	r3, [r7, #12]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20001330 	.word	0x20001330

080082e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d812      	bhi.n	8008330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e01b      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800831e:	4b10      	ldr	r3, [pc, #64]	; (8008360 <prvInsertTimerInActiveList+0x7c>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fd fe24 	bl	8005f76 <vListInsert>
 800832e:	e012      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d206      	bcs.n	8008346 <prvInsertTimerInActiveList+0x62>
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e007      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <prvInsertTimerInActiveList+0x80>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fd fe10 	bl	8005f76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008356:	697b      	ldr	r3, [r7, #20]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20001324 	.word	0x20001324
 8008364:	20001320 	.word	0x20001320

08008368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08e      	sub	sp, #56	; 0x38
 800836c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800836e:	e0c6      	b.n	80084fe <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	da17      	bge.n	80083a6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008376:	1d3b      	adds	r3, r7, #4
 8008378:	3304      	adds	r3, #4
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <prvProcessReceivedCommands+0x2e>
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	e7fe      	b.n	8008394 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839c:	6850      	ldr	r0, [r2, #4]
 800839e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083a0:	6892      	ldr	r2, [r2, #8]
 80083a2:	4611      	mov	r1, r2
 80083a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f2c0 80a7 	blt.w	80084fc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	3304      	adds	r3, #4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fd fe12 	bl	8005fe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083c4:	463b      	mov	r3, r7
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff ff6c 	bl	80082a4 <prvSampleTimeNow>
 80083cc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	f200 8094 	bhi.w	80084fe <prvProcessReceivedCommands+0x196>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <prvProcessReceivedCommands+0x74>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	08008405 	.word	0x08008405
 80083e0:	08008405 	.word	0x08008405
 80083e4:	08008405 	.word	0x08008405
 80083e8:	08008477 	.word	0x08008477
 80083ec:	0800848b 	.word	0x0800848b
 80083f0:	080084d3 	.word	0x080084d3
 80083f4:	08008405 	.word	0x08008405
 80083f8:	08008405 	.word	0x08008405
 80083fc:	08008477 	.word	0x08008477
 8008400:	0800848b 	.word	0x0800848b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800840a:	f043 0301 	orr.w	r3, r3, #1
 800840e:	b2da      	uxtb	r2, r3
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	18d1      	adds	r1, r2, r3
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008424:	f7ff ff5e 	bl	80082e4 <prvInsertTimerInActiveList>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d067      	beq.n	80084fe <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008434:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d05c      	beq.n	80084fe <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	441a      	add	r2, r3
 800844c:	2300      	movs	r3, #0
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	2300      	movs	r3, #0
 8008452:	2100      	movs	r1, #0
 8008454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008456:	f7ff fe09 	bl	800806c <xTimerGenericCommand>
 800845a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d14d      	bne.n	80084fe <prvProcessReceivedCommands+0x196>
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	61bb      	str	r3, [r7, #24]
 8008474:	e7fe      	b.n	8008474 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800847c:	f023 0301 	bic.w	r3, r3, #1
 8008480:	b2da      	uxtb	r2, r3
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008488:	e039      	b.n	80084fe <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	b2da      	uxtb	r2, r3
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <prvProcessReceivedCommands+0x156>
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e7fe      	b.n	80084bc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	18d1      	adds	r1, r2, r3
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084cc:	f7ff ff0a 	bl	80082e4 <prvInsertTimerInActiveList>
					break;
 80084d0:	e015      	b.n	80084fe <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	f000 fbc7 	bl	8008c74 <vPortFree>
 80084e6:	e00a      	b.n	80084fe <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084fa:	e000      	b.n	80084fe <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084fe:	4b07      	ldr	r3, [pc, #28]	; (800851c <prvProcessReceivedCommands+0x1b4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	1d39      	adds	r1, r7, #4
 8008504:	2200      	movs	r2, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe f954 	bl	80067b4 <xQueueReceive>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	f47f af2e 	bne.w	8008370 <prvProcessReceivedCommands+0x8>
	}
}
 8008514:	bf00      	nop
 8008516:	3730      	adds	r7, #48	; 0x30
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20001328 	.word	0x20001328

08008520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008526:	e047      	b.n	80085b8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008528:	4b2d      	ldr	r3, [pc, #180]	; (80085e0 <prvSwitchTimerLists+0xc0>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008532:	4b2b      	ldr	r3, [pc, #172]	; (80085e0 <prvSwitchTimerLists+0xc0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3304      	adds	r3, #4
 8008540:	4618      	mov	r0, r3
 8008542:	f7fd fd51 	bl	8005fe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d02d      	beq.n	80085b8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	d90e      	bls.n	800858c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800857a:	4b19      	ldr	r3, [pc, #100]	; (80085e0 <prvSwitchTimerLists+0xc0>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3304      	adds	r3, #4
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f7fd fcf6 	bl	8005f76 <vListInsert>
 800858a:	e015      	b.n	80085b8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	2100      	movs	r1, #0
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fd68 	bl	800806c <xTimerGenericCommand>
 800859c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <prvSwitchTimerLists+0x98>
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	603b      	str	r3, [r7, #0]
 80085b6:	e7fe      	b.n	80085b6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085b8:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <prvSwitchTimerLists+0xc0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1b2      	bne.n	8008528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085c2:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <prvSwitchTimerLists+0xc0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <prvSwitchTimerLists+0xc4>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a04      	ldr	r2, [pc, #16]	; (80085e0 <prvSwitchTimerLists+0xc0>)
 80085ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085d0:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <prvSwitchTimerLists+0xc4>)
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	6013      	str	r3, [r2, #0]
}
 80085d6:	bf00      	nop
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20001320 	.word	0x20001320
 80085e4:	20001324 	.word	0x20001324

080085e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085ee:	f000 f965 	bl	80088bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085f2:	4b15      	ldr	r3, [pc, #84]	; (8008648 <prvCheckForValidListAndQueue+0x60>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d120      	bne.n	800863c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085fa:	4814      	ldr	r0, [pc, #80]	; (800864c <prvCheckForValidListAndQueue+0x64>)
 80085fc:	f7fd fc6a 	bl	8005ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008600:	4813      	ldr	r0, [pc, #76]	; (8008650 <prvCheckForValidListAndQueue+0x68>)
 8008602:	f7fd fc67 	bl	8005ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008606:	4b13      	ldr	r3, [pc, #76]	; (8008654 <prvCheckForValidListAndQueue+0x6c>)
 8008608:	4a10      	ldr	r2, [pc, #64]	; (800864c <prvCheckForValidListAndQueue+0x64>)
 800860a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800860c:	4b12      	ldr	r3, [pc, #72]	; (8008658 <prvCheckForValidListAndQueue+0x70>)
 800860e:	4a10      	ldr	r2, [pc, #64]	; (8008650 <prvCheckForValidListAndQueue+0x68>)
 8008610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008612:	2300      	movs	r3, #0
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <prvCheckForValidListAndQueue+0x74>)
 8008618:	4a11      	ldr	r2, [pc, #68]	; (8008660 <prvCheckForValidListAndQueue+0x78>)
 800861a:	2110      	movs	r1, #16
 800861c:	200a      	movs	r0, #10
 800861e:	f7fd fd75 	bl	800610c <xQueueGenericCreateStatic>
 8008622:	4602      	mov	r2, r0
 8008624:	4b08      	ldr	r3, [pc, #32]	; (8008648 <prvCheckForValidListAndQueue+0x60>)
 8008626:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008628:	4b07      	ldr	r3, [pc, #28]	; (8008648 <prvCheckForValidListAndQueue+0x60>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d005      	beq.n	800863c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008630:	4b05      	ldr	r3, [pc, #20]	; (8008648 <prvCheckForValidListAndQueue+0x60>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	490b      	ldr	r1, [pc, #44]	; (8008664 <prvCheckForValidListAndQueue+0x7c>)
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe fc68 	bl	8006f0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800863c:	f000 f96c 	bl	8008918 <vPortExitCritical>
}
 8008640:	bf00      	nop
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20001328 	.word	0x20001328
 800864c:	200012f8 	.word	0x200012f8
 8008650:	2000130c 	.word	0x2000130c
 8008654:	20001320 	.word	0x20001320
 8008658:	20001324 	.word	0x20001324
 800865c:	200013d4 	.word	0x200013d4
 8008660:	20001334 	.word	0x20001334
 8008664:	08009808 	.word	0x08009808

08008668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3b04      	subs	r3, #4
 8008678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3b04      	subs	r3, #4
 8008686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f023 0201 	bic.w	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3b04      	subs	r3, #4
 8008696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008698:	4a0c      	ldr	r2, [pc, #48]	; (80086cc <pxPortInitialiseStack+0x64>)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3b14      	subs	r3, #20
 80086a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3b04      	subs	r3, #4
 80086ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f06f 0202 	mvn.w	r2, #2
 80086b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3b20      	subs	r3, #32
 80086bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086be:	68fb      	ldr	r3, [r7, #12]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	080086d1 	.word	0x080086d1

080086d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086da:	4b11      	ldr	r3, [pc, #68]	; (8008720 <prvTaskExitError+0x50>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086e2:	d009      	beq.n	80086f8 <prvTaskExitError+0x28>
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e7fe      	b.n	80086f6 <prvTaskExitError+0x26>
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800870a:	bf00      	nop
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0fc      	beq.n	800870c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000040 	.word	0x20000040
	...

08008730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <pxCurrentTCBConst2>)
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	6808      	ldr	r0, [r1, #0]
 8008736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	f380 8809 	msr	PSP, r0
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f380 8811 	msr	BASEPRI, r0
 800874a:	4770      	bx	lr
 800874c:	f3af 8000 	nop.w

08008750 <pxCurrentTCBConst2>:
 8008750:	20000df8 	.word	0x20000df8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop

08008758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008758:	4808      	ldr	r0, [pc, #32]	; (800877c <prvPortStartFirstTask+0x24>)
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	6800      	ldr	r0, [r0, #0]
 800875e:	f380 8808 	msr	MSP, r0
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8814 	msr	CONTROL, r0
 800876a:	b662      	cpsie	i
 800876c:	b661      	cpsie	f
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	df00      	svc	0
 8008778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800877a:	bf00      	nop
 800877c:	e000ed08 	.word	0xe000ed08

08008780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008786:	4b44      	ldr	r3, [pc, #272]	; (8008898 <xPortStartScheduler+0x118>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a44      	ldr	r2, [pc, #272]	; (800889c <xPortStartScheduler+0x11c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d109      	bne.n	80087a4 <xPortStartScheduler+0x24>
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	e7fe      	b.n	80087a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087a4:	4b3c      	ldr	r3, [pc, #240]	; (8008898 <xPortStartScheduler+0x118>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a3d      	ldr	r2, [pc, #244]	; (80088a0 <xPortStartScheduler+0x120>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d109      	bne.n	80087c2 <xPortStartScheduler+0x42>
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e7fe      	b.n	80087c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087c2:	4b38      	ldr	r3, [pc, #224]	; (80088a4 <xPortStartScheduler+0x124>)
 80087c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	22ff      	movs	r2, #255	; 0xff
 80087d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	4b30      	ldr	r3, [pc, #192]	; (80088a8 <xPortStartScheduler+0x128>)
 80087e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ea:	4b30      	ldr	r3, [pc, #192]	; (80088ac <xPortStartScheduler+0x12c>)
 80087ec:	2207      	movs	r2, #7
 80087ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087f0:	e009      	b.n	8008806 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80087f2:	4b2e      	ldr	r3, [pc, #184]	; (80088ac <xPortStartScheduler+0x12c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	4a2c      	ldr	r2, [pc, #176]	; (80088ac <xPortStartScheduler+0x12c>)
 80087fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	b2db      	uxtb	r3, r3
 8008804:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008806:	78fb      	ldrb	r3, [r7, #3]
 8008808:	b2db      	uxtb	r3, r3
 800880a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880e:	2b80      	cmp	r3, #128	; 0x80
 8008810:	d0ef      	beq.n	80087f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008812:	4b26      	ldr	r3, [pc, #152]	; (80088ac <xPortStartScheduler+0x12c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1c3 0307 	rsb	r3, r3, #7
 800881a:	2b04      	cmp	r3, #4
 800881c:	d009      	beq.n	8008832 <xPortStartScheduler+0xb2>
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60bb      	str	r3, [r7, #8]
 8008830:	e7fe      	b.n	8008830 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008832:	4b1e      	ldr	r3, [pc, #120]	; (80088ac <xPortStartScheduler+0x12c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	4a1c      	ldr	r2, [pc, #112]	; (80088ac <xPortStartScheduler+0x12c>)
 800883a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800883c:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <xPortStartScheduler+0x12c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008844:	4a19      	ldr	r2, [pc, #100]	; (80088ac <xPortStartScheduler+0x12c>)
 8008846:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	b2da      	uxtb	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008850:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <xPortStartScheduler+0x130>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a16      	ldr	r2, [pc, #88]	; (80088b0 <xPortStartScheduler+0x130>)
 8008856:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800885a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800885c:	4b14      	ldr	r3, [pc, #80]	; (80088b0 <xPortStartScheduler+0x130>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <xPortStartScheduler+0x130>)
 8008862:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008866:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008868:	f000 f8d6 	bl	8008a18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800886c:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <xPortStartScheduler+0x134>)
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008872:	f000 f8f5 	bl	8008a60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008876:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <xPortStartScheduler+0x138>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <xPortStartScheduler+0x138>)
 800887c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008880:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008882:	f7ff ff69 	bl	8008758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008886:	f7fe ff6f 	bl	8007768 <vTaskSwitchContext>
	prvTaskExitError();
 800888a:	f7ff ff21 	bl	80086d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed00 	.word	0xe000ed00
 800889c:	410fc271 	.word	0x410fc271
 80088a0:	410fc270 	.word	0x410fc270
 80088a4:	e000e400 	.word	0xe000e400
 80088a8:	20001424 	.word	0x20001424
 80088ac:	20001428 	.word	0x20001428
 80088b0:	e000ed20 	.word	0xe000ed20
 80088b4:	20000040 	.word	0x20000040
 80088b8:	e000ef34 	.word	0xe000ef34

080088bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088d4:	4b0e      	ldr	r3, [pc, #56]	; (8008910 <vPortEnterCritical+0x54>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3301      	adds	r3, #1
 80088da:	4a0d      	ldr	r2, [pc, #52]	; (8008910 <vPortEnterCritical+0x54>)
 80088dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <vPortEnterCritical+0x54>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d10e      	bne.n	8008904 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <vPortEnterCritical+0x58>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d009      	beq.n	8008904 <vPortEnterCritical+0x48>
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	603b      	str	r3, [r7, #0]
 8008902:	e7fe      	b.n	8008902 <vPortEnterCritical+0x46>
	}
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20000040 	.word	0x20000040
 8008914:	e000ed04 	.word	0xe000ed04

08008918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <vPortExitCritical+0x4c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <vPortExitCritical+0x22>
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	e7fe      	b.n	8008938 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800893a:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <vPortExitCritical+0x4c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3b01      	subs	r3, #1
 8008940:	4a08      	ldr	r2, [pc, #32]	; (8008964 <vPortExitCritical+0x4c>)
 8008942:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008944:	4b07      	ldr	r3, [pc, #28]	; (8008964 <vPortExitCritical+0x4c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d104      	bne.n	8008956 <vPortExitCritical+0x3e>
 800894c:	2300      	movs	r3, #0
 800894e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000040 	.word	0x20000040
	...

08008970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008970:	f3ef 8009 	mrs	r0, PSP
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <pxCurrentTCBConst>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	f01e 0f10 	tst.w	lr, #16
 8008980:	bf08      	it	eq
 8008982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898a:	6010      	str	r0, [r2, #0]
 800898c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008994:	f380 8811 	msr	BASEPRI, r0
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f7fe fee2 	bl	8007768 <vTaskSwitchContext>
 80089a4:	f04f 0000 	mov.w	r0, #0
 80089a8:	f380 8811 	msr	BASEPRI, r0
 80089ac:	bc09      	pop	{r0, r3}
 80089ae:	6819      	ldr	r1, [r3, #0]
 80089b0:	6808      	ldr	r0, [r1, #0]
 80089b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b6:	f01e 0f10 	tst.w	lr, #16
 80089ba:	bf08      	it	eq
 80089bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089c0:	f380 8809 	msr	PSP, r0
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	f3af 8000 	nop.w

080089d0 <pxCurrentTCBConst>:
 80089d0:	20000df8 	.word	0x20000df8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089d4:	bf00      	nop
 80089d6:	bf00      	nop

080089d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089f0:	f7fe fe02 	bl	80075f8 <xTaskIncrementTick>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <SysTick_Handler+0x3c>)
 80089fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	2300      	movs	r3, #0
 8008a04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	e000ed04 	.word	0xe000ed04

08008a18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <vPortSetupTimerInterrupt+0x34>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <vPortSetupTimerInterrupt+0x38>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <vPortSetupTimerInterrupt+0x3c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a0a      	ldr	r2, [pc, #40]	; (8008a58 <vPortSetupTimerInterrupt+0x40>)
 8008a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a32:	099b      	lsrs	r3, r3, #6
 8008a34:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <vPortSetupTimerInterrupt+0x44>)
 8008a36:	3b01      	subs	r3, #1
 8008a38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a3a:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <vPortSetupTimerInterrupt+0x34>)
 8008a3c:	2207      	movs	r2, #7
 8008a3e:	601a      	str	r2, [r3, #0]
}
 8008a40:	bf00      	nop
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	e000e010 	.word	0xe000e010
 8008a50:	e000e018 	.word	0xe000e018
 8008a54:	20000034 	.word	0x20000034
 8008a58:	10624dd3 	.word	0x10624dd3
 8008a5c:	e000e014 	.word	0xe000e014

08008a60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a70 <vPortEnableVFP+0x10>
 8008a64:	6801      	ldr	r1, [r0, #0]
 8008a66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a6a:	6001      	str	r1, [r0, #0]
 8008a6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a6e:	bf00      	nop
 8008a70:	e000ed88 	.word	0xe000ed88

08008a74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a7a:	f3ef 8305 	mrs	r3, IPSR
 8008a7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b0f      	cmp	r3, #15
 8008a84:	d913      	bls.n	8008aae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a86:	4a16      	ldr	r2, [pc, #88]	; (8008ae0 <vPortValidateInterruptPriority+0x6c>)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a90:	4b14      	ldr	r3, [pc, #80]	; (8008ae4 <vPortValidateInterruptPriority+0x70>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	7afa      	ldrb	r2, [r7, #11]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d209      	bcs.n	8008aae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	607b      	str	r3, [r7, #4]
 8008aac:	e7fe      	b.n	8008aac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aae:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <vPortValidateInterruptPriority+0x74>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <vPortValidateInterruptPriority+0x78>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d909      	bls.n	8008ad2 <vPortValidateInterruptPriority+0x5e>
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	e7fe      	b.n	8008ad0 <vPortValidateInterruptPriority+0x5c>
	}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	e000e3f0 	.word	0xe000e3f0
 8008ae4:	20001424 	.word	0x20001424
 8008ae8:	e000ed0c 	.word	0xe000ed0c
 8008aec:	20001428 	.word	0x20001428

08008af0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008af8:	2300      	movs	r3, #0
 8008afa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008afc:	f7fe fcc2 	bl	8007484 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b00:	4b57      	ldr	r3, [pc, #348]	; (8008c60 <pvPortMalloc+0x170>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b08:	f000 f90c 	bl	8008d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b0c:	4b55      	ldr	r3, [pc, #340]	; (8008c64 <pvPortMalloc+0x174>)
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4013      	ands	r3, r2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 808c 	bne.w	8008c32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01c      	beq.n	8008b5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008b20:	2208      	movs	r2, #8
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4413      	add	r3, r2
 8008b26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d013      	beq.n	8008b5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f023 0307 	bic.w	r3, r3, #7
 8008b38:	3308      	adds	r3, #8
 8008b3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d009      	beq.n	8008b5a <pvPortMalloc+0x6a>
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e7fe      	b.n	8008b58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d068      	beq.n	8008c32 <pvPortMalloc+0x142>
 8008b60:	4b41      	ldr	r3, [pc, #260]	; (8008c68 <pvPortMalloc+0x178>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d863      	bhi.n	8008c32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b6a:	4b40      	ldr	r3, [pc, #256]	; (8008c6c <pvPortMalloc+0x17c>)
 8008b6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b6e:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <pvPortMalloc+0x17c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b74:	e004      	b.n	8008b80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d903      	bls.n	8008b92 <pvPortMalloc+0xa2>
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1f1      	bne.n	8008b76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b92:	4b33      	ldr	r3, [pc, #204]	; (8008c60 <pvPortMalloc+0x170>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d04a      	beq.n	8008c32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	4413      	add	r3, r2
 8008ba4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	685a      	ldr	r2, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	1ad2      	subs	r2, r2, r3
 8008bb6:	2308      	movs	r3, #8
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d91e      	bls.n	8008bfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <pvPortMalloc+0xf4>
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e7fe      	b.n	8008be2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	1ad2      	subs	r2, r2, r3
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bf6:	69b8      	ldr	r0, [r7, #24]
 8008bf8:	f000 f8f6 	bl	8008de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bfc:	4b1a      	ldr	r3, [pc, #104]	; (8008c68 <pvPortMalloc+0x178>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <pvPortMalloc+0x178>)
 8008c08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c0a:	4b17      	ldr	r3, [pc, #92]	; (8008c68 <pvPortMalloc+0x178>)
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	4b18      	ldr	r3, [pc, #96]	; (8008c70 <pvPortMalloc+0x180>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d203      	bcs.n	8008c1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <pvPortMalloc+0x178>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <pvPortMalloc+0x180>)
 8008c1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <pvPortMalloc+0x174>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	431a      	orrs	r2, r3
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c32:	f7fe fc35 	bl	80074a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d009      	beq.n	8008c54 <pvPortMalloc+0x164>
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	e7fe      	b.n	8008c52 <pvPortMalloc+0x162>
	return pvReturn;
 8008c54:	69fb      	ldr	r3, [r7, #28]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3728      	adds	r7, #40	; 0x28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20004ecc 	.word	0x20004ecc
 8008c64:	20004ed8 	.word	0x20004ed8
 8008c68:	20004ed0 	.word	0x20004ed0
 8008c6c:	20004ec4 	.word	0x20004ec4
 8008c70:	20004ed4 	.word	0x20004ed4

08008c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d046      	beq.n	8008d14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c86:	2308      	movs	r3, #8
 8008c88:	425b      	negs	r3, r3
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	4b20      	ldr	r3, [pc, #128]	; (8008d1c <vPortFree+0xa8>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <vPortFree+0x42>
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	e7fe      	b.n	8008cb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <vPortFree+0x5e>
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	60bb      	str	r3, [r7, #8]
 8008cd0:	e7fe      	b.n	8008cd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	4b11      	ldr	r3, [pc, #68]	; (8008d1c <vPortFree+0xa8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d019      	beq.n	8008d14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d115      	bne.n	8008d14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <vPortFree+0xa8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	43db      	mvns	r3, r3
 8008cf2:	401a      	ands	r2, r3
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cf8:	f7fe fbc4 	bl	8007484 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <vPortFree+0xac>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4413      	add	r3, r2
 8008d06:	4a06      	ldr	r2, [pc, #24]	; (8008d20 <vPortFree+0xac>)
 8008d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d0a:	6938      	ldr	r0, [r7, #16]
 8008d0c:	f000 f86c 	bl	8008de8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d10:	f7fe fbc6 	bl	80074a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d14:	bf00      	nop
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20004ed8 	.word	0x20004ed8
 8008d20:	20004ed0 	.word	0x20004ed0

08008d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d2a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8008d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d30:	4b27      	ldr	r3, [pc, #156]	; (8008dd0 <prvHeapInit+0xac>)
 8008d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3307      	adds	r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0307 	bic.w	r3, r3, #7
 8008d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	4a1f      	ldr	r2, [pc, #124]	; (8008dd0 <prvHeapInit+0xac>)
 8008d54:	4413      	add	r3, r2
 8008d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d5c:	4a1d      	ldr	r2, [pc, #116]	; (8008dd4 <prvHeapInit+0xb0>)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d62:	4b1c      	ldr	r3, [pc, #112]	; (8008dd4 <prvHeapInit+0xb0>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d70:	2208      	movs	r2, #8
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4a15      	ldr	r2, [pc, #84]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d86:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d8e:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <prvHeapInit+0xb4>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <prvHeapInit+0xb4>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <prvHeapInit+0xb8>)
 8008db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4a09      	ldr	r2, [pc, #36]	; (8008de0 <prvHeapInit+0xbc>)
 8008dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dbc:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <prvHeapInit+0xc0>)
 8008dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dc2:	601a      	str	r2, [r3, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	2000142c 	.word	0x2000142c
 8008dd4:	20004ec4 	.word	0x20004ec4
 8008dd8:	20004ecc 	.word	0x20004ecc
 8008ddc:	20004ed4 	.word	0x20004ed4
 8008de0:	20004ed0 	.word	0x20004ed0
 8008de4:	20004ed8 	.word	0x20004ed8

08008de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008df0:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <prvInsertBlockIntoFreeList+0xac>)
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	e002      	b.n	8008dfc <prvInsertBlockIntoFreeList+0x14>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d8f7      	bhi.n	8008df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4413      	add	r3, r2
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d108      	bne.n	8008e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	441a      	add	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	441a      	add	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d118      	bne.n	8008e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4b15      	ldr	r3, [pc, #84]	; (8008e98 <prvInsertBlockIntoFreeList+0xb0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d00d      	beq.n	8008e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	441a      	add	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e008      	b.n	8008e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e66:	4b0c      	ldr	r3, [pc, #48]	; (8008e98 <prvInsertBlockIntoFreeList+0xb0>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e003      	b.n	8008e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d002      	beq.n	8008e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e86:	bf00      	nop
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	20004ec4 	.word	0x20004ec4
 8008e98:	20004ecc 	.word	0x20004ecc

08008e9c <__errno>:
 8008e9c:	4b01      	ldr	r3, [pc, #4]	; (8008ea4 <__errno+0x8>)
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20000044 	.word	0x20000044

08008ea8 <__libc_init_array>:
 8008ea8:	b570      	push	{r4, r5, r6, lr}
 8008eaa:	4e0d      	ldr	r6, [pc, #52]	; (8008ee0 <__libc_init_array+0x38>)
 8008eac:	4c0d      	ldr	r4, [pc, #52]	; (8008ee4 <__libc_init_array+0x3c>)
 8008eae:	1ba4      	subs	r4, r4, r6
 8008eb0:	10a4      	asrs	r4, r4, #2
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	42a5      	cmp	r5, r4
 8008eb6:	d109      	bne.n	8008ecc <__libc_init_array+0x24>
 8008eb8:	4e0b      	ldr	r6, [pc, #44]	; (8008ee8 <__libc_init_array+0x40>)
 8008eba:	4c0c      	ldr	r4, [pc, #48]	; (8008eec <__libc_init_array+0x44>)
 8008ebc:	f000 fc28 	bl	8009710 <_init>
 8008ec0:	1ba4      	subs	r4, r4, r6
 8008ec2:	10a4      	asrs	r4, r4, #2
 8008ec4:	2500      	movs	r5, #0
 8008ec6:	42a5      	cmp	r5, r4
 8008ec8:	d105      	bne.n	8008ed6 <__libc_init_array+0x2e>
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ed0:	4798      	blx	r3
 8008ed2:	3501      	adds	r5, #1
 8008ed4:	e7ee      	b.n	8008eb4 <__libc_init_array+0xc>
 8008ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eda:	4798      	blx	r3
 8008edc:	3501      	adds	r5, #1
 8008ede:	e7f2      	b.n	8008ec6 <__libc_init_array+0x1e>
 8008ee0:	080098ec 	.word	0x080098ec
 8008ee4:	080098ec 	.word	0x080098ec
 8008ee8:	080098ec 	.word	0x080098ec
 8008eec:	080098f0 	.word	0x080098f0

08008ef0 <memcpy>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	1e43      	subs	r3, r0, #1
 8008ef4:	440a      	add	r2, r1
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	d100      	bne.n	8008efc <memcpy+0xc>
 8008efa:	bd10      	pop	{r4, pc}
 8008efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f04:	e7f7      	b.n	8008ef6 <memcpy+0x6>

08008f06 <memset>:
 8008f06:	4402      	add	r2, r0
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d100      	bne.n	8008f10 <memset+0xa>
 8008f0e:	4770      	bx	lr
 8008f10:	f803 1b01 	strb.w	r1, [r3], #1
 8008f14:	e7f9      	b.n	8008f0a <memset+0x4>
	...

08008f18 <siprintf>:
 8008f18:	b40e      	push	{r1, r2, r3}
 8008f1a:	b500      	push	{lr}
 8008f1c:	b09c      	sub	sp, #112	; 0x70
 8008f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f20:	9002      	str	r0, [sp, #8]
 8008f22:	9006      	str	r0, [sp, #24]
 8008f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f28:	4809      	ldr	r0, [pc, #36]	; (8008f50 <siprintf+0x38>)
 8008f2a:	9107      	str	r1, [sp, #28]
 8008f2c:	9104      	str	r1, [sp, #16]
 8008f2e:	4909      	ldr	r1, [pc, #36]	; (8008f54 <siprintf+0x3c>)
 8008f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f34:	9105      	str	r1, [sp, #20]
 8008f36:	6800      	ldr	r0, [r0, #0]
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	a902      	add	r1, sp, #8
 8008f3c:	f000 f866 	bl	800900c <_svfiprintf_r>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	b01c      	add	sp, #112	; 0x70
 8008f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	4770      	bx	lr
 8008f50:	20000044 	.word	0x20000044
 8008f54:	ffff0208 	.word	0xffff0208

08008f58 <__ssputs_r>:
 8008f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f5c:	688e      	ldr	r6, [r1, #8]
 8008f5e:	429e      	cmp	r6, r3
 8008f60:	4682      	mov	sl, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	4690      	mov	r8, r2
 8008f66:	4699      	mov	r9, r3
 8008f68:	d837      	bhi.n	8008fda <__ssputs_r+0x82>
 8008f6a:	898a      	ldrh	r2, [r1, #12]
 8008f6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f70:	d031      	beq.n	8008fd6 <__ssputs_r+0x7e>
 8008f72:	6825      	ldr	r5, [r4, #0]
 8008f74:	6909      	ldr	r1, [r1, #16]
 8008f76:	1a6f      	subs	r7, r5, r1
 8008f78:	6965      	ldr	r5, [r4, #20]
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f80:	fb95 f5f3 	sdiv	r5, r5, r3
 8008f84:	f109 0301 	add.w	r3, r9, #1
 8008f88:	443b      	add	r3, r7
 8008f8a:	429d      	cmp	r5, r3
 8008f8c:	bf38      	it	cc
 8008f8e:	461d      	movcc	r5, r3
 8008f90:	0553      	lsls	r3, r2, #21
 8008f92:	d530      	bpl.n	8008ff6 <__ssputs_r+0x9e>
 8008f94:	4629      	mov	r1, r5
 8008f96:	f000 fb21 	bl	80095dc <_malloc_r>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	b950      	cbnz	r0, 8008fb4 <__ssputs_r+0x5c>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	f8ca 3000 	str.w	r3, [sl]
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb4:	463a      	mov	r2, r7
 8008fb6:	6921      	ldr	r1, [r4, #16]
 8008fb8:	f7ff ff9a 	bl	8008ef0 <memcpy>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc6:	81a3      	strh	r3, [r4, #12]
 8008fc8:	6126      	str	r6, [r4, #16]
 8008fca:	6165      	str	r5, [r4, #20]
 8008fcc:	443e      	add	r6, r7
 8008fce:	1bed      	subs	r5, r5, r7
 8008fd0:	6026      	str	r6, [r4, #0]
 8008fd2:	60a5      	str	r5, [r4, #8]
 8008fd4:	464e      	mov	r6, r9
 8008fd6:	454e      	cmp	r6, r9
 8008fd8:	d900      	bls.n	8008fdc <__ssputs_r+0x84>
 8008fda:	464e      	mov	r6, r9
 8008fdc:	4632      	mov	r2, r6
 8008fde:	4641      	mov	r1, r8
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	f000 fa93 	bl	800950c <memmove>
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	1b9b      	subs	r3, r3, r6
 8008fea:	60a3      	str	r3, [r4, #8]
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	441e      	add	r6, r3
 8008ff0:	6026      	str	r6, [r4, #0]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e7dc      	b.n	8008fb0 <__ssputs_r+0x58>
 8008ff6:	462a      	mov	r2, r5
 8008ff8:	f000 fb4a 	bl	8009690 <_realloc_r>
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d1e2      	bne.n	8008fc8 <__ssputs_r+0x70>
 8009002:	6921      	ldr	r1, [r4, #16]
 8009004:	4650      	mov	r0, sl
 8009006:	f000 fa9b 	bl	8009540 <_free_r>
 800900a:	e7c8      	b.n	8008f9e <__ssputs_r+0x46>

0800900c <_svfiprintf_r>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	461d      	mov	r5, r3
 8009012:	898b      	ldrh	r3, [r1, #12]
 8009014:	061f      	lsls	r7, r3, #24
 8009016:	b09d      	sub	sp, #116	; 0x74
 8009018:	4680      	mov	r8, r0
 800901a:	460c      	mov	r4, r1
 800901c:	4616      	mov	r6, r2
 800901e:	d50f      	bpl.n	8009040 <_svfiprintf_r+0x34>
 8009020:	690b      	ldr	r3, [r1, #16]
 8009022:	b96b      	cbnz	r3, 8009040 <_svfiprintf_r+0x34>
 8009024:	2140      	movs	r1, #64	; 0x40
 8009026:	f000 fad9 	bl	80095dc <_malloc_r>
 800902a:	6020      	str	r0, [r4, #0]
 800902c:	6120      	str	r0, [r4, #16]
 800902e:	b928      	cbnz	r0, 800903c <_svfiprintf_r+0x30>
 8009030:	230c      	movs	r3, #12
 8009032:	f8c8 3000 	str.w	r3, [r8]
 8009036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800903a:	e0c8      	b.n	80091ce <_svfiprintf_r+0x1c2>
 800903c:	2340      	movs	r3, #64	; 0x40
 800903e:	6163      	str	r3, [r4, #20]
 8009040:	2300      	movs	r3, #0
 8009042:	9309      	str	r3, [sp, #36]	; 0x24
 8009044:	2320      	movs	r3, #32
 8009046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800904a:	2330      	movs	r3, #48	; 0x30
 800904c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009050:	9503      	str	r5, [sp, #12]
 8009052:	f04f 0b01 	mov.w	fp, #1
 8009056:	4637      	mov	r7, r6
 8009058:	463d      	mov	r5, r7
 800905a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800905e:	b10b      	cbz	r3, 8009064 <_svfiprintf_r+0x58>
 8009060:	2b25      	cmp	r3, #37	; 0x25
 8009062:	d13e      	bne.n	80090e2 <_svfiprintf_r+0xd6>
 8009064:	ebb7 0a06 	subs.w	sl, r7, r6
 8009068:	d00b      	beq.n	8009082 <_svfiprintf_r+0x76>
 800906a:	4653      	mov	r3, sl
 800906c:	4632      	mov	r2, r6
 800906e:	4621      	mov	r1, r4
 8009070:	4640      	mov	r0, r8
 8009072:	f7ff ff71 	bl	8008f58 <__ssputs_r>
 8009076:	3001      	adds	r0, #1
 8009078:	f000 80a4 	beq.w	80091c4 <_svfiprintf_r+0x1b8>
 800907c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907e:	4453      	add	r3, sl
 8009080:	9309      	str	r3, [sp, #36]	; 0x24
 8009082:	783b      	ldrb	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 809d 	beq.w	80091c4 <_svfiprintf_r+0x1b8>
 800908a:	2300      	movs	r3, #0
 800908c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800909c:	931a      	str	r3, [sp, #104]	; 0x68
 800909e:	462f      	mov	r7, r5
 80090a0:	2205      	movs	r2, #5
 80090a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80090a6:	4850      	ldr	r0, [pc, #320]	; (80091e8 <_svfiprintf_r+0x1dc>)
 80090a8:	f7f7 f89a 	bl	80001e0 <memchr>
 80090ac:	9b04      	ldr	r3, [sp, #16]
 80090ae:	b9d0      	cbnz	r0, 80090e6 <_svfiprintf_r+0xda>
 80090b0:	06d9      	lsls	r1, r3, #27
 80090b2:	bf44      	itt	mi
 80090b4:	2220      	movmi	r2, #32
 80090b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090ba:	071a      	lsls	r2, r3, #28
 80090bc:	bf44      	itt	mi
 80090be:	222b      	movmi	r2, #43	; 0x2b
 80090c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090c4:	782a      	ldrb	r2, [r5, #0]
 80090c6:	2a2a      	cmp	r2, #42	; 0x2a
 80090c8:	d015      	beq.n	80090f6 <_svfiprintf_r+0xea>
 80090ca:	9a07      	ldr	r2, [sp, #28]
 80090cc:	462f      	mov	r7, r5
 80090ce:	2000      	movs	r0, #0
 80090d0:	250a      	movs	r5, #10
 80090d2:	4639      	mov	r1, r7
 80090d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d8:	3b30      	subs	r3, #48	; 0x30
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d94d      	bls.n	800917a <_svfiprintf_r+0x16e>
 80090de:	b1b8      	cbz	r0, 8009110 <_svfiprintf_r+0x104>
 80090e0:	e00f      	b.n	8009102 <_svfiprintf_r+0xf6>
 80090e2:	462f      	mov	r7, r5
 80090e4:	e7b8      	b.n	8009058 <_svfiprintf_r+0x4c>
 80090e6:	4a40      	ldr	r2, [pc, #256]	; (80091e8 <_svfiprintf_r+0x1dc>)
 80090e8:	1a80      	subs	r0, r0, r2
 80090ea:	fa0b f000 	lsl.w	r0, fp, r0
 80090ee:	4318      	orrs	r0, r3
 80090f0:	9004      	str	r0, [sp, #16]
 80090f2:	463d      	mov	r5, r7
 80090f4:	e7d3      	b.n	800909e <_svfiprintf_r+0x92>
 80090f6:	9a03      	ldr	r2, [sp, #12]
 80090f8:	1d11      	adds	r1, r2, #4
 80090fa:	6812      	ldr	r2, [r2, #0]
 80090fc:	9103      	str	r1, [sp, #12]
 80090fe:	2a00      	cmp	r2, #0
 8009100:	db01      	blt.n	8009106 <_svfiprintf_r+0xfa>
 8009102:	9207      	str	r2, [sp, #28]
 8009104:	e004      	b.n	8009110 <_svfiprintf_r+0x104>
 8009106:	4252      	negs	r2, r2
 8009108:	f043 0302 	orr.w	r3, r3, #2
 800910c:	9207      	str	r2, [sp, #28]
 800910e:	9304      	str	r3, [sp, #16]
 8009110:	783b      	ldrb	r3, [r7, #0]
 8009112:	2b2e      	cmp	r3, #46	; 0x2e
 8009114:	d10c      	bne.n	8009130 <_svfiprintf_r+0x124>
 8009116:	787b      	ldrb	r3, [r7, #1]
 8009118:	2b2a      	cmp	r3, #42	; 0x2a
 800911a:	d133      	bne.n	8009184 <_svfiprintf_r+0x178>
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	1d1a      	adds	r2, r3, #4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	9203      	str	r2, [sp, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	bfb8      	it	lt
 8009128:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800912c:	3702      	adds	r7, #2
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	4d2e      	ldr	r5, [pc, #184]	; (80091ec <_svfiprintf_r+0x1e0>)
 8009132:	7839      	ldrb	r1, [r7, #0]
 8009134:	2203      	movs	r2, #3
 8009136:	4628      	mov	r0, r5
 8009138:	f7f7 f852 	bl	80001e0 <memchr>
 800913c:	b138      	cbz	r0, 800914e <_svfiprintf_r+0x142>
 800913e:	2340      	movs	r3, #64	; 0x40
 8009140:	1b40      	subs	r0, r0, r5
 8009142:	fa03 f000 	lsl.w	r0, r3, r0
 8009146:	9b04      	ldr	r3, [sp, #16]
 8009148:	4303      	orrs	r3, r0
 800914a:	3701      	adds	r7, #1
 800914c:	9304      	str	r3, [sp, #16]
 800914e:	7839      	ldrb	r1, [r7, #0]
 8009150:	4827      	ldr	r0, [pc, #156]	; (80091f0 <_svfiprintf_r+0x1e4>)
 8009152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009156:	2206      	movs	r2, #6
 8009158:	1c7e      	adds	r6, r7, #1
 800915a:	f7f7 f841 	bl	80001e0 <memchr>
 800915e:	2800      	cmp	r0, #0
 8009160:	d038      	beq.n	80091d4 <_svfiprintf_r+0x1c8>
 8009162:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <_svfiprintf_r+0x1e8>)
 8009164:	bb13      	cbnz	r3, 80091ac <_svfiprintf_r+0x1a0>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	3307      	adds	r3, #7
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	3308      	adds	r3, #8
 8009170:	9303      	str	r3, [sp, #12]
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	444b      	add	r3, r9
 8009176:	9309      	str	r3, [sp, #36]	; 0x24
 8009178:	e76d      	b.n	8009056 <_svfiprintf_r+0x4a>
 800917a:	fb05 3202 	mla	r2, r5, r2, r3
 800917e:	2001      	movs	r0, #1
 8009180:	460f      	mov	r7, r1
 8009182:	e7a6      	b.n	80090d2 <_svfiprintf_r+0xc6>
 8009184:	2300      	movs	r3, #0
 8009186:	3701      	adds	r7, #1
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	4619      	mov	r1, r3
 800918c:	250a      	movs	r5, #10
 800918e:	4638      	mov	r0, r7
 8009190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009194:	3a30      	subs	r2, #48	; 0x30
 8009196:	2a09      	cmp	r2, #9
 8009198:	d903      	bls.n	80091a2 <_svfiprintf_r+0x196>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0c8      	beq.n	8009130 <_svfiprintf_r+0x124>
 800919e:	9105      	str	r1, [sp, #20]
 80091a0:	e7c6      	b.n	8009130 <_svfiprintf_r+0x124>
 80091a2:	fb05 2101 	mla	r1, r5, r1, r2
 80091a6:	2301      	movs	r3, #1
 80091a8:	4607      	mov	r7, r0
 80091aa:	e7f0      	b.n	800918e <_svfiprintf_r+0x182>
 80091ac:	ab03      	add	r3, sp, #12
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	4622      	mov	r2, r4
 80091b2:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <_svfiprintf_r+0x1ec>)
 80091b4:	a904      	add	r1, sp, #16
 80091b6:	4640      	mov	r0, r8
 80091b8:	f3af 8000 	nop.w
 80091bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80091c0:	4681      	mov	r9, r0
 80091c2:	d1d6      	bne.n	8009172 <_svfiprintf_r+0x166>
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	065b      	lsls	r3, r3, #25
 80091c8:	f53f af35 	bmi.w	8009036 <_svfiprintf_r+0x2a>
 80091cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ce:	b01d      	add	sp, #116	; 0x74
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	ab03      	add	r3, sp, #12
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4622      	mov	r2, r4
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <_svfiprintf_r+0x1ec>)
 80091dc:	a904      	add	r1, sp, #16
 80091de:	4640      	mov	r0, r8
 80091e0:	f000 f882 	bl	80092e8 <_printf_i>
 80091e4:	e7ea      	b.n	80091bc <_svfiprintf_r+0x1b0>
 80091e6:	bf00      	nop
 80091e8:	080098b0 	.word	0x080098b0
 80091ec:	080098b6 	.word	0x080098b6
 80091f0:	080098ba 	.word	0x080098ba
 80091f4:	00000000 	.word	0x00000000
 80091f8:	08008f59 	.word	0x08008f59

080091fc <_printf_common>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	4691      	mov	r9, r2
 8009202:	461f      	mov	r7, r3
 8009204:	688a      	ldr	r2, [r1, #8]
 8009206:	690b      	ldr	r3, [r1, #16]
 8009208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800920c:	4293      	cmp	r3, r2
 800920e:	bfb8      	it	lt
 8009210:	4613      	movlt	r3, r2
 8009212:	f8c9 3000 	str.w	r3, [r9]
 8009216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800921a:	4606      	mov	r6, r0
 800921c:	460c      	mov	r4, r1
 800921e:	b112      	cbz	r2, 8009226 <_printf_common+0x2a>
 8009220:	3301      	adds	r3, #1
 8009222:	f8c9 3000 	str.w	r3, [r9]
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	0699      	lsls	r1, r3, #26
 800922a:	bf42      	ittt	mi
 800922c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009230:	3302      	addmi	r3, #2
 8009232:	f8c9 3000 	strmi.w	r3, [r9]
 8009236:	6825      	ldr	r5, [r4, #0]
 8009238:	f015 0506 	ands.w	r5, r5, #6
 800923c:	d107      	bne.n	800924e <_printf_common+0x52>
 800923e:	f104 0a19 	add.w	sl, r4, #25
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	f8d9 2000 	ldr.w	r2, [r9]
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	42ab      	cmp	r3, r5
 800924c:	dc28      	bgt.n	80092a0 <_printf_common+0xa4>
 800924e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009252:	6822      	ldr	r2, [r4, #0]
 8009254:	3300      	adds	r3, #0
 8009256:	bf18      	it	ne
 8009258:	2301      	movne	r3, #1
 800925a:	0692      	lsls	r2, r2, #26
 800925c:	d42d      	bmi.n	80092ba <_printf_common+0xbe>
 800925e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009262:	4639      	mov	r1, r7
 8009264:	4630      	mov	r0, r6
 8009266:	47c0      	blx	r8
 8009268:	3001      	adds	r0, #1
 800926a:	d020      	beq.n	80092ae <_printf_common+0xb2>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	68e5      	ldr	r5, [r4, #12]
 8009270:	f8d9 2000 	ldr.w	r2, [r9]
 8009274:	f003 0306 	and.w	r3, r3, #6
 8009278:	2b04      	cmp	r3, #4
 800927a:	bf08      	it	eq
 800927c:	1aad      	subeq	r5, r5, r2
 800927e:	68a3      	ldr	r3, [r4, #8]
 8009280:	6922      	ldr	r2, [r4, #16]
 8009282:	bf0c      	ite	eq
 8009284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009288:	2500      	movne	r5, #0
 800928a:	4293      	cmp	r3, r2
 800928c:	bfc4      	itt	gt
 800928e:	1a9b      	subgt	r3, r3, r2
 8009290:	18ed      	addgt	r5, r5, r3
 8009292:	f04f 0900 	mov.w	r9, #0
 8009296:	341a      	adds	r4, #26
 8009298:	454d      	cmp	r5, r9
 800929a:	d11a      	bne.n	80092d2 <_printf_common+0xd6>
 800929c:	2000      	movs	r0, #0
 800929e:	e008      	b.n	80092b2 <_printf_common+0xb6>
 80092a0:	2301      	movs	r3, #1
 80092a2:	4652      	mov	r2, sl
 80092a4:	4639      	mov	r1, r7
 80092a6:	4630      	mov	r0, r6
 80092a8:	47c0      	blx	r8
 80092aa:	3001      	adds	r0, #1
 80092ac:	d103      	bne.n	80092b6 <_printf_common+0xba>
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b6:	3501      	adds	r5, #1
 80092b8:	e7c3      	b.n	8009242 <_printf_common+0x46>
 80092ba:	18e1      	adds	r1, r4, r3
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	2030      	movs	r0, #48	; 0x30
 80092c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092c4:	4422      	add	r2, r4
 80092c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092ce:	3302      	adds	r3, #2
 80092d0:	e7c5      	b.n	800925e <_printf_common+0x62>
 80092d2:	2301      	movs	r3, #1
 80092d4:	4622      	mov	r2, r4
 80092d6:	4639      	mov	r1, r7
 80092d8:	4630      	mov	r0, r6
 80092da:	47c0      	blx	r8
 80092dc:	3001      	adds	r0, #1
 80092de:	d0e6      	beq.n	80092ae <_printf_common+0xb2>
 80092e0:	f109 0901 	add.w	r9, r9, #1
 80092e4:	e7d8      	b.n	8009298 <_printf_common+0x9c>
	...

080092e8 <_printf_i>:
 80092e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80092f0:	460c      	mov	r4, r1
 80092f2:	7e09      	ldrb	r1, [r1, #24]
 80092f4:	b085      	sub	sp, #20
 80092f6:	296e      	cmp	r1, #110	; 0x6e
 80092f8:	4617      	mov	r7, r2
 80092fa:	4606      	mov	r6, r0
 80092fc:	4698      	mov	r8, r3
 80092fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009300:	f000 80b3 	beq.w	800946a <_printf_i+0x182>
 8009304:	d822      	bhi.n	800934c <_printf_i+0x64>
 8009306:	2963      	cmp	r1, #99	; 0x63
 8009308:	d036      	beq.n	8009378 <_printf_i+0x90>
 800930a:	d80a      	bhi.n	8009322 <_printf_i+0x3a>
 800930c:	2900      	cmp	r1, #0
 800930e:	f000 80b9 	beq.w	8009484 <_printf_i+0x19c>
 8009312:	2958      	cmp	r1, #88	; 0x58
 8009314:	f000 8083 	beq.w	800941e <_printf_i+0x136>
 8009318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800931c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009320:	e032      	b.n	8009388 <_printf_i+0xa0>
 8009322:	2964      	cmp	r1, #100	; 0x64
 8009324:	d001      	beq.n	800932a <_printf_i+0x42>
 8009326:	2969      	cmp	r1, #105	; 0x69
 8009328:	d1f6      	bne.n	8009318 <_printf_i+0x30>
 800932a:	6820      	ldr	r0, [r4, #0]
 800932c:	6813      	ldr	r3, [r2, #0]
 800932e:	0605      	lsls	r5, r0, #24
 8009330:	f103 0104 	add.w	r1, r3, #4
 8009334:	d52a      	bpl.n	800938c <_printf_i+0xa4>
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6011      	str	r1, [r2, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	da03      	bge.n	8009346 <_printf_i+0x5e>
 800933e:	222d      	movs	r2, #45	; 0x2d
 8009340:	425b      	negs	r3, r3
 8009342:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009346:	486f      	ldr	r0, [pc, #444]	; (8009504 <_printf_i+0x21c>)
 8009348:	220a      	movs	r2, #10
 800934a:	e039      	b.n	80093c0 <_printf_i+0xd8>
 800934c:	2973      	cmp	r1, #115	; 0x73
 800934e:	f000 809d 	beq.w	800948c <_printf_i+0x1a4>
 8009352:	d808      	bhi.n	8009366 <_printf_i+0x7e>
 8009354:	296f      	cmp	r1, #111	; 0x6f
 8009356:	d020      	beq.n	800939a <_printf_i+0xb2>
 8009358:	2970      	cmp	r1, #112	; 0x70
 800935a:	d1dd      	bne.n	8009318 <_printf_i+0x30>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	f043 0320 	orr.w	r3, r3, #32
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	e003      	b.n	800936e <_printf_i+0x86>
 8009366:	2975      	cmp	r1, #117	; 0x75
 8009368:	d017      	beq.n	800939a <_printf_i+0xb2>
 800936a:	2978      	cmp	r1, #120	; 0x78
 800936c:	d1d4      	bne.n	8009318 <_printf_i+0x30>
 800936e:	2378      	movs	r3, #120	; 0x78
 8009370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009374:	4864      	ldr	r0, [pc, #400]	; (8009508 <_printf_i+0x220>)
 8009376:	e055      	b.n	8009424 <_printf_i+0x13c>
 8009378:	6813      	ldr	r3, [r2, #0]
 800937a:	1d19      	adds	r1, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6011      	str	r1, [r2, #0]
 8009380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009388:	2301      	movs	r3, #1
 800938a:	e08c      	b.n	80094a6 <_printf_i+0x1be>
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	6011      	str	r1, [r2, #0]
 8009390:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009394:	bf18      	it	ne
 8009396:	b21b      	sxthne	r3, r3
 8009398:	e7cf      	b.n	800933a <_printf_i+0x52>
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	6825      	ldr	r5, [r4, #0]
 800939e:	1d18      	adds	r0, r3, #4
 80093a0:	6010      	str	r0, [r2, #0]
 80093a2:	0628      	lsls	r0, r5, #24
 80093a4:	d501      	bpl.n	80093aa <_printf_i+0xc2>
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	e002      	b.n	80093b0 <_printf_i+0xc8>
 80093aa:	0668      	lsls	r0, r5, #25
 80093ac:	d5fb      	bpl.n	80093a6 <_printf_i+0xbe>
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	4854      	ldr	r0, [pc, #336]	; (8009504 <_printf_i+0x21c>)
 80093b2:	296f      	cmp	r1, #111	; 0x6f
 80093b4:	bf14      	ite	ne
 80093b6:	220a      	movne	r2, #10
 80093b8:	2208      	moveq	r2, #8
 80093ba:	2100      	movs	r1, #0
 80093bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093c0:	6865      	ldr	r5, [r4, #4]
 80093c2:	60a5      	str	r5, [r4, #8]
 80093c4:	2d00      	cmp	r5, #0
 80093c6:	f2c0 8095 	blt.w	80094f4 <_printf_i+0x20c>
 80093ca:	6821      	ldr	r1, [r4, #0]
 80093cc:	f021 0104 	bic.w	r1, r1, #4
 80093d0:	6021      	str	r1, [r4, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d13d      	bne.n	8009452 <_printf_i+0x16a>
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	f040 808e 	bne.w	80094f8 <_printf_i+0x210>
 80093dc:	4665      	mov	r5, ip
 80093de:	2a08      	cmp	r2, #8
 80093e0:	d10b      	bne.n	80093fa <_printf_i+0x112>
 80093e2:	6823      	ldr	r3, [r4, #0]
 80093e4:	07db      	lsls	r3, r3, #31
 80093e6:	d508      	bpl.n	80093fa <_printf_i+0x112>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	6862      	ldr	r2, [r4, #4]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	bfde      	ittt	le
 80093f0:	2330      	movle	r3, #48	; 0x30
 80093f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80093fa:	ebac 0305 	sub.w	r3, ip, r5
 80093fe:	6123      	str	r3, [r4, #16]
 8009400:	f8cd 8000 	str.w	r8, [sp]
 8009404:	463b      	mov	r3, r7
 8009406:	aa03      	add	r2, sp, #12
 8009408:	4621      	mov	r1, r4
 800940a:	4630      	mov	r0, r6
 800940c:	f7ff fef6 	bl	80091fc <_printf_common>
 8009410:	3001      	adds	r0, #1
 8009412:	d14d      	bne.n	80094b0 <_printf_i+0x1c8>
 8009414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009418:	b005      	add	sp, #20
 800941a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800941e:	4839      	ldr	r0, [pc, #228]	; (8009504 <_printf_i+0x21c>)
 8009420:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009424:	6813      	ldr	r3, [r2, #0]
 8009426:	6821      	ldr	r1, [r4, #0]
 8009428:	1d1d      	adds	r5, r3, #4
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6015      	str	r5, [r2, #0]
 800942e:	060a      	lsls	r2, r1, #24
 8009430:	d50b      	bpl.n	800944a <_printf_i+0x162>
 8009432:	07ca      	lsls	r2, r1, #31
 8009434:	bf44      	itt	mi
 8009436:	f041 0120 	orrmi.w	r1, r1, #32
 800943a:	6021      	strmi	r1, [r4, #0]
 800943c:	b91b      	cbnz	r3, 8009446 <_printf_i+0x15e>
 800943e:	6822      	ldr	r2, [r4, #0]
 8009440:	f022 0220 	bic.w	r2, r2, #32
 8009444:	6022      	str	r2, [r4, #0]
 8009446:	2210      	movs	r2, #16
 8009448:	e7b7      	b.n	80093ba <_printf_i+0xd2>
 800944a:	064d      	lsls	r5, r1, #25
 800944c:	bf48      	it	mi
 800944e:	b29b      	uxthmi	r3, r3
 8009450:	e7ef      	b.n	8009432 <_printf_i+0x14a>
 8009452:	4665      	mov	r5, ip
 8009454:	fbb3 f1f2 	udiv	r1, r3, r2
 8009458:	fb02 3311 	mls	r3, r2, r1, r3
 800945c:	5cc3      	ldrb	r3, [r0, r3]
 800945e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009462:	460b      	mov	r3, r1
 8009464:	2900      	cmp	r1, #0
 8009466:	d1f5      	bne.n	8009454 <_printf_i+0x16c>
 8009468:	e7b9      	b.n	80093de <_printf_i+0xf6>
 800946a:	6813      	ldr	r3, [r2, #0]
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	6961      	ldr	r1, [r4, #20]
 8009470:	1d18      	adds	r0, r3, #4
 8009472:	6010      	str	r0, [r2, #0]
 8009474:	0628      	lsls	r0, r5, #24
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	d501      	bpl.n	800947e <_printf_i+0x196>
 800947a:	6019      	str	r1, [r3, #0]
 800947c:	e002      	b.n	8009484 <_printf_i+0x19c>
 800947e:	066a      	lsls	r2, r5, #25
 8009480:	d5fb      	bpl.n	800947a <_printf_i+0x192>
 8009482:	8019      	strh	r1, [r3, #0]
 8009484:	2300      	movs	r3, #0
 8009486:	6123      	str	r3, [r4, #16]
 8009488:	4665      	mov	r5, ip
 800948a:	e7b9      	b.n	8009400 <_printf_i+0x118>
 800948c:	6813      	ldr	r3, [r2, #0]
 800948e:	1d19      	adds	r1, r3, #4
 8009490:	6011      	str	r1, [r2, #0]
 8009492:	681d      	ldr	r5, [r3, #0]
 8009494:	6862      	ldr	r2, [r4, #4]
 8009496:	2100      	movs	r1, #0
 8009498:	4628      	mov	r0, r5
 800949a:	f7f6 fea1 	bl	80001e0 <memchr>
 800949e:	b108      	cbz	r0, 80094a4 <_printf_i+0x1bc>
 80094a0:	1b40      	subs	r0, r0, r5
 80094a2:	6060      	str	r0, [r4, #4]
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	6123      	str	r3, [r4, #16]
 80094a8:	2300      	movs	r3, #0
 80094aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ae:	e7a7      	b.n	8009400 <_printf_i+0x118>
 80094b0:	6923      	ldr	r3, [r4, #16]
 80094b2:	462a      	mov	r2, r5
 80094b4:	4639      	mov	r1, r7
 80094b6:	4630      	mov	r0, r6
 80094b8:	47c0      	blx	r8
 80094ba:	3001      	adds	r0, #1
 80094bc:	d0aa      	beq.n	8009414 <_printf_i+0x12c>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	079b      	lsls	r3, r3, #30
 80094c2:	d413      	bmi.n	80094ec <_printf_i+0x204>
 80094c4:	68e0      	ldr	r0, [r4, #12]
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	4298      	cmp	r0, r3
 80094ca:	bfb8      	it	lt
 80094cc:	4618      	movlt	r0, r3
 80094ce:	e7a3      	b.n	8009418 <_printf_i+0x130>
 80094d0:	2301      	movs	r3, #1
 80094d2:	464a      	mov	r2, r9
 80094d4:	4639      	mov	r1, r7
 80094d6:	4630      	mov	r0, r6
 80094d8:	47c0      	blx	r8
 80094da:	3001      	adds	r0, #1
 80094dc:	d09a      	beq.n	8009414 <_printf_i+0x12c>
 80094de:	3501      	adds	r5, #1
 80094e0:	68e3      	ldr	r3, [r4, #12]
 80094e2:	9a03      	ldr	r2, [sp, #12]
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	42ab      	cmp	r3, r5
 80094e8:	dcf2      	bgt.n	80094d0 <_printf_i+0x1e8>
 80094ea:	e7eb      	b.n	80094c4 <_printf_i+0x1dc>
 80094ec:	2500      	movs	r5, #0
 80094ee:	f104 0919 	add.w	r9, r4, #25
 80094f2:	e7f5      	b.n	80094e0 <_printf_i+0x1f8>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1ac      	bne.n	8009452 <_printf_i+0x16a>
 80094f8:	7803      	ldrb	r3, [r0, #0]
 80094fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009502:	e76c      	b.n	80093de <_printf_i+0xf6>
 8009504:	080098c1 	.word	0x080098c1
 8009508:	080098d2 	.word	0x080098d2

0800950c <memmove>:
 800950c:	4288      	cmp	r0, r1
 800950e:	b510      	push	{r4, lr}
 8009510:	eb01 0302 	add.w	r3, r1, r2
 8009514:	d807      	bhi.n	8009526 <memmove+0x1a>
 8009516:	1e42      	subs	r2, r0, #1
 8009518:	4299      	cmp	r1, r3
 800951a:	d00a      	beq.n	8009532 <memmove+0x26>
 800951c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009520:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009524:	e7f8      	b.n	8009518 <memmove+0xc>
 8009526:	4283      	cmp	r3, r0
 8009528:	d9f5      	bls.n	8009516 <memmove+0xa>
 800952a:	1881      	adds	r1, r0, r2
 800952c:	1ad2      	subs	r2, r2, r3
 800952e:	42d3      	cmn	r3, r2
 8009530:	d100      	bne.n	8009534 <memmove+0x28>
 8009532:	bd10      	pop	{r4, pc}
 8009534:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009538:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800953c:	e7f7      	b.n	800952e <memmove+0x22>
	...

08009540 <_free_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	2900      	cmp	r1, #0
 8009546:	d045      	beq.n	80095d4 <_free_r+0x94>
 8009548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954c:	1f0c      	subs	r4, r1, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	bfb8      	it	lt
 8009552:	18e4      	addlt	r4, r4, r3
 8009554:	f000 f8d2 	bl	80096fc <__malloc_lock>
 8009558:	4a1f      	ldr	r2, [pc, #124]	; (80095d8 <_free_r+0x98>)
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	4610      	mov	r0, r2
 800955e:	b933      	cbnz	r3, 800956e <_free_r+0x2e>
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	6014      	str	r4, [r2, #0]
 8009564:	4628      	mov	r0, r5
 8009566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956a:	f000 b8c8 	b.w	80096fe <__malloc_unlock>
 800956e:	42a3      	cmp	r3, r4
 8009570:	d90c      	bls.n	800958c <_free_r+0x4c>
 8009572:	6821      	ldr	r1, [r4, #0]
 8009574:	1862      	adds	r2, r4, r1
 8009576:	4293      	cmp	r3, r2
 8009578:	bf04      	itt	eq
 800957a:	681a      	ldreq	r2, [r3, #0]
 800957c:	685b      	ldreq	r3, [r3, #4]
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	bf04      	itt	eq
 8009582:	1852      	addeq	r2, r2, r1
 8009584:	6022      	streq	r2, [r4, #0]
 8009586:	6004      	str	r4, [r0, #0]
 8009588:	e7ec      	b.n	8009564 <_free_r+0x24>
 800958a:	4613      	mov	r3, r2
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	b10a      	cbz	r2, 8009594 <_free_r+0x54>
 8009590:	42a2      	cmp	r2, r4
 8009592:	d9fa      	bls.n	800958a <_free_r+0x4a>
 8009594:	6819      	ldr	r1, [r3, #0]
 8009596:	1858      	adds	r0, r3, r1
 8009598:	42a0      	cmp	r0, r4
 800959a:	d10b      	bne.n	80095b4 <_free_r+0x74>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	4401      	add	r1, r0
 80095a0:	1858      	adds	r0, r3, r1
 80095a2:	4282      	cmp	r2, r0
 80095a4:	6019      	str	r1, [r3, #0]
 80095a6:	d1dd      	bne.n	8009564 <_free_r+0x24>
 80095a8:	6810      	ldr	r0, [r2, #0]
 80095aa:	6852      	ldr	r2, [r2, #4]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	4401      	add	r1, r0
 80095b0:	6019      	str	r1, [r3, #0]
 80095b2:	e7d7      	b.n	8009564 <_free_r+0x24>
 80095b4:	d902      	bls.n	80095bc <_free_r+0x7c>
 80095b6:	230c      	movs	r3, #12
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	e7d3      	b.n	8009564 <_free_r+0x24>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	1821      	adds	r1, r4, r0
 80095c0:	428a      	cmp	r2, r1
 80095c2:	bf04      	itt	eq
 80095c4:	6811      	ldreq	r1, [r2, #0]
 80095c6:	6852      	ldreq	r2, [r2, #4]
 80095c8:	6062      	str	r2, [r4, #4]
 80095ca:	bf04      	itt	eq
 80095cc:	1809      	addeq	r1, r1, r0
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	605c      	str	r4, [r3, #4]
 80095d2:	e7c7      	b.n	8009564 <_free_r+0x24>
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	20004edc 	.word	0x20004edc

080095dc <_malloc_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	1ccd      	adds	r5, r1, #3
 80095e0:	f025 0503 	bic.w	r5, r5, #3
 80095e4:	3508      	adds	r5, #8
 80095e6:	2d0c      	cmp	r5, #12
 80095e8:	bf38      	it	cc
 80095ea:	250c      	movcc	r5, #12
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	4606      	mov	r6, r0
 80095f0:	db01      	blt.n	80095f6 <_malloc_r+0x1a>
 80095f2:	42a9      	cmp	r1, r5
 80095f4:	d903      	bls.n	80095fe <_malloc_r+0x22>
 80095f6:	230c      	movs	r3, #12
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	2000      	movs	r0, #0
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	f000 f87d 	bl	80096fc <__malloc_lock>
 8009602:	4a21      	ldr	r2, [pc, #132]	; (8009688 <_malloc_r+0xac>)
 8009604:	6814      	ldr	r4, [r2, #0]
 8009606:	4621      	mov	r1, r4
 8009608:	b991      	cbnz	r1, 8009630 <_malloc_r+0x54>
 800960a:	4c20      	ldr	r4, [pc, #128]	; (800968c <_malloc_r+0xb0>)
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	b91b      	cbnz	r3, 8009618 <_malloc_r+0x3c>
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f863 	bl	80096dc <_sbrk_r>
 8009616:	6020      	str	r0, [r4, #0]
 8009618:	4629      	mov	r1, r5
 800961a:	4630      	mov	r0, r6
 800961c:	f000 f85e 	bl	80096dc <_sbrk_r>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d124      	bne.n	800966e <_malloc_r+0x92>
 8009624:	230c      	movs	r3, #12
 8009626:	6033      	str	r3, [r6, #0]
 8009628:	4630      	mov	r0, r6
 800962a:	f000 f868 	bl	80096fe <__malloc_unlock>
 800962e:	e7e4      	b.n	80095fa <_malloc_r+0x1e>
 8009630:	680b      	ldr	r3, [r1, #0]
 8009632:	1b5b      	subs	r3, r3, r5
 8009634:	d418      	bmi.n	8009668 <_malloc_r+0x8c>
 8009636:	2b0b      	cmp	r3, #11
 8009638:	d90f      	bls.n	800965a <_malloc_r+0x7e>
 800963a:	600b      	str	r3, [r1, #0]
 800963c:	50cd      	str	r5, [r1, r3]
 800963e:	18cc      	adds	r4, r1, r3
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f85c 	bl	80096fe <__malloc_unlock>
 8009646:	f104 000b 	add.w	r0, r4, #11
 800964a:	1d23      	adds	r3, r4, #4
 800964c:	f020 0007 	bic.w	r0, r0, #7
 8009650:	1ac3      	subs	r3, r0, r3
 8009652:	d0d3      	beq.n	80095fc <_malloc_r+0x20>
 8009654:	425a      	negs	r2, r3
 8009656:	50e2      	str	r2, [r4, r3]
 8009658:	e7d0      	b.n	80095fc <_malloc_r+0x20>
 800965a:	428c      	cmp	r4, r1
 800965c:	684b      	ldr	r3, [r1, #4]
 800965e:	bf16      	itet	ne
 8009660:	6063      	strne	r3, [r4, #4]
 8009662:	6013      	streq	r3, [r2, #0]
 8009664:	460c      	movne	r4, r1
 8009666:	e7eb      	b.n	8009640 <_malloc_r+0x64>
 8009668:	460c      	mov	r4, r1
 800966a:	6849      	ldr	r1, [r1, #4]
 800966c:	e7cc      	b.n	8009608 <_malloc_r+0x2c>
 800966e:	1cc4      	adds	r4, r0, #3
 8009670:	f024 0403 	bic.w	r4, r4, #3
 8009674:	42a0      	cmp	r0, r4
 8009676:	d005      	beq.n	8009684 <_malloc_r+0xa8>
 8009678:	1a21      	subs	r1, r4, r0
 800967a:	4630      	mov	r0, r6
 800967c:	f000 f82e 	bl	80096dc <_sbrk_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d0cf      	beq.n	8009624 <_malloc_r+0x48>
 8009684:	6025      	str	r5, [r4, #0]
 8009686:	e7db      	b.n	8009640 <_malloc_r+0x64>
 8009688:	20004edc 	.word	0x20004edc
 800968c:	20004ee0 	.word	0x20004ee0

08009690 <_realloc_r>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	4607      	mov	r7, r0
 8009694:	4614      	mov	r4, r2
 8009696:	460e      	mov	r6, r1
 8009698:	b921      	cbnz	r1, 80096a4 <_realloc_r+0x14>
 800969a:	4611      	mov	r1, r2
 800969c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096a0:	f7ff bf9c 	b.w	80095dc <_malloc_r>
 80096a4:	b922      	cbnz	r2, 80096b0 <_realloc_r+0x20>
 80096a6:	f7ff ff4b 	bl	8009540 <_free_r>
 80096aa:	4625      	mov	r5, r4
 80096ac:	4628      	mov	r0, r5
 80096ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b0:	f000 f826 	bl	8009700 <_malloc_usable_size_r>
 80096b4:	42a0      	cmp	r0, r4
 80096b6:	d20f      	bcs.n	80096d8 <_realloc_r+0x48>
 80096b8:	4621      	mov	r1, r4
 80096ba:	4638      	mov	r0, r7
 80096bc:	f7ff ff8e 	bl	80095dc <_malloc_r>
 80096c0:	4605      	mov	r5, r0
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d0f2      	beq.n	80096ac <_realloc_r+0x1c>
 80096c6:	4631      	mov	r1, r6
 80096c8:	4622      	mov	r2, r4
 80096ca:	f7ff fc11 	bl	8008ef0 <memcpy>
 80096ce:	4631      	mov	r1, r6
 80096d0:	4638      	mov	r0, r7
 80096d2:	f7ff ff35 	bl	8009540 <_free_r>
 80096d6:	e7e9      	b.n	80096ac <_realloc_r+0x1c>
 80096d8:	4635      	mov	r5, r6
 80096da:	e7e7      	b.n	80096ac <_realloc_r+0x1c>

080096dc <_sbrk_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	4c06      	ldr	r4, [pc, #24]	; (80096f8 <_sbrk_r+0x1c>)
 80096e0:	2300      	movs	r3, #0
 80096e2:	4605      	mov	r5, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	f7f8 fe20 	bl	800232c <_sbrk>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_sbrk_r+0x1a>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_sbrk_r+0x1a>
 80096f4:	602b      	str	r3, [r5, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	200055c8 	.word	0x200055c8

080096fc <__malloc_lock>:
 80096fc:	4770      	bx	lr

080096fe <__malloc_unlock>:
 80096fe:	4770      	bx	lr

08009700 <_malloc_usable_size_r>:
 8009700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009704:	1f18      	subs	r0, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	bfbc      	itt	lt
 800970a:	580b      	ldrlt	r3, [r1, r0]
 800970c:	18c0      	addlt	r0, r0, r3
 800970e:	4770      	bx	lr

08009710 <_init>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr

0800971c <_fini>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	bf00      	nop
 8009720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009722:	bc08      	pop	{r3}
 8009724:	469e      	mov	lr, r3
 8009726:	4770      	bx	lr
