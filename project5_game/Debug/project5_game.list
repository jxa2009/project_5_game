
project5_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006158  08006158  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006160  08006160  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e4  20000010  08006178  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019f4  08006178  000219f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a649  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f6e  00000000  00000000  0003a689  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  0003d5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003eb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003d54  00000000  00000000  0003fef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011776  00000000  00000000  00043c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fcc22  00000000  00000000  000553ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151fdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f8  00000000  00000000  00152058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060a0 	.word	0x080060a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080060a0 	.word	0x080060a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fa55 	bl	8000992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f818 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8ac 	bl	8000648 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f87a 	bl	80005e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f003 f85c 	bl	80035b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <main+0x30>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x34>)
 80004fe:	f003 f8c1 	bl	8003684 <osThreadNew>
 8000502:	4602      	mov	r2, r0
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <main+0x38>)
 8000506:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f003 f886 	bl	8003618 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x2c>
 800050e:	bf00      	nop
 8000510:	080060ec 	.word	0x080060ec
 8000514:	08000691 	.word	0x08000691
 8000518:	200018ec 	.word	0x200018ec

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0b8      	sub	sp, #224	; 0xe0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fdaf 	bl	800608e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 fda1 	bl	800608e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054c:	2310      	movs	r3, #16
 800054e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055e:	2360      	movs	r3, #96	; 0x60
 8000560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000564:	2300      	movs	r3, #0
 8000566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fd34 	bl	8000fdc <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800057a:	f000 f8bd 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000584:	2300      	movs	r3, #0
 8000586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f900 	bl	80017a8 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ae:	f000 f8a3 	bl	80006f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ba:	463b      	mov	r3, r7
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fb29 	bl	8001c14 <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005c8:	f000 f896 	bl	80006f8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d0:	f000 fcae 	bl	8000f30 <HAL_PWREx_ControlVoltageScaling>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f88d 	bl	80006f8 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	37e0      	adds	r7, #224	; 0xe0
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <MX_USART2_UART_Init+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800062c:	f002 fa02 	bl	8002a34 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 f85f 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200018f0 	.word	0x200018f0
 8000644:	40004400 	.word	0x40004400

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_GPIO_Init+0x44>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <MX_GPIO_Init+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_GPIO_Init+0x44>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_GPIO_Init+0x44>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <MX_GPIO_Init+0x44>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_GPIO_Init+0x44>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b093      	sub	sp, #76	; 0x4c
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t buffer[64];
  /* Infinite loop */
  for(;;)
  {
	  sprintf(buffer,"Hello World\r\n");
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <StartDefaultTask+0x3c>)
 800069e:	461c      	mov	r4, r3
 80006a0:	4613      	mov	r3, r2
 80006a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a4:	c407      	stmia	r4!, {r0, r1, r2}
 80006a6:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fd8f 	bl	80001d0 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f107 0108 	add.w	r1, r7, #8
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <StartDefaultTask+0x40>)
 80006c0:	f002 fa06 	bl	8002ad0 <HAL_UART_Transmit>
    osDelay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f003 f883 	bl	80037d0 <osDelay>
	  sprintf(buffer,"Hello World\r\n");
 80006ca:	e7e5      	b.n	8000698 <StartDefaultTask+0x8>
 80006cc:	080060c4 	.word	0x080060c4
 80006d0:	200018f0 	.word	0x200018f0

080006d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d101      	bne.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006e6:	f000 f96d 	bl	80009c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40012c00 	.word	0x40012c00

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_MspInit+0x4c>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <HAL_MspInit+0x4c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6613      	str	r3, [r2, #96]	; 0x60
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_MspInit+0x4c>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_MspInit+0x4c>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x4c>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	210f      	movs	r1, #15
 8000742:	f06f 0001 	mvn.w	r0, #1
 8000746:	f000 fa13 	bl	8000b70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0x7c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d127      	bne.n	80007ca <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <HAL_UART_MspInit+0x80>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <HAL_UART_MspInit+0x80>)
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	6593      	str	r3, [r2, #88]	; 0x58
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_UART_MspInit+0x80>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_UART_MspInit+0x80>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_UART_MspInit+0x80>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_UART_MspInit+0x80>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007aa:	2360      	movs	r3, #96	; 0x60
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ba:	2307      	movs	r3, #7
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_UART_MspInit+0x84>)
 80007c6:	f000 f9fd 	bl	8000bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40004400 	.word	0x40004400
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000c00 	.word	0x48000c00

080007e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	2019      	movs	r0, #25
 80007f6:	f000 f9bb 	bl	8000b70 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80007fa:	2019      	movs	r0, #25
 80007fc:	f000 f9d4 	bl	8000ba8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <HAL_InitTick+0x9c>)
 8000802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000804:	4a1d      	ldr	r2, [pc, #116]	; (800087c <HAL_InitTick+0x9c>)
 8000806:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800080a:	6613      	str	r3, [r2, #96]	; 0x60
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_InitTick+0x9c>)
 800080e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000818:	f107 0210 	add.w	r2, r7, #16
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f001 f964 	bl	8001af0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000828:	f001 f94c 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 800082c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <HAL_InitTick+0xa0>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	0c9b      	lsrs	r3, r3, #18
 8000838:	3b01      	subs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_InitTick+0xa4>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <HAL_InitTick+0xa8>)
 8000840:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_InitTick+0xa4>)
 8000844:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000848:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_InitTick+0xa4>)
 800084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_InitTick+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_InitTick+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800085c:	4809      	ldr	r0, [pc, #36]	; (8000884 <HAL_InitTick+0xa4>)
 800085e:	f001 fe89 	bl	8002574 <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <HAL_InitTick+0xa4>)
 800086a:	f001 feb9 	bl	80025e0 <HAL_TIM_Base_Start_IT>
 800086e:	4603      	mov	r3, r0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	431bde83 	.word	0x431bde83
 8000884:	20001970 	.word	0x20001970
 8000888:	40012c00 	.word	0x40012c00

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008c6:	f001 feb5 	bl	8002634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20001970 	.word	0x20001970

080008d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <SystemInit+0x64>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <SystemInit+0x64>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <SystemInit+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <SystemInit+0x68>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <SystemInit+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <SystemInit+0x68>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <SystemInit+0x68>)
 8000900:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000904:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000908:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <SystemInit+0x68>)
 800090c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000910:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <SystemInit+0x68>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <SystemInit+0x68>)
 8000918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <SystemInit+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <SystemInit+0x64>)
 8000926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800092a:	609a      	str	r2, [r3, #8]
#endif
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00
 800093c:	40021000 	.word	0x40021000

08000940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000944:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000946:	e003      	b.n	8000950 <LoopCopyDataInit>

08000948 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800094a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800094c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800094e:	3104      	adds	r1, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000954:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000956:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000958:	d3f6      	bcc.n	8000948 <CopyDataInit>
	ldr	r2, =_sbss
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <LoopForever+0x12>)
	b	LoopFillZerobss
 800095c:	e002      	b.n	8000964 <LoopFillZerobss>

0800095e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800095e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000960:	f842 3b04 	str.w	r3, [r2], #4

08000964 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <LoopForever+0x16>)
	cmp	r2, r3
 8000966:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000968:	d3f9      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800096a:	f7ff ffb3 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f005 fb5f 	bl	8006030 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000972:	f7ff fdb5 	bl	80004e0 <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000978:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800097c:	08006168 	.word	0x08006168
	ldr	r0, =_sdata
 8000980:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000984:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000988:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800098c:	200019f4 	.word	0x200019f4

08000990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC1_2_IRQHandler>

08000992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f8dc 	bl	8000b5a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ff1c 	bl	80007e0 <HAL_InitTick>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	e001      	b.n	80009b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b4:	f7ff fea8 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x1c>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x20>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x1c>)
 80009d4:	6013      	str	r3, [r2, #0]
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	200019b0 	.word	0x200019b0
 80009e4:	20000008 	.word	0x20000008

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200019b0 	.word	0x200019b0

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db0b      	blt.n	8000a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 021f 	and.w	r2, r3, #31
 8000a7c:	4907      	ldr	r1, [pc, #28]	; (8000a9c <__NVIC_EnableIRQ+0x38>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	095b      	lsrs	r3, r3, #5
 8000a84:	2001      	movs	r0, #1
 8000a86:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	; 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff4c 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b82:	f7ff ff61 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	68b9      	ldr	r1, [r7, #8]
 8000b8c:	6978      	ldr	r0, [r7, #20]
 8000b8e:	f7ff ffb1 	bl	8000af4 <NVIC_EncodePriority>
 8000b92:	4602      	mov	r2, r0
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff80 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff54 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e17f      	b.n	8000ed4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 8171 	beq.w	8000ece <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d00b      	beq.n	8000c0c <HAL_GPIO_Init+0x48>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d007      	beq.n	8000c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c00:	2b11      	cmp	r3, #17
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b12      	cmp	r3, #18
 8000c0a:	d130      	bne.n	8000c6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68da      	ldr	r2, [r3, #12]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c42:	2201      	movs	r2, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	091b      	lsrs	r3, r3, #4
 8000c58:	f003 0201 	and.w	r2, r3, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d118      	bne.n	8000cac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c80:	2201      	movs	r2, #1
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	f003 0201 	and.w	r2, r3, #1
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x128>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b12      	cmp	r3, #18
 8000cea:	d123      	bne.n	8000d34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	6939      	ldr	r1, [r7, #16]
 8000d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0203 	and.w	r2, r3, #3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80ac 	beq.w	8000ece <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <HAL_GPIO_Init+0x32c>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a5d      	ldr	r2, [pc, #372]	; (8000ef0 <HAL_GPIO_Init+0x32c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b5b      	ldr	r3, [pc, #364]	; (8000ef0 <HAL_GPIO_Init+0x32c>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d8e:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000db8:	d025      	beq.n	8000e06 <HAL_GPIO_Init+0x242>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <HAL_GPIO_Init+0x334>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01f      	beq.n	8000e02 <HAL_GPIO_Init+0x23e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4d      	ldr	r2, [pc, #308]	; (8000efc <HAL_GPIO_Init+0x338>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x23a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <HAL_GPIO_Init+0x33c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x236>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <HAL_GPIO_Init+0x340>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x232>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4a      	ldr	r2, [pc, #296]	; (8000f08 <HAL_GPIO_Init+0x344>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x22e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a49      	ldr	r2, [pc, #292]	; (8000f0c <HAL_GPIO_Init+0x348>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x22a>
 8000dea:	2306      	movs	r3, #6
 8000dec:	e00c      	b.n	8000e08 <HAL_GPIO_Init+0x244>
 8000dee:	2307      	movs	r3, #7
 8000df0:	e00a      	b.n	8000e08 <HAL_GPIO_Init+0x244>
 8000df2:	2305      	movs	r3, #5
 8000df4:	e008      	b.n	8000e08 <HAL_GPIO_Init+0x244>
 8000df6:	2304      	movs	r3, #4
 8000df8:	e006      	b.n	8000e08 <HAL_GPIO_Init+0x244>
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e004      	b.n	8000e08 <HAL_GPIO_Init+0x244>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x244>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x244>
 8000e06:	2300      	movs	r3, #0
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	f002 0203 	and.w	r2, r2, #3
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	4093      	lsls	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e18:	4936      	ldr	r1, [pc, #216]	; (8000ef4 <HAL_GPIO_Init+0x330>)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	089b      	lsrs	r3, r3, #2
 8000e1e:	3302      	adds	r3, #2
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e4a:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e50:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e74:	4a26      	ldr	r2, [pc, #152]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec8:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <HAL_GPIO_Init+0x34c>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa22 f303 	lsr.w	r3, r2, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f47f ae78 	bne.w	8000bd4 <HAL_GPIO_Init+0x10>
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	48000800 	.word	0x48000800
 8000f00:	48000c00 	.word	0x48000c00
 8000f04:	48001000 	.word	0x48001000
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	48001800 	.word	0x48001800
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40007000 	.word	0x40007000

08000f30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f3e:	d130      	bne.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f40:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f4c:	d038      	beq.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f56:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2232      	movs	r2, #50	; 0x32
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6e:	0c9b      	lsrs	r3, r3, #18
 8000f70:	3301      	adds	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f74:	e002      	b.n	8000f7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f88:	d102      	bne.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f2      	bne.n	8000f76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9c:	d110      	bne.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e00f      	b.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fae:	d007      	beq.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb8:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40007000 	.word	0x40007000
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	431bde83 	.word	0x431bde83

08000fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e3d4      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fee:	4ba1      	ldr	r3, [pc, #644]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff8:	4b9e      	ldr	r3, [pc, #632]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80e4 	beq.w	80011d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <HAL_RCC_OscConfig+0x4a>
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b0c      	cmp	r3, #12
 800101a:	f040 808b 	bne.w	8001134 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b01      	cmp	r3, #1
 8001022:	f040 8087 	bne.w	8001134 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001026:	4b93      	ldr	r3, [pc, #588]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_RCC_OscConfig+0x62>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e3ac      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	4b8c      	ldr	r3, [pc, #560]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d004      	beq.n	8001058 <HAL_RCC_OscConfig+0x7c>
 800104e:	4b89      	ldr	r3, [pc, #548]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001056:	e005      	b.n	8001064 <HAL_RCC_OscConfig+0x88>
 8001058:	4b86      	ldr	r3, [pc, #536]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001064:	4293      	cmp	r3, r2
 8001066:	d223      	bcs.n	80010b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fd71 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e38d      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800107c:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7c      	ldr	r2, [pc, #496]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4977      	ldr	r1, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109a:	4b76      	ldr	r3, [pc, #472]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4972      	ldr	r1, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
 80010ae:	e025      	b.n	80010fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b0:	4b70      	ldr	r3, [pc, #448]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a6f      	ldr	r2, [pc, #444]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	496a      	ldr	r1, [pc, #424]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	4965      	ldr	r1, [pc, #404]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fd31 	bl	8001b54 <RCC_SetFlashLatencyFromMSIRange>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e34d      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010fc:	f000 fc36 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8001100:	4601      	mov	r1, r0
 8001102:	4b5c      	ldr	r3, [pc, #368]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	4a5a      	ldr	r2, [pc, #360]	; (8001278 <HAL_RCC_OscConfig+0x29c>)
 800110e:	5cd3      	ldrb	r3, [r2, r3]
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	fa21 f303 	lsr.w	r3, r1, r3
 8001118:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_RCC_OscConfig+0x2a0>)
 800111a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800111c:	4b58      	ldr	r3, [pc, #352]	; (8001280 <HAL_RCC_OscConfig+0x2a4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fb5d 	bl	80007e0 <HAL_InitTick>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d052      	beq.n	80011d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	e331      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d032      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800113c:	4b4d      	ldr	r3, [pc, #308]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc4e 	bl	80009e8 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001150:	f7ff fc4a 	bl	80009e8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e31a      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a40      	ldr	r2, [pc, #256]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	493b      	ldr	r1, [pc, #236]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	4936      	ldr	r1, [pc, #216]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
 80011a0:	e01a      	b.n	80011d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011a2:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc1b 	bl	80009e8 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc17 	bl	80009e8 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e2e7      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1f0      	bne.n	80011b6 <HAL_RCC_OscConfig+0x1da>
 80011d4:	e000      	b.n	80011d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d074      	beq.n	80012ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x21a>
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2b0c      	cmp	r3, #12
 80011ee:	d10e      	bne.n	800120e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d10b      	bne.n	800120e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d064      	beq.n	80012cc <HAL_RCC_OscConfig+0x2f0>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d160      	bne.n	80012cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e2c4      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x24a>
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e01d      	b.n	8001262 <HAL_RCC_OscConfig+0x286>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x26e>
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001236:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e00b      	b.n	8001262 <HAL_RCC_OscConfig+0x286>
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_RCC_OscConfig+0x298>)
 800125c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff fbbd 	bl	80009e8 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001270:	e011      	b.n	8001296 <HAL_RCC_OscConfig+0x2ba>
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	08006110 	.word	0x08006110
 800127c:	20000000 	.word	0x20000000
 8001280:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fbb0 	bl	80009e8 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e280      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001296:	4baf      	ldr	r3, [pc, #700]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x2a8>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fba0 	bl	80009e8 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fb9c 	bl	80009e8 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e26c      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012be:	4ba5      	ldr	r3, [pc, #660]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x2d0>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d060      	beq.n	800139c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d005      	beq.n	80012ec <HAL_RCC_OscConfig+0x310>
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d119      	bne.n	800131a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d116      	bne.n	800131a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012ec:	4b99      	ldr	r3, [pc, #612]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x328>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e249      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001304:	4b93      	ldr	r3, [pc, #588]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	061b      	lsls	r3, r3, #24
 8001312:	4990      	ldr	r1, [pc, #576]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001318:	e040      	b.n	800139c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d023      	beq.n	800136a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001322:	4b8c      	ldr	r3, [pc, #560]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a8b      	ldr	r2, [pc, #556]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fb5b 	bl	80009e8 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fb57 	bl	80009e8 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e227      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001348:	4b82      	ldr	r3, [pc, #520]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b7f      	ldr	r3, [pc, #508]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	497c      	ldr	r1, [pc, #496]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
 8001368:	e018      	b.n	800139c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a79      	ldr	r2, [pc, #484]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fb37 	bl	80009e8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fb33 	bl	80009e8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e203      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001390:	4b70      	ldr	r3, [pc, #448]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d03c      	beq.n	8001422 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d01c      	beq.n	80013ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80013b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b6:	4a67      	ldr	r2, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c0:	f7ff fb12 	bl	80009e8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff fb0e 	bl	80009e8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1de      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013da:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80013dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0ef      	beq.n	80013c8 <HAL_RCC_OscConfig+0x3ec>
 80013e8:	e01b      	b.n	8001422 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ea:	4b5a      	ldr	r3, [pc, #360]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80013ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fa:	f7ff faf5 	bl	80009e8 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff faf1 	bl	80009e8 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1c1      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001414:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1ef      	bne.n	8001402 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 80a6 	beq.w	800157c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001434:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10d      	bne.n	800145c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	4b44      	ldr	r3, [pc, #272]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	4a43      	ldr	r2, [pc, #268]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	6593      	str	r3, [r2, #88]	; 0x58
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001458:	2301      	movs	r3, #1
 800145a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145c:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_OscConfig+0x57c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d118      	bne.n	800149a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x57c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a3a      	ldr	r2, [pc, #232]	; (8001558 <HAL_RCC_OscConfig+0x57c>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001472:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001474:	f7ff fab8 	bl	80009e8 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147c:	f7ff fab4 	bl	80009e8 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e184      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_RCC_OscConfig+0x57c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d108      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4d8>
 80014a2:	4b2c      	ldr	r3, [pc, #176]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a8:	4a2a      	ldr	r2, [pc, #168]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b2:	e024      	b.n	80014fe <HAL_RCC_OscConfig+0x522>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d110      	bne.n	80014de <HAL_RCC_OscConfig+0x502>
 80014bc:	4b25      	ldr	r3, [pc, #148]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	4a24      	ldr	r2, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014cc:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014dc:	e00f      	b.n	80014fe <HAL_RCC_OscConfig+0x522>
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d016      	beq.n	8001534 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fa6f 	bl	80009e8 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fa6b 	bl	80009e8 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e139      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_OscConfig+0x578>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0ed      	beq.n	800150e <HAL_RCC_OscConfig+0x532>
 8001532:	e01a      	b.n	800156a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fa58 	bl	80009e8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153a:	e00f      	b.n	800155c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fa54 	bl	80009e8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d906      	bls.n	800155c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e122      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800155c:	4b90      	ldr	r3, [pc, #576]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1e8      	bne.n	800153c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156a:	7ffb      	ldrb	r3, [r7, #31]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001570:	4b8b      	ldr	r3, [pc, #556]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	4a8a      	ldr	r2, [pc, #552]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800157a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8108 	beq.w	8001796 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	2b02      	cmp	r3, #2
 800158c:	f040 80d0 	bne.w	8001730 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001590:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 0203 	and.w	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d130      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	3b01      	subs	r3, #1
 80015b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d127      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d11f      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015d0:	2a07      	cmp	r2, #7
 80015d2:	bf14      	ite	ne
 80015d4:	2201      	movne	r2, #1
 80015d6:	2200      	moveq	r2, #0
 80015d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015da:	4293      	cmp	r3, r2
 80015dc:	d113      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	3b01      	subs	r3, #1
 80015ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	085b      	lsrs	r3, r3, #1
 80015fe:	3b01      	subs	r3, #1
 8001600:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d06e      	beq.n	80016e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b0c      	cmp	r3, #12
 800160a:	d069      	beq.n	80016e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800160c:	4b64      	ldr	r3, [pc, #400]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001618:	4b61      	ldr	r3, [pc, #388]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b7      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001628:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800162e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001634:	f7ff f9d8 	bl	80009e8 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f9d4 	bl	80009e8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0a4      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164e:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165a:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	4b51      	ldr	r3, [pc, #324]	; (80017a4 <HAL_RCC_OscConfig+0x7c8>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800166a:	3a01      	subs	r2, #1
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	4311      	orrs	r1, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001674:	0212      	lsls	r2, r2, #8
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800167c:	0852      	lsrs	r2, r2, #1
 800167e:	3a01      	subs	r2, #1
 8001680:	0552      	lsls	r2, r2, #21
 8001682:	4311      	orrs	r1, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001688:	0852      	lsrs	r2, r2, #1
 800168a:	3a01      	subs	r2, #1
 800168c:	0652      	lsls	r2, r2, #25
 800168e:	4311      	orrs	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001694:	0912      	lsrs	r2, r2, #4
 8001696:	0452      	lsls	r2, r2, #17
 8001698:	430a      	orrs	r2, r1
 800169a:	4941      	ldr	r1, [pc, #260]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016b8:	f7ff f996 	bl	80009e8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f992 	bl	80009e8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e062      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016de:	e05a      	b.n	8001796 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e059      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d152      	bne.n	8001796 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016f0:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a2a      	ldr	r2, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001706:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001708:	f7ff f96e 	bl	80009e8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff f96a 	bl	80009e8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e03a      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x734>
 800172e:	e032      	b.n	8001796 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d02d      	beq.n	8001792 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800173c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001754:	f023 0303 	bic.w	r3, r3, #3
 8001758:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001760:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f93d 	bl	80009e8 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff f939 	bl	80009e8 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e009      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x7c4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x796>
 8001790:	e001      	b.n	8001796 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	f99d808c 	.word	0xf99d808c

080017a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0c8      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d910      	bls.n	80017ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b63      	ldr	r3, [pc, #396]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 0207 	bic.w	r2, r3, #7
 80017d2:	4961      	ldr	r1, [pc, #388]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b0      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d04c      	beq.n	8001892 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d107      	bne.n	8001810 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001800:	4b56      	ldr	r3, [pc, #344]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d121      	bne.n	8001850 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e09e      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d107      	bne.n	8001828 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001818:	4b50      	ldr	r3, [pc, #320]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d115      	bne.n	8001850 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e092      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e086      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	4b46      	ldr	r3, [pc, #280]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e07e      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001850:	4b42      	ldr	r3, [pc, #264]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 0203 	bic.w	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	493f      	ldr	r1, [pc, #252]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001862:	f7ff f8c1 	bl	80009e8 <HAL_GetTick>
 8001866:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001868:	e00a      	b.n	8001880 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186a:	f7ff f8bd 	bl	80009e8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e066      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 020c 	and.w	r2, r3, #12
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	429a      	cmp	r2, r3
 8001890:	d1eb      	bne.n	800186a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d008      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189e:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	492c      	ldr	r1, [pc, #176]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d210      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 0207 	bic.w	r2, r3, #7
 80018c6:	4924      	ldr	r1, [pc, #144]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_RCC_ClockConfig+0x1b0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e036      	b.n	800194e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4918      	ldr	r1, [pc, #96]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4910      	ldr	r1, [pc, #64]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800191e:	f000 f825 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_RCC_ClockConfig+0x1b4>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	fa21 f303 	lsr.w	r3, r1, r3
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe ff4c 	bl	80007e0 <HAL_InitTick>
 8001948:	4603      	mov	r3, r0
 800194a:	72fb      	strb	r3, [r7, #11]

  return status;
 800194c:	7afb      	ldrb	r3, [r7, #11]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40022000 	.word	0x40022000
 800195c:	40021000 	.word	0x40021000
 8001960:	08006110 	.word	0x08006110
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004

0800196c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x34>
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d121      	bne.n	80019de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d11e      	bne.n	80019de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e005      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019bc:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019c8:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10d      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	e004      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x110>)
 80019f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d133      	bne.n	8001a62 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0xa4>
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0xaa>
 8001a0e:	e005      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a12:	617b      	str	r3, [r7, #20]
      break;
 8001a14:	e005      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001a18:	617b      	str	r3, [r7, #20]
      break;
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	617b      	str	r3, [r7, #20]
      break;
 8001a20:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	091b      	lsrs	r3, r3, #4
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	fb02 f203 	mul.w	r2, r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0e5b      	lsrs	r3, r3, #25
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a62:	69bb      	ldr	r3, [r7, #24]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3724      	adds	r7, #36	; 0x24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08006128 	.word	0x08006128
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	007a1200 	.word	0x007a1200

08001a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a1b      	lsrs	r3, r3, #8
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	08006120 	.word	0x08006120

08001ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ac8:	f7ff ffda 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001acc:	4601      	mov	r1, r0
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	0adb      	lsrs	r3, r3, #11
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08006120 	.word	0x08006120

08001af0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_GetClockConfig+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0207 	and.w	r2, r3, #7
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40022000 	.word	0x40022000

08001b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b6c:	f7ff f9d2 	bl	8000f14 <HAL_PWREx_GetVoltageRange>
 8001b70:	6178      	str	r0, [r7, #20]
 8001b72:	e014      	b.n	8001b9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b8c:	f7ff f9c2 	bl	8000f14 <HAL_PWREx_GetVoltageRange>
 8001b90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba4:	d10b      	bne.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b80      	cmp	r3, #128	; 0x80
 8001baa:	d919      	bls.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2ba0      	cmp	r3, #160	; 0xa0
 8001bb0:	d902      	bls.n	8001bb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e013      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	e010      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b80      	cmp	r3, #128	; 0x80
 8001bc2:	d902      	bls.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	e00a      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	d102      	bne.n	8001bd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e004      	b.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b70      	cmp	r3, #112	; 0x70
 8001bda:	d101      	bne.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0207 	bic.w	r2, r3, #7
 8001be8:	4909      	ldr	r1, [pc, #36]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40022000 	.word	0x40022000

08001c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c20:	2300      	movs	r3, #0
 8001c22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d03f      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c38:	d01c      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c3e:	d802      	bhi.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001c44:	e01f      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001c46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c4a:	d003      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001c4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c50:	d01c      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001c52:	e018      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c54:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4a84      	ldr	r2, [pc, #528]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c60:	e015      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fab9 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c72:	e00c      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3320      	adds	r3, #32
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fba0 	bl	80023c0 <RCCEx_PLLSAI2_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c84:	e003      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	74fb      	strb	r3, [r7, #19]
      break;
 8001c8a:	e000      	b.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001c8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c8e:	7cfb      	ldrb	r3, [r7, #19]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10b      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c94:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ca2:	4972      	ldr	r1, [pc, #456]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001caa:	e001      	b.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cac:	7cfb      	ldrb	r3, [r7, #19]
 8001cae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d03f      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d01c      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001cc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cca:	d802      	bhi.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001cd0:	e01f      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cd6:	d003      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001cd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cdc:	d01c      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001cde:	e018      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a61      	ldr	r2, [pc, #388]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cec:	e015      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fa73 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cfe:	e00c      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3320      	adds	r3, #32
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fb5a 	bl	80023c0 <RCCEx_PLLSAI2_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d10:	e003      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	74fb      	strb	r3, [r7, #19]
      break;
 8001d16:	e000      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d20:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d2e:	494f      	ldr	r1, [pc, #316]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d36:	e001      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a0 	beq.w	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a40      	ldr	r2, [pc, #256]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3a      	ldr	r2, [pc, #232]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe fe2c 	bl	80009e8 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d92:	e009      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7fe fe28 	bl	80009e8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d902      	bls.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	74fb      	strb	r3, [r7, #19]
        break;
 8001da6:	e005      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ef      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d15c      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01f      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d019      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7fe fde7 	bl	80009e8 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe fde3 	bl	80009e8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d902      	bls.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	74fb      	strb	r3, [r7, #19]
            break;
 8001e34:	e006      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ec      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e5a:	4904      	ldr	r1, [pc, #16]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e62:	e009      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	74bb      	strb	r3, [r7, #18]
 8001e68:	e006      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e78:	7c7b      	ldrb	r3, [r7, #17]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a9d      	ldr	r2, [pc, #628]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e96:	4b98      	ldr	r3, [pc, #608]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	f023 0203 	bic.w	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	4994      	ldr	r1, [pc, #592]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb8:	4b8f      	ldr	r3, [pc, #572]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f023 020c 	bic.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	498c      	ldr	r1, [pc, #560]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eda:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	4983      	ldr	r1, [pc, #524]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efc:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	497b      	ldr	r1, [pc, #492]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	4972      	ldr	r1, [pc, #456]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	496a      	ldr	r1, [pc, #424]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	4961      	ldr	r1, [pc, #388]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	4959      	ldr	r1, [pc, #356]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fa6:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb4:	4950      	ldr	r1, [pc, #320]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	4948      	ldr	r1, [pc, #288]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	493f      	ldr	r1, [pc, #252]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d028      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800200c:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201a:	4937      	ldr	r1, [pc, #220]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202a:	d106      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a31      	ldr	r2, [pc, #196]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002036:	60d3      	str	r3, [r2, #12]
 8002038:	e011      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002042:	d10c      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f8c8 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d028      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	491f      	ldr	r1, [pc, #124]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002088:	d106      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4a1a      	ldr	r2, [pc, #104]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002094:	60d3      	str	r3, [r2, #12]
 8002096:	e011      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020a0:	d10c      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2101      	movs	r1, #1
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f899 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 80020ae:	4603      	mov	r3, r0
 80020b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d02b      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e6:	d109      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a02      	ldr	r2, [pc, #8]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f2:	60d3      	str	r3, [r2, #12]
 80020f4:	e014      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002104:	d10c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f867 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02f      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800213a:	4928      	ldr	r1, [pc, #160]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800214a:	d10d      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f844 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d014      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	74bb      	strb	r3, [r7, #18]
 8002166:	e011      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800216c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002170:	d10c      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3320      	adds	r3, #32
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f921 	bl	80023c0 <RCCEx_PLLSAI2_Config>
 800217e:	4603      	mov	r3, r0
 8002180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ca:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000

080021e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d018      	beq.n	800222c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021fa:	4b70      	ldr	r3, [pc, #448]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d10d      	bne.n	8002226 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
       ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002212:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
       ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d044      	beq.n	80022b0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e041      	b.n	80022b0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d00c      	beq.n	800224e <RCCEx_PLLSAI1_Config+0x6e>
 8002234:	2b03      	cmp	r3, #3
 8002236:	d013      	beq.n	8002260 <RCCEx_PLLSAI1_Config+0x80>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d120      	bne.n	800227e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800223c:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11d      	bne.n	8002284 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224c:	e01a      	b.n	8002284 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800224e:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225e:	e013      	b.n	8002288 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002260:	4b56      	ldr	r3, [pc, #344]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800227c:	e006      	b.n	800228c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      break;
 8002282:	e004      	b.n	800228e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800228c:	bf00      	nop
    }

    if(status == HAL_OK)
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002294:	4b49      	ldr	r3, [pc, #292]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6819      	ldr	r1, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	430b      	orrs	r3, r1
 80022aa:	4944      	ldr	r1, [pc, #272]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d17d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a40      	ldr	r2, [pc, #256]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80022bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c2:	f7fe fb91 	bl	80009e8 <HAL_GetTick>
 80022c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022c8:	e009      	b.n	80022de <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022ca:	f7fe fb8d 	bl	80009e8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d902      	bls.n	80022de <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	73fb      	strb	r3, [r7, #15]
        break;
 80022dc:	e005      	b.n	80022ea <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ef      	bne.n	80022ca <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d160      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d111      	bne.n	800231a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f6:	4b31      	ldr	r3, [pc, #196]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80022fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6892      	ldr	r2, [r2, #8]
 8002306:	0211      	lsls	r1, r2, #8
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68d2      	ldr	r2, [r2, #12]
 800230c:	0912      	lsrs	r2, r2, #4
 800230e:	0452      	lsls	r2, r2, #17
 8002310:	430a      	orrs	r2, r1
 8002312:	492a      	ldr	r1, [pc, #168]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	610b      	str	r3, [r1, #16]
 8002318:	e027      	b.n	800236a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d112      	bne.n	8002346 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002328:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6892      	ldr	r2, [r2, #8]
 8002330:	0211      	lsls	r1, r2, #8
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6912      	ldr	r2, [r2, #16]
 8002336:	0852      	lsrs	r2, r2, #1
 8002338:	3a01      	subs	r2, #1
 800233a:	0552      	lsls	r2, r2, #21
 800233c:	430a      	orrs	r2, r1
 800233e:	491f      	ldr	r1, [pc, #124]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	610b      	str	r3, [r1, #16]
 8002344:	e011      	b.n	800236a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800234e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6892      	ldr	r2, [r2, #8]
 8002356:	0211      	lsls	r1, r2, #8
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6952      	ldr	r2, [r2, #20]
 800235c:	0852      	lsrs	r2, r2, #1
 800235e:	3a01      	subs	r2, #1
 8002360:	0652      	lsls	r2, r2, #25
 8002362:	430a      	orrs	r2, r1
 8002364:	4915      	ldr	r1, [pc, #84]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002374:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe fb37 	bl	80009e8 <HAL_GetTick>
 800237a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800237c:	e009      	b.n	8002392 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800237e:	f7fe fb33 	bl	80009e8 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d902      	bls.n	8002392 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	73fb      	strb	r3, [r7, #15]
          break;
 8002390:	e005      	b.n	800239e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ef      	beq.n	800237e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d106      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4903      	ldr	r1, [pc, #12]	; (80023bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023ce:	4b68      	ldr	r3, [pc, #416]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d018      	beq.n	800240c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023da:	4b65      	ldr	r3, [pc, #404]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d10d      	bne.n	8002406 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
       ||
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
       ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d044      	beq.n	8002490 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e041      	b.n	8002490 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d00c      	beq.n	800242e <RCCEx_PLLSAI2_Config+0x6e>
 8002414:	2b03      	cmp	r3, #3
 8002416:	d013      	beq.n	8002440 <RCCEx_PLLSAI2_Config+0x80>
 8002418:	2b01      	cmp	r3, #1
 800241a:	d120      	bne.n	800245e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800241c:	4b54      	ldr	r3, [pc, #336]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d11d      	bne.n	8002464 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242c:	e01a      	b.n	8002464 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800242e:	4b50      	ldr	r3, [pc, #320]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243e:	e013      	b.n	8002468 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10f      	bne.n	800246c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800244c:	4b48      	ldr	r3, [pc, #288]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800245c:	e006      	b.n	800246c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
      break;
 8002462:	e004      	b.n	800246e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002464:	bf00      	nop
 8002466:	e002      	b.n	800246e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002468:	bf00      	nop
 800246a:	e000      	b.n	800246e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800246c:	bf00      	nop
    }

    if(status == HAL_OK)
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002474:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	3b01      	subs	r3, #1
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	430b      	orrs	r3, r1
 800248a:	4939      	ldr	r1, [pc, #228]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d167      	bne.n	8002566 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a35      	ldr	r2, [pc, #212]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a2:	f7fe faa1 	bl	80009e8 <HAL_GetTick>
 80024a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024a8:	e009      	b.n	80024be <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024aa:	f7fe fa9d 	bl	80009e8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d902      	bls.n	80024be <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	73fb      	strb	r3, [r7, #15]
        break;
 80024bc:	e005      	b.n	80024ca <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ef      	bne.n	80024aa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d14a      	bne.n	8002566 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d111      	bne.n	80024fa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6892      	ldr	r2, [r2, #8]
 80024e6:	0211      	lsls	r1, r2, #8
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	0912      	lsrs	r2, r2, #4
 80024ee:	0452      	lsls	r2, r2, #17
 80024f0:	430a      	orrs	r2, r1
 80024f2:	491f      	ldr	r1, [pc, #124]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	614b      	str	r3, [r1, #20]
 80024f8:	e011      	b.n	800251e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002502:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6892      	ldr	r2, [r2, #8]
 800250a:	0211      	lsls	r1, r2, #8
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6912      	ldr	r2, [r2, #16]
 8002510:	0852      	lsrs	r2, r2, #1
 8002512:	3a01      	subs	r2, #1
 8002514:	0652      	lsls	r2, r2, #25
 8002516:	430a      	orrs	r2, r1
 8002518:	4915      	ldr	r1, [pc, #84]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7fe fa5d 	bl	80009e8 <HAL_GetTick>
 800252e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002530:	e009      	b.n	8002546 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002532:	f7fe fa59 	bl	80009e8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d902      	bls.n	8002546 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	73fb      	strb	r3, [r7, #15]
          break;
 8002544:	e005      	b.n	8002552 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0ef      	beq.n	8002532 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	4903      	ldr	r1, [pc, #12]	; (8002570 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e01d      	b.n	80025c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f815 	bl	80025ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3304      	adds	r3, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f000 f986 	bl	80028c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <HAL_TIM_Base_Start_IT+0x50>)
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d00b      	beq.n	8002622 <HAL_TIM_Base_Start_IT+0x42>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d007      	beq.n	8002622 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	00010007 	.word	0x00010007

08002634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b02      	cmp	r3, #2
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b02      	cmp	r3, #2
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0202 	mvn.w	r2, #2
 8002660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f905 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8f7 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f908 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b04      	cmp	r3, #4
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0204 	mvn.w	r2, #4
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8db 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8cd 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f8de 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d122      	bne.n	8002738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d11b      	bne.n	8002738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0208 	mvn.w	r2, #8
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8b1 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f8a3 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f8b4 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	d122      	bne.n	800278c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b10      	cmp	r3, #16
 8002752:	d11b      	bne.n	800278c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0210 	mvn.w	r2, #16
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2208      	movs	r2, #8
 8002762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f887 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 8002778:	e005      	b.n	8002786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f879 	bl	8002872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f88a 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10e      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0201 	mvn.w	r2, #1
 80027b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fd ff8e 	bl	80006d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d10e      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d107      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f914 	bl	8002a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f2:	d10e      	bne.n	8002812 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b80      	cmp	r3, #128	; 0x80
 8002800:	d107      	bne.n	8002812 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800280a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f907 	bl	8002a20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d10e      	bne.n	800283e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d107      	bne.n	800283e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f838 	bl	80028ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b20      	cmp	r3, #32
 800284a:	d10e      	bne.n	800286a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b20      	cmp	r3, #32
 8002858:	d107      	bne.n	800286a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f06f 0220 	mvn.w	r2, #32
 8002862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8c7 	bl	80029f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a40      	ldr	r2, [pc, #256]	; (80029d8 <TIM_Base_SetConfig+0x114>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d00f      	beq.n	8002904 <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3d      	ldr	r2, [pc, #244]	; (80029dc <TIM_Base_SetConfig+0x118>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00b      	beq.n	8002904 <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3c      	ldr	r2, [pc, #240]	; (80029e0 <TIM_Base_SetConfig+0x11c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d007      	beq.n	8002904 <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3b      	ldr	r2, [pc, #236]	; (80029e4 <TIM_Base_SetConfig+0x120>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_Base_SetConfig+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3a      	ldr	r2, [pc, #232]	; (80029e8 <TIM_Base_SetConfig+0x124>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d108      	bne.n	8002916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2f      	ldr	r2, [pc, #188]	; (80029d8 <TIM_Base_SetConfig+0x114>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d01b      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <TIM_Base_SetConfig+0x118>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d017      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <TIM_Base_SetConfig+0x11c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <TIM_Base_SetConfig+0x120>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <TIM_Base_SetConfig+0x124>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a28      	ldr	r2, [pc, #160]	; (80029ec <TIM_Base_SetConfig+0x128>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <TIM_Base_SetConfig+0x12c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0x9a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <TIM_Base_SetConfig+0x130>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <TIM_Base_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00f      	beq.n	80029bc <TIM_Base_SetConfig+0xf8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <TIM_Base_SetConfig+0x124>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00b      	beq.n	80029bc <TIM_Base_SetConfig+0xf8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a11      	ldr	r2, [pc, #68]	; (80029ec <TIM_Base_SetConfig+0x128>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <TIM_Base_SetConfig+0xf8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <TIM_Base_SetConfig+0x12c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <TIM_Base_SetConfig+0xf8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <TIM_Base_SetConfig+0x130>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d103      	bne.n	80029c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	615a      	str	r2, [r3, #20]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800
 80029e4:	40000c00 	.word	0x40000c00
 80029e8:	40013400 	.word	0x40013400
 80029ec:	40014000 	.word	0x40014000
 80029f0:	40014400 	.word	0x40014400
 80029f4:	40014800 	.word	0x40014800

080029f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e040      	b.n	8002ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fd fe7e 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8c0 	bl	8002bf8 <UART_SetConfig>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e022      	b.n	8002ac8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fc26 	bl	80032dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fcad 	bl	8003420 <UART_CheckIdleState>
 8002ac6:	4603      	mov	r3, r0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	; 0x28
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	f040 8081 	bne.w	8002bec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <HAL_UART_Transmit+0x26>
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e079      	b.n	8002bee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_UART_Transmit+0x38>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e072      	b.n	8002bee <HAL_UART_Transmit+0x11e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2221      	movs	r2, #33	; 0x21
 8002b1a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fd ff64 	bl	80009e8 <HAL_GetTick>
 8002b20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	d108      	bne.n	8002b4e <HAL_UART_Transmit+0x7e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e003      	b.n	8002b56 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002b5e:	e02d      	b.n	8002bbc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fc9d 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e039      	b.n	8002bee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	881a      	ldrh	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3302      	adds	r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e008      	b.n	8002baa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1cb      	bne.n	8002b60 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2140      	movs	r1, #64	; 0x40
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fc69 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e005      	b.n	8002bee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002bfc:	b08a      	sub	sp, #40	; 0x28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4bb8      	ldr	r3, [pc, #736]	; (8002f10 <UART_SetConfig+0x318>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c36:	430b      	orrs	r3, r1
 8002c38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4aae      	ldr	r2, [pc, #696]	; (8002f14 <UART_SetConfig+0x31c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c66:	4313      	orrs	r3, r2
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4aa5      	ldr	r2, [pc, #660]	; (8002f18 <UART_SetConfig+0x320>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d126      	bne.n	8002cd6 <UART_SetConfig+0xde>
 8002c88:	4ba4      	ldr	r3, [pc, #656]	; (8002f1c <UART_SetConfig+0x324>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d81a      	bhi.n	8002ccc <UART_SetConfig+0xd4>
 8002c96:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <UART_SetConfig+0xa4>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cbd 	.word	0x08002cbd
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cc5 	.word	0x08002cc5
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb2:	e105      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cba:	e101      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc2:	e0fd      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cca:	e0f9      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd2:	bf00      	nop
 8002cd4:	e0f4      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a91      	ldr	r2, [pc, #580]	; (8002f20 <UART_SetConfig+0x328>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d138      	bne.n	8002d52 <UART_SetConfig+0x15a>
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	; (8002f1c <UART_SetConfig+0x324>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d82c      	bhi.n	8002d48 <UART_SetConfig+0x150>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <UART_SetConfig+0xfc>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002d49 	.word	0x08002d49
 8002d00:	08002d49 	.word	0x08002d49
 8002d04:	08002d39 	.word	0x08002d39
 8002d08:	08002d49 	.word	0x08002d49
 8002d0c:	08002d49 	.word	0x08002d49
 8002d10:	08002d49 	.word	0x08002d49
 8002d14:	08002d31 	.word	0x08002d31
 8002d18:	08002d49 	.word	0x08002d49
 8002d1c:	08002d49 	.word	0x08002d49
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	08002d41 	.word	0x08002d41
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2e:	e0c7      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d30:	2302      	movs	r3, #2
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d36:	e0c3      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d3e:	e0bf      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d40:	2308      	movs	r3, #8
 8002d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d46:	e0bb      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d4e:	bf00      	nop
 8002d50:	e0b6      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a73      	ldr	r2, [pc, #460]	; (8002f24 <UART_SetConfig+0x32c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d125      	bne.n	8002da8 <UART_SetConfig+0x1b0>
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <UART_SetConfig+0x324>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d011      	beq.n	8002d8e <UART_SetConfig+0x196>
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d802      	bhi.n	8002d74 <UART_SetConfig+0x17c>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <UART_SetConfig+0x186>
 8002d72:	e014      	b.n	8002d9e <UART_SetConfig+0x1a6>
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d006      	beq.n	8002d86 <UART_SetConfig+0x18e>
 8002d78:	2b30      	cmp	r3, #48	; 0x30
 8002d7a:	d00c      	beq.n	8002d96 <UART_SetConfig+0x19e>
 8002d7c:	e00f      	b.n	8002d9e <UART_SetConfig+0x1a6>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d84:	e09c      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d86:	2302      	movs	r3, #2
 8002d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8c:	e098      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d8e:	2304      	movs	r3, #4
 8002d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d94:	e094      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d96:	2308      	movs	r3, #8
 8002d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9c:	e090      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002d9e:	2310      	movs	r3, #16
 8002da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002da4:	bf00      	nop
 8002da6:	e08b      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <UART_SetConfig+0x330>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d125      	bne.n	8002dfe <UART_SetConfig+0x206>
 8002db2:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <UART_SetConfig+0x324>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d011      	beq.n	8002de4 <UART_SetConfig+0x1ec>
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d802      	bhi.n	8002dca <UART_SetConfig+0x1d2>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <UART_SetConfig+0x1dc>
 8002dc8:	e014      	b.n	8002df4 <UART_SetConfig+0x1fc>
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d006      	beq.n	8002ddc <UART_SetConfig+0x1e4>
 8002dce:	2bc0      	cmp	r3, #192	; 0xc0
 8002dd0:	d00c      	beq.n	8002dec <UART_SetConfig+0x1f4>
 8002dd2:	e00f      	b.n	8002df4 <UART_SetConfig+0x1fc>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dda:	e071      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de2:	e06d      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002de4:	2304      	movs	r3, #4
 8002de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dea:	e069      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002dec:	2308      	movs	r3, #8
 8002dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002df2:	e065      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002df4:	2310      	movs	r3, #16
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dfa:	bf00      	nop
 8002dfc:	e060      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <UART_SetConfig+0x334>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d129      	bne.n	8002e5c <UART_SetConfig+0x264>
 8002e08:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <UART_SetConfig+0x324>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e16:	d014      	beq.n	8002e42 <UART_SetConfig+0x24a>
 8002e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1c:	d802      	bhi.n	8002e24 <UART_SetConfig+0x22c>
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <UART_SetConfig+0x23a>
 8002e22:	e016      	b.n	8002e52 <UART_SetConfig+0x25a>
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e28:	d007      	beq.n	8002e3a <UART_SetConfig+0x242>
 8002e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e2e:	d00c      	beq.n	8002e4a <UART_SetConfig+0x252>
 8002e30:	e00f      	b.n	8002e52 <UART_SetConfig+0x25a>
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e38:	e042      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e40:	e03e      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002e42:	2304      	movs	r3, #4
 8002e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e48:	e03a      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e50:	e036      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002e52:	2310      	movs	r3, #16
 8002e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e58:	bf00      	nop
 8002e5a:	e031      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2c      	ldr	r2, [pc, #176]	; (8002f14 <UART_SetConfig+0x31c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d129      	bne.n	8002eba <UART_SetConfig+0x2c2>
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <UART_SetConfig+0x324>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d014      	beq.n	8002ea0 <UART_SetConfig+0x2a8>
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7a:	d802      	bhi.n	8002e82 <UART_SetConfig+0x28a>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <UART_SetConfig+0x298>
 8002e80:	e016      	b.n	8002eb0 <UART_SetConfig+0x2b8>
 8002e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e86:	d007      	beq.n	8002e98 <UART_SetConfig+0x2a0>
 8002e88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e8c:	d00c      	beq.n	8002ea8 <UART_SetConfig+0x2b0>
 8002e8e:	e00f      	b.n	8002eb0 <UART_SetConfig+0x2b8>
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e96:	e013      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9e:	e00f      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea6:	e00b      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eae:	e007      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002eb0:	2310      	movs	r3, #16
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb6:	bf00      	nop
 8002eb8:	e002      	b.n	8002ec0 <UART_SetConfig+0x2c8>
 8002eba:	2310      	movs	r3, #16
 8002ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <UART_SetConfig+0x31c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	f040 80fe 	bne.w	80030c8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d837      	bhi.n	8002f44 <UART_SetConfig+0x34c>
 8002ed4:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <UART_SetConfig+0x2e4>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002f45 	.word	0x08002f45
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f45 	.word	0x08002f45
 8002eec:	08002f35 	.word	0x08002f35
 8002ef0:	08002f45 	.word	0x08002f45
 8002ef4:	08002f45 	.word	0x08002f45
 8002ef8:	08002f45 	.word	0x08002f45
 8002efc:	08002f3d 	.word	0x08002f3d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7fe fdca 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8002f04:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f06:	e020      	b.n	8002f4a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <UART_SetConfig+0x338>)
 8002f0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f0c:	e01d      	b.n	8002f4a <UART_SetConfig+0x352>
 8002f0e:	bf00      	nop
 8002f10:	efff69f3 	.word	0xefff69f3
 8002f14:	40008000 	.word	0x40008000
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40004400 	.word	0x40004400
 8002f24:	40004800 	.word	0x40004800
 8002f28:	40004c00 	.word	0x40004c00
 8002f2c:	40005000 	.word	0x40005000
 8002f30:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002f34:	f7fe fd1a 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8002f38:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f3a:	e006      	b.n	8002f4a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f42:	e002      	b.n	8002f4a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	76fb      	strb	r3, [r7, #27]
        break;
 8002f48:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 81b9 	beq.w	80032c4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d305      	bcc.n	8002f6e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d902      	bls.n	8002f74 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	76fb      	strb	r3, [r7, #27]
 8002f72:	e1a7      	b.n	80032c4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8002f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 8092 	bhi.w	80030a2 <UART_SetConfig+0x4aa>
 8002f7e:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <UART_SetConfig+0x38c>)
 8002f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f84:	08002fa9 	.word	0x08002fa9
 8002f88:	080030a3 	.word	0x080030a3
 8002f8c:	08002ff7 	.word	0x08002ff7
 8002f90:	080030a3 	.word	0x080030a3
 8002f94:	0800302b 	.word	0x0800302b
 8002f98:	080030a3 	.word	0x080030a3
 8002f9c:	080030a3 	.word	0x080030a3
 8002fa0:	080030a3 	.word	0x080030a3
 8002fa4:	08003079 	.word	0x08003079
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f7fe fd76 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8002fac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	f04f 0400 	mov.w	r4, #0
 8002fbe:	0214      	lsls	r4, r2, #8
 8002fc0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002fc4:	020b      	lsls	r3, r1, #8
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6852      	ldr	r2, [r2, #4]
 8002fca:	0852      	lsrs	r2, r2, #1
 8002fcc:	4611      	mov	r1, r2
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	eb13 0b01 	adds.w	fp, r3, r1
 8002fd6:	eb44 0c02 	adc.w	ip, r4, r2
 8002fda:	4658      	mov	r0, fp
 8002fdc:	4661      	mov	r1, ip
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	f7fd f8f9 	bl	80001e0 <__aeabi_uldivmod>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ff4:	e058      	b.n	80030a8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	f04f 0400 	mov.w	r4, #0
 8003000:	49ae      	ldr	r1, [pc, #696]	; (80032bc <UART_SetConfig+0x6c4>)
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	eb13 0b01 	adds.w	fp, r3, r1
 800300a:	eb44 0c02 	adc.w	ip, r4, r2
 800300e:	4658      	mov	r0, fp
 8003010:	4661      	mov	r1, ip
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f04f 0400 	mov.w	r4, #0
 800301a:	461a      	mov	r2, r3
 800301c:	4623      	mov	r3, r4
 800301e:	f7fd f8df 	bl	80001e0 <__aeabi_uldivmod>
 8003022:	4603      	mov	r3, r0
 8003024:	460c      	mov	r4, r1
 8003026:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003028:	e03e      	b.n	80030a8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800302a:	f7fe fc9f 	bl	800196c <HAL_RCC_GetSysClockFreq>
 800302e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	0214      	lsls	r4, r2, #8
 8003042:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003046:	020b      	lsls	r3, r1, #8
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6852      	ldr	r2, [r2, #4]
 800304c:	0852      	lsrs	r2, r2, #1
 800304e:	4611      	mov	r1, r2
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	eb13 0b01 	adds.w	fp, r3, r1
 8003058:	eb44 0c02 	adc.w	ip, r4, r2
 800305c:	4658      	mov	r0, fp
 800305e:	4661      	mov	r1, ip
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f04f 0400 	mov.w	r4, #0
 8003068:	461a      	mov	r2, r3
 800306a:	4623      	mov	r3, r4
 800306c:	f7fd f8b8 	bl	80001e0 <__aeabi_uldivmod>
 8003070:	4603      	mov	r3, r0
 8003072:	460c      	mov	r4, r1
 8003074:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003076:	e017      	b.n	80030a8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	f04f 0400 	mov.w	r4, #0
 8003082:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003086:	f144 0100 	adc.w	r1, r4, #0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f04f 0400 	mov.w	r4, #0
 8003092:	461a      	mov	r2, r3
 8003094:	4623      	mov	r3, r4
 8003096:	f7fd f8a3 	bl	80001e0 <__aeabi_uldivmod>
 800309a:	4603      	mov	r3, r0
 800309c:	460c      	mov	r4, r1
 800309e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80030a0:	e002      	b.n	80030a8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	76fb      	strb	r3, [r7, #27]
            break;
 80030a6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ae:	d308      	bcc.n	80030c2 <UART_SetConfig+0x4ca>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b6:	d204      	bcs.n	80030c2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	e100      	b.n	80032c4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	76fb      	strb	r3, [r7, #27]
 80030c6:	e0fd      	b.n	80032c4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	f040 8084 	bne.w	80031dc <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80030d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d85f      	bhi.n	800319c <UART_SetConfig+0x5a4>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <UART_SetConfig+0x4ec>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	08003109 	.word	0x08003109
 80030e8:	08003129 	.word	0x08003129
 80030ec:	08003149 	.word	0x08003149
 80030f0:	0800319d 	.word	0x0800319d
 80030f4:	08003165 	.word	0x08003165
 80030f8:	0800319d 	.word	0x0800319d
 80030fc:	0800319d 	.word	0x0800319d
 8003100:	0800319d 	.word	0x0800319d
 8003104:	08003185 	.word	0x08003185
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7fe fcc6 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 800310c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	005a      	lsls	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003122:	b29b      	uxth	r3, r3
 8003124:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003126:	e03c      	b.n	80031a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7fe fccc 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 800312c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	005a      	lsls	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	441a      	add	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	b29b      	uxth	r3, r3
 8003144:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003146:	e02c      	b.n	80031a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003152:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6852      	ldr	r2, [r2, #4]
 800315a:	fbb3 f3f2 	udiv	r3, r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003162:	e01e      	b.n	80031a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003164:	f7fe fc02 	bl	800196c <HAL_RCC_GetSysClockFreq>
 8003168:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	005a      	lsls	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	b29b      	uxth	r3, r3
 8003180:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003182:	e00e      	b.n	80031a2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	b29b      	uxth	r3, r3
 8003198:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800319a:	e002      	b.n	80031a2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	76fb      	strb	r3, [r7, #27]
        break;
 80031a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	2b0f      	cmp	r3, #15
 80031a6:	d916      	bls.n	80031d6 <UART_SetConfig+0x5de>
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ae:	d212      	bcs.n	80031d6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f023 030f 	bic.w	r3, r3, #15
 80031b8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	89fb      	ldrh	r3, [r7, #14]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	89fa      	ldrh	r2, [r7, #14]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	e076      	b.n	80032c4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e073      	b.n	80032c4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80031dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d85c      	bhi.n	800329e <UART_SetConfig+0x6a6>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x5f4>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003211 	.word	0x08003211
 80031f0:	0800322f 	.word	0x0800322f
 80031f4:	0800324d 	.word	0x0800324d
 80031f8:	0800329f 	.word	0x0800329f
 80031fc:	08003269 	.word	0x08003269
 8003200:	0800329f 	.word	0x0800329f
 8003204:	0800329f 	.word	0x0800329f
 8003208:	0800329f 	.word	0x0800329f
 800320c:	08003287 	.word	0x08003287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7fe fc42 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8003214:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	085a      	lsrs	r2, r3, #1
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	b29b      	uxth	r3, r3
 800322a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800322c:	e03a      	b.n	80032a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800322e:	f7fe fc49 	bl	8001ac4 <HAL_RCC_GetPCLK2Freq>
 8003232:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	085a      	lsrs	r2, r3, #1
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	b29b      	uxth	r3, r3
 8003248:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800324a:	e02b      	b.n	80032a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003256:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6852      	ldr	r2, [r2, #4]
 800325e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003266:	e01d      	b.n	80032a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003268:	f7fe fb80 	bl	800196c <HAL_RCC_GetSysClockFreq>
 800326c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085a      	lsrs	r2, r3, #1
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	441a      	add	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	b29b      	uxth	r3, r3
 8003282:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003284:	e00e      	b.n	80032a4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	b29b      	uxth	r3, r3
 800329a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800329c:	e002      	b.n	80032a4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	76fb      	strb	r3, [r7, #27]
        break;
 80032a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d90a      	bls.n	80032c0 <UART_SetConfig+0x6c8>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d206      	bcs.n	80032c0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	e003      	b.n	80032c4 <UART_SetConfig+0x6cc>
 80032bc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80032d0:	7efb      	ldrb	r3, [r7, #27]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080032dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01a      	beq.n	80033f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033da:	d10a      	bne.n	80033f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af02      	add	r7, sp, #8
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800342e:	f7fd fadb 	bl	80009e8 <HAL_GetTick>
 8003432:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b08      	cmp	r3, #8
 8003440:	d10e      	bne.n	8003460 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f82a 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e020      	b.n	80034a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d10e      	bne.n	800348c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800346e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f814 	bl	80034aa <UART_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e00a      	b.n	80034a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ba:	e05d      	b.n	8003578 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c2:	d059      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c4:	f7fd fa90 	bl	80009e8 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d302      	bcc.n	80034da <UART_WaitOnFlagUntilTimeout+0x30>
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11b      	bne.n	8003512 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e042      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02b      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352e:	d123      	bne.n	8003578 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003538:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003548:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e00f      	b.n	8003598 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d092      	beq.n	80034bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035b6:	f3ef 8305 	mrs	r3, IPSR
 80035ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80035bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c2:	f3ef 8310 	mrs	r3, PRIMASK
 80035c6:	607b      	str	r3, [r7, #4]
  return(result);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035ce:	f3ef 8311 	mrs	r3, BASEPRI
 80035d2:	603b      	str	r3, [r7, #0]
  return(result);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <osKernelInitialize+0x3a>
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <osKernelInitialize+0x64>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d103      	bne.n	80035ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80035e2:	f06f 0305 	mvn.w	r3, #5
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e00c      	b.n	8003604 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <osKernelInitialize+0x64>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <osKernelInitialize+0x64>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e002      	b.n	8003604 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003602:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000002c 	.word	0x2000002c

08003618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800361e:	f3ef 8305 	mrs	r3, IPSR
 8003622:	60bb      	str	r3, [r7, #8]
  return(result);
 8003624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362a:	f3ef 8310 	mrs	r3, PRIMASK
 800362e:	607b      	str	r3, [r7, #4]
  return(result);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003636:	f3ef 8311 	mrs	r3, BASEPRI
 800363a:	603b      	str	r3, [r7, #0]
  return(result);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <osKernelStart+0x3a>
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <osKernelStart+0x68>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d103      	bne.n	8003652 <osKernelStart+0x3a>
    stat = osErrorISR;
 800364a:	f06f 0305 	mvn.w	r3, #5
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e010      	b.n	8003674 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <osKernelStart+0x68>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d109      	bne.n	800366e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800365a:	f7ff ffa1 	bl	80035a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <osKernelStart+0x68>)
 8003660:	2202      	movs	r2, #2
 8003662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003664:	f001 fc8a 	bl	8004f7c <vTaskStartScheduler>
      stat = osOK;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e002      	b.n	8003674 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003672:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003674:	68fb      	ldr	r3, [r7, #12]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000002c 	.word	0x2000002c

08003684 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b090      	sub	sp, #64	; 0x40
 8003688:	af04      	add	r7, sp, #16
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003694:	f3ef 8305 	mrs	r3, IPSR
 8003698:	61fb      	str	r3, [r7, #28]
  return(result);
 800369a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800369c:	2b00      	cmp	r3, #0
 800369e:	f040 808f 	bne.w	80037c0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a2:	f3ef 8310 	mrs	r3, PRIMASK
 80036a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036ae:	f3ef 8311 	mrs	r3, BASEPRI
 80036b2:	617b      	str	r3, [r7, #20]
  return(result);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <osThreadNew+0x3e>
 80036ba:	4b44      	ldr	r3, [pc, #272]	; (80037cc <osThreadNew+0x148>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d07e      	beq.n	80037c0 <osThreadNew+0x13c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d07b      	beq.n	80037c0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80036cc:	2318      	movs	r3, #24
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d045      	beq.n	800376c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <osThreadNew+0x6a>
        name = attr->name;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <osThreadNew+0x90>
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	2b38      	cmp	r3, #56	; 0x38
 8003706:	d805      	bhi.n	8003714 <osThreadNew+0x90>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <osThreadNew+0x94>
        return (NULL);
 8003714:	2300      	movs	r3, #0
 8003716:	e054      	b.n	80037c2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	089b      	lsrs	r3, r3, #2
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00e      	beq.n	800374e <osThreadNew+0xca>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b5b      	cmp	r3, #91	; 0x5b
 8003736:	d90a      	bls.n	800374e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <osThreadNew+0xca>
        mem = 1;
 8003748:	2301      	movs	r3, #1
 800374a:	623b      	str	r3, [r7, #32]
 800374c:	e010      	b.n	8003770 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <osThreadNew+0xec>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <osThreadNew+0xec>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d104      	bne.n	8003770 <osThreadNew+0xec>
          mem = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	623b      	str	r3, [r7, #32]
 800376a:	e001      	b.n	8003770 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d110      	bne.n	8003798 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800377e:	9202      	str	r2, [sp, #8]
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f001 fa23 	bl	8004bd8 <xTaskCreateStatic>
 8003792:	4603      	mov	r3, r0
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e013      	b.n	80037c0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d110      	bne.n	80037c0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f001 fa6b 	bl	8004c8c <xTaskCreate>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d001      	beq.n	80037c0 <osThreadNew+0x13c>
          hTask = NULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037c0:	693b      	ldr	r3, [r7, #16]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3730      	adds	r7, #48	; 0x30
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000002c 	.word	0x2000002c

080037d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d8:	f3ef 8305 	mrs	r3, IPSR
 80037dc:	613b      	str	r3, [r7, #16]
  return(result);
 80037de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10f      	bne.n	8003804 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e4:	f3ef 8310 	mrs	r3, PRIMASK
 80037e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037f0:	f3ef 8311 	mrs	r3, BASEPRI
 80037f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <osDelay+0x3c>
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <osDelay+0x58>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d103      	bne.n	800380c <osDelay+0x3c>
    stat = osErrorISR;
 8003804:	f06f 0305 	mvn.w	r3, #5
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e007      	b.n	800381c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f001 fb7c 	bl	8004f14 <vTaskDelay>
    }
  }

  return (stat);
 800381c:	697b      	ldr	r3, [r7, #20]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	2000002c 	.word	0x2000002c

0800382c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <vApplicationGetIdleTaskMemory+0x2c>)
 800383c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <vApplicationGetIdleTaskMemory+0x30>)
 8003842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000030 	.word	0x20000030
 800385c:	2000008c 	.word	0x2000008c

08003860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <vApplicationGetTimerTaskMemory+0x2c>)
 8003870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a06      	ldr	r2, [pc, #24]	; (8003890 <vApplicationGetTimerTaskMemory+0x30>)
 8003876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	2000028c 	.word	0x2000028c
 8003890:	200002e8 	.word	0x200002e8

08003894 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038a0:	f001 fbd0 	bl	8005044 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038a4:	4b57      	ldr	r3, [pc, #348]	; (8003a04 <pvPortMalloc+0x170>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038ac:	f000 f90c 	bl	8003ac8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038b0:	4b55      	ldr	r3, [pc, #340]	; (8003a08 <pvPortMalloc+0x174>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 808c 	bne.w	80039d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01c      	beq.n	80038fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80038c4:	2208      	movs	r2, #8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d013      	beq.n	80038fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f023 0307 	bic.w	r3, r3, #7
 80038dc:	3308      	adds	r3, #8
 80038de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	e7fe      	b.n	80038fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d068      	beq.n	80039d6 <pvPortMalloc+0x142>
 8003904:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <pvPortMalloc+0x178>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d863      	bhi.n	80039d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800390e:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <pvPortMalloc+0x17c>)
 8003910:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <pvPortMalloc+0x17c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003918:	e004      	b.n	8003924 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <pvPortMalloc+0xa2>
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f1      	bne.n	800391a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <pvPortMalloc+0x170>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	429a      	cmp	r2, r3
 800393e:	d04a      	beq.n	80039d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	4413      	add	r3, r2
 8003948:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	1ad2      	subs	r2, r2, r3
 800395a:	2308      	movs	r3, #8
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	429a      	cmp	r2, r3
 8003960:	d91e      	bls.n	80039a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <pvPortMalloc+0xf4>
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e7fe      	b.n	8003986 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	1ad2      	subs	r2, r2, r3
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800399a:	69b8      	ldr	r0, [r7, #24]
 800399c:	f000 f8f6 	bl	8003b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <pvPortMalloc+0x178>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <pvPortMalloc+0x178>)
 80039ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <pvPortMalloc+0x178>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <pvPortMalloc+0x180>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d203      	bcs.n	80039c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <pvPortMalloc+0x178>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <pvPortMalloc+0x180>)
 80039c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <pvPortMalloc+0x174>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039d6:	f001 fb43 	bl	8005060 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <pvPortMalloc+0x164>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e7fe      	b.n	80039f6 <pvPortMalloc+0x162>
	return pvReturn;
 80039f8:	69fb      	ldr	r3, [r7, #28]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200012a8 	.word	0x200012a8
 8003a08:	200012b4 	.word	0x200012b4
 8003a0c:	200012ac 	.word	0x200012ac
 8003a10:	200012a0 	.word	0x200012a0
 8003a14:	200012b0 	.word	0x200012b0

08003a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d046      	beq.n	8003ab8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	425b      	negs	r3, r3
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4413      	add	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <vPortFree+0xa8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <vPortFree+0x42>
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e7fe      	b.n	8003a58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <vPortFree+0x5e>
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	e7fe      	b.n	8003a74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <vPortFree+0xa8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d115      	bne.n	8003ab8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <vPortFree+0xa8>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a9c:	f001 fad2 	bl	8005044 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <vPortFree+0xac>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <vPortFree+0xac>)
 8003aac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aae:	6938      	ldr	r0, [r7, #16]
 8003ab0:	f000 f86c 	bl	8003b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ab4:	f001 fad4 	bl	8005060 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200012b4 	.word	0x200012b4
 8003ac4:	200012ac 	.word	0x200012ac

08003ac8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ace:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003ad2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <prvHeapInit+0xac>)
 8003ad6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3307      	adds	r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0307 	bic.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <prvHeapInit+0xac>)
 8003af8:	4413      	add	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <prvHeapInit+0xb0>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <prvHeapInit+0xb0>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4413      	add	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b14:	2208      	movs	r2, #8
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0307 	bic.w	r3, r3, #7
 8003b22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <prvHeapInit+0xb4>)
 8003b28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <prvHeapInit+0xb4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <prvHeapInit+0xb4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	1ad2      	subs	r2, r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <prvHeapInit+0xb4>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <prvHeapInit+0xb8>)
 8003b56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <prvHeapInit+0xbc>)
 8003b5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <prvHeapInit+0xc0>)
 8003b62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	200006e8 	.word	0x200006e8
 8003b78:	200012a0 	.word	0x200012a0
 8003b7c:	200012a8 	.word	0x200012a8
 8003b80:	200012b0 	.word	0x200012b0
 8003b84:	200012ac 	.word	0x200012ac
 8003b88:	200012b4 	.word	0x200012b4

08003b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b94:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <prvInsertBlockIntoFreeList+0xac>)
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e002      	b.n	8003ba0 <prvInsertBlockIntoFreeList+0x14>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d8f7      	bhi.n	8003b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d108      	bne.n	8003bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	441a      	add	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d118      	bne.n	8003c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <prvInsertBlockIntoFreeList+0xb0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d00d      	beq.n	8003c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e008      	b.n	8003c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <prvInsertBlockIntoFreeList+0xb0>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e003      	b.n	8003c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d002      	beq.n	8003c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	200012a0 	.word	0x200012a0
 8003c3c:	200012a8 	.word	0x200012a8

08003c40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f103 0208 	add.w	r2, r3, #8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f103 0208 	add.w	r2, r3, #8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f103 0208 	add.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf8:	d103      	bne.n	8003d02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e00c      	b.n	8003d1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3308      	adds	r3, #8
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e002      	b.n	8003d10 <vListInsert+0x2e>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d2f6      	bcs.n	8003d0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6892      	ldr	r2, [r2, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6852      	ldr	r2, [r2, #4]
 8003d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d103      	bne.n	8003d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	1e5a      	subs	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b04      	subs	r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b04      	subs	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f023 0201 	bic.w	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b04      	subs	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <pxPortInitialiseStack+0x64>)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3b14      	subs	r3, #20
 8003de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3b04      	subs	r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f06f 0202 	mvn.w	r2, #2
 8003df6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3b20      	subs	r3, #32
 8003dfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	08003e11 	.word	0x08003e11

08003e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e1a:	4b11      	ldr	r3, [pc, #68]	; (8003e60 <prvTaskExitError+0x50>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e22:	d009      	beq.n	8003e38 <prvTaskExitError+0x28>
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e7fe      	b.n	8003e36 <prvTaskExitError+0x26>
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e4a:	bf00      	nop
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0fc      	beq.n	8003e4c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e52:	bf00      	nop
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	2000000c 	.word	0x2000000c
	...

08003e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <pxCurrentTCBConst2>)
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	6808      	ldr	r0, [r1, #0]
 8003e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7a:	f380 8809 	msr	PSP, r0
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f380 8811 	msr	BASEPRI, r0
 8003e8a:	4770      	bx	lr
 8003e8c:	f3af 8000 	nop.w

08003e90 <pxCurrentTCBConst2>:
 8003e90:	200012c0 	.word	0x200012c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop

08003e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e98:	4808      	ldr	r0, [pc, #32]	; (8003ebc <prvPortStartFirstTask+0x24>)
 8003e9a:	6800      	ldr	r0, [r0, #0]
 8003e9c:	6800      	ldr	r0, [r0, #0]
 8003e9e:	f380 8808 	msr	MSP, r0
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f380 8814 	msr	CONTROL, r0
 8003eaa:	b662      	cpsie	i
 8003eac:	b661      	cpsie	f
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	df00      	svc	0
 8003eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eba:	bf00      	nop
 8003ebc:	e000ed08 	.word	0xe000ed08

08003ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ec6:	4b44      	ldr	r3, [pc, #272]	; (8003fd8 <xPortStartScheduler+0x118>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <xPortStartScheduler+0x11c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d109      	bne.n	8003ee4 <xPortStartScheduler+0x24>
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e7fe      	b.n	8003ee2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ee4:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <xPortStartScheduler+0x118>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <xPortStartScheduler+0x120>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d109      	bne.n	8003f02 <xPortStartScheduler+0x42>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e7fe      	b.n	8003f00 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <xPortStartScheduler+0x124>)
 8003f04:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <xPortStartScheduler+0x128>)
 8003f28:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f30:	e009      	b.n	8003f46 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003f32:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	4a2c      	ldr	r2, [pc, #176]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d0ef      	beq.n	8003f32 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f52:	4b26      	ldr	r3, [pc, #152]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1c3 0307 	rsb	r3, r3, #7
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d009      	beq.n	8003f72 <xPortStartScheduler+0xb2>
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	e7fe      	b.n	8003f70 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f72:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <xPortStartScheduler+0x12c>)
 8003f86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <xPortStartScheduler+0x130>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <xPortStartScheduler+0x130>)
 8003f96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <xPortStartScheduler+0x130>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <xPortStartScheduler+0x130>)
 8003fa2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fa8:	f000 f8d6 	bl	8004158 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <xPortStartScheduler+0x134>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fb2:	f000 f8f5 	bl	80041a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <xPortStartScheduler+0x138>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <xPortStartScheduler+0x138>)
 8003fbc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fc0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fc2:	f7ff ff69 	bl	8003e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fc6:	f001 f9af 	bl	8005328 <vTaskSwitchContext>
	prvTaskExitError();
 8003fca:	f7ff ff21 	bl	8003e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	e000ed00 	.word	0xe000ed00
 8003fdc:	410fc271 	.word	0x410fc271
 8003fe0:	410fc270 	.word	0x410fc270
 8003fe4:	e000e400 	.word	0xe000e400
 8003fe8:	200012b8 	.word	0x200012b8
 8003fec:	200012bc 	.word	0x200012bc
 8003ff0:	e000ed20 	.word	0xe000ed20
 8003ff4:	2000000c 	.word	0x2000000c
 8003ff8:	e000ef34 	.word	0xe000ef34

08003ffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004014:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <vPortEnterCritical+0x54>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	4a0d      	ldr	r2, [pc, #52]	; (8004050 <vPortEnterCritical+0x54>)
 800401c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <vPortEnterCritical+0x54>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d10e      	bne.n	8004044 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <vPortEnterCritical+0x58>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <vPortEnterCritical+0x48>
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	e7fe      	b.n	8004042 <vPortEnterCritical+0x46>
	}
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	2000000c 	.word	0x2000000c
 8004054:	e000ed04 	.word	0xe000ed04

08004058 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <vPortExitCritical+0x4c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <vPortExitCritical+0x22>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	e7fe      	b.n	8004078 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <vPortExitCritical+0x4c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3b01      	subs	r3, #1
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <vPortExitCritical+0x4c>)
 8004082:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <vPortExitCritical+0x4c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <vPortExitCritical+0x3e>
 800408c:	2300      	movs	r3, #0
 800408e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000000c 	.word	0x2000000c
	...

080040b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040b0:	f3ef 8009 	mrs	r0, PSP
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <pxCurrentTCBConst>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	f01e 0f10 	tst.w	lr, #16
 80040c0:	bf08      	it	eq
 80040c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	6010      	str	r0, [r2, #0]
 80040cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040d4:	f380 8811 	msr	BASEPRI, r0
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f001 f922 	bl	8005328 <vTaskSwitchContext>
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	f380 8811 	msr	BASEPRI, r0
 80040ec:	bc09      	pop	{r0, r3}
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	6808      	ldr	r0, [r1, #0]
 80040f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f6:	f01e 0f10 	tst.w	lr, #16
 80040fa:	bf08      	it	eq
 80040fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004100:	f380 8809 	msr	PSP, r0
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst>:
 8004110:	200012c0 	.word	0x200012c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004130:	f001 f842 	bl	80051b8 <xTaskIncrementTick>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <SysTick_Handler+0x3c>)
 800413c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800415c:	4b0b      	ldr	r3, [pc, #44]	; (800418c <vPortSetupTimerInterrupt+0x34>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <vPortSetupTimerInterrupt+0x38>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <vPortSetupTimerInterrupt+0x3c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <vPortSetupTimerInterrupt+0x40>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	4a09      	ldr	r2, [pc, #36]	; (800419c <vPortSetupTimerInterrupt+0x44>)
 8004176:	3b01      	subs	r3, #1
 8004178:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800417a:	4b04      	ldr	r3, [pc, #16]	; (800418c <vPortSetupTimerInterrupt+0x34>)
 800417c:	2207      	movs	r2, #7
 800417e:	601a      	str	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000e010 	.word	0xe000e010
 8004190:	e000e018 	.word	0xe000e018
 8004194:	20000000 	.word	0x20000000
 8004198:	10624dd3 	.word	0x10624dd3
 800419c:	e000e014 	.word	0xe000e014

080041a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041b0 <vPortEnableVFP+0x10>
 80041a4:	6801      	ldr	r1, [r0, #0]
 80041a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041aa:	6001      	str	r1, [r0, #0]
 80041ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041ae:	bf00      	nop
 80041b0:	e000ed88 	.word	0xe000ed88

080041b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041ba:	f3ef 8305 	mrs	r3, IPSR
 80041be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	d913      	bls.n	80041ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <vPortValidateInterruptPriority+0x6c>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <vPortValidateInterruptPriority+0x70>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	7afa      	ldrb	r2, [r7, #11]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d209      	bcs.n	80041ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	e7fe      	b.n	80041ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041ee:	4b0e      	ldr	r3, [pc, #56]	; (8004228 <vPortValidateInterruptPriority+0x74>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <vPortValidateInterruptPriority+0x78>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d909      	bls.n	8004212 <vPortValidateInterruptPriority+0x5e>
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	e7fe      	b.n	8004210 <vPortValidateInterruptPriority+0x5c>
	}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000e3f0 	.word	0xe000e3f0
 8004224:	200012b8 	.word	0x200012b8
 8004228:	e000ed0c 	.word	0xe000ed0c
 800422c:	200012bc 	.word	0x200012bc

08004230 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <xQueueGenericReset+0x28>
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	e7fe      	b.n	8004256 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004258:	f7ff fed0 	bl	8003ffc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	68f9      	ldr	r1, [r7, #12]
 8004266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	441a      	add	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004288:	3b01      	subs	r3, #1
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	441a      	add	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	22ff      	movs	r2, #255	; 0xff
 80042a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d114      	bne.n	80042d8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01a      	beq.n	80042ec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3310      	adds	r3, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f8de 	bl	800547c <xTaskRemoveFromEventList>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d012      	beq.n	80042ec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042c6:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <xQueueGenericReset+0xcc>)
 80042c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	e009      	b.n	80042ec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	3310      	adds	r3, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fcaf 	bl	8003c40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3324      	adds	r3, #36	; 0x24
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fcaa 	bl	8003c40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042ec:	f7ff feb4 	bl	8004058 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042f0:	2301      	movs	r3, #1
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	; 0x38
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <xQueueGenericCreateStatic+0x28>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
 8004326:	e7fe      	b.n	8004326 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <xQueueGenericCreateStatic+0x42>
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
 8004340:	e7fe      	b.n	8004340 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <xQueueGenericCreateStatic+0x4e>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <xQueueGenericCreateStatic+0x52>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <xQueueGenericCreateStatic+0x54>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <xQueueGenericCreateStatic+0x6c>
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	e7fe      	b.n	800436a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <xQueueGenericCreateStatic+0x78>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <xQueueGenericCreateStatic+0x7c>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <xQueueGenericCreateStatic+0x7e>
 800437c:	2300      	movs	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <xQueueGenericCreateStatic+0x96>
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e7fe      	b.n	8004394 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004396:	2350      	movs	r3, #80	; 0x50
 8004398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b50      	cmp	r3, #80	; 0x50
 800439e:	d009      	beq.n	80043b4 <xQueueGenericCreateStatic+0xb4>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e7fe      	b.n	80043b2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f805 	bl	80043e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043de:	4618      	mov	r0, r3
 80043e0:	3730      	adds	r7, #48	; 0x30
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e002      	b.n	8004408 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004414:	2101      	movs	r1, #1
 8004416:	69b8      	ldr	r0, [r7, #24]
 8004418:	f7ff ff0a 	bl	8004230 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	; 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800443a:	2300      	movs	r3, #0
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <xQueueGenericSend+0x30>
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
 800445a:	e7fe      	b.n	800445a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <xQueueGenericSend+0x3e>
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <xQueueGenericSend+0x42>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericSend+0x44>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <xQueueGenericSend+0x5c>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	e7fe      	b.n	8004486 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d103      	bne.n	8004496 <xQueueGenericSend+0x6a>
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <xQueueGenericSend+0x6e>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <xQueueGenericSend+0x70>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <xQueueGenericSend+0x88>
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	623b      	str	r3, [r7, #32]
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044b4:	f001 f998 	bl	80057e8 <xTaskGetSchedulerState>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <xQueueGenericSend+0x98>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <xQueueGenericSend+0x9c>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <xQueueGenericSend+0x9e>
 80044c8:	2300      	movs	r3, #0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <xQueueGenericSend+0xb6>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	61fb      	str	r3, [r7, #28]
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044e2:	f7ff fd8b 	bl	8003ffc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <xQueueGenericSend+0xcc>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d129      	bne.n	800454c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044fe:	f000 f9ff 	bl	8004900 <prvCopyDataToQueue>
 8004502:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d010      	beq.n	800452e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	3324      	adds	r3, #36	; 0x24
 8004510:	4618      	mov	r0, r3
 8004512:	f000 ffb3 	bl	800547c <xTaskRemoveFromEventList>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800451c:	4b3f      	ldr	r3, [pc, #252]	; (800461c <xQueueGenericSend+0x1f0>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	e00a      	b.n	8004544 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004534:	4b39      	ldr	r3, [pc, #228]	; (800461c <xQueueGenericSend+0x1f0>)
 8004536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004544:	f7ff fd88 	bl	8004058 <vPortExitCritical>
				return pdPASS;
 8004548:	2301      	movs	r3, #1
 800454a:	e063      	b.n	8004614 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004552:	f7ff fd81 	bl	8004058 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004556:	2300      	movs	r3, #0
 8004558:	e05c      	b.n	8004614 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004560:	f107 0314 	add.w	r3, r7, #20
 8004564:	4618      	mov	r0, r3
 8004566:	f000 ffeb 	bl	8005540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800456a:	2301      	movs	r3, #1
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800456e:	f7ff fd73 	bl	8004058 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004572:	f000 fd67 	bl	8005044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004576:	f7ff fd41 	bl	8003ffc <vPortEnterCritical>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004580:	b25b      	sxtb	r3, r3
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004586:	d103      	bne.n	8004590 <xQueueGenericSend+0x164>
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800459c:	d103      	bne.n	80045a6 <xQueueGenericSend+0x17a>
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a6:	f7ff fd57 	bl	8004058 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045aa:	1d3a      	adds	r2, r7, #4
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 ffda 	bl	800556c <xTaskCheckForTimeOut>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d124      	bne.n	8004608 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c0:	f000 fa96 	bl	8004af0 <prvIsQueueFull>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d018      	beq.n	80045fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	3310      	adds	r3, #16
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ff04 	bl	80053e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045da:	f000 fa21 	bl	8004a20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045de:	f000 fd3f 	bl	8005060 <xTaskResumeAll>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f47f af7c 	bne.w	80044e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <xQueueGenericSend+0x1f0>)
 80045ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	e772      	b.n	80044e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045fe:	f000 fa0f 	bl	8004a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004602:	f000 fd2d 	bl	8005060 <xTaskResumeAll>
 8004606:	e76c      	b.n	80044e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800460a:	f000 fa09 	bl	8004a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800460e:	f000 fd27 	bl	8005060 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004612:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004614:	4618      	mov	r0, r3
 8004616:	3738      	adds	r7, #56	; 0x38
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	e000ed04 	.word	0xe000ed04

08004620 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08e      	sub	sp, #56	; 0x38
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <xQueueGenericSendFromISR+0x2c>
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	e7fe      	b.n	800464a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <xQueueGenericSendFromISR+0x3a>
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <xQueueGenericSendFromISR+0x3e>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericSendFromISR+0x40>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <xQueueGenericSendFromISR+0x58>
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	e7fe      	b.n	8004676 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d103      	bne.n	8004686 <xQueueGenericSendFromISR+0x66>
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <xQueueGenericSendFromISR+0x6a>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <xQueueGenericSendFromISR+0x6c>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <xQueueGenericSendFromISR+0x84>
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e7fe      	b.n	80046a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046a4:	f7ff fd86 	bl	80041b4 <vPortValidateInterruptPriority>
	__asm volatile
 80046a8:	f3ef 8211 	mrs	r2, BASEPRI
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	61ba      	str	r2, [r7, #24]
 80046be:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80046c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <xQueueGenericSendFromISR+0xb6>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d12c      	bne.n	8004730 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046e6:	f000 f90b 	bl	8004900 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f2:	d112      	bne.n	800471a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d016      	beq.n	800472a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	4618      	mov	r0, r3
 8004702:	f000 febb 	bl	800547c <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00e      	beq.n	800472a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e007      	b.n	800472a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800471a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800471e:	3301      	adds	r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	b25a      	sxtb	r2, r3
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800472a:	2301      	movs	r3, #1
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800472e:	e001      	b.n	8004734 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004730:	2300      	movs	r3, #0
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004740:	4618      	mov	r0, r3
 8004742:	3738      	adds	r7, #56	; 0x38
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <xQueueReceive+0x2e>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	623b      	str	r3, [r7, #32]
 8004774:	e7fe      	b.n	8004774 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <xQueueReceive+0x3c>
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <xQueueReceive+0x40>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <xQueueReceive+0x42>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <xQueueReceive+0x5a>
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e7fe      	b.n	80047a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047a2:	f001 f821 	bl	80057e8 <xTaskGetSchedulerState>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <xQueueReceive+0x6a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <xQueueReceive+0x6e>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <xQueueReceive+0x70>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <xQueueReceive+0x88>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e7fe      	b.n	80047ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047d0:	f7ff fc14 	bl	8003ffc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01f      	beq.n	8004820 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e4:	f000 f8f6 	bl	80049d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	1e5a      	subs	r2, r3, #1
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00f      	beq.n	8004818 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	3310      	adds	r3, #16
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fe3d 	bl	800547c <xTaskRemoveFromEventList>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d007      	beq.n	8004818 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004808:	4b3c      	ldr	r3, [pc, #240]	; (80048fc <xQueueReceive+0x1b4>)
 800480a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004818:	f7ff fc1e 	bl	8004058 <vPortExitCritical>
				return pdPASS;
 800481c:	2301      	movs	r3, #1
 800481e:	e069      	b.n	80048f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004826:	f7ff fc17 	bl	8004058 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800482a:	2300      	movs	r3, #0
 800482c:	e062      	b.n	80048f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004834:	f107 0310 	add.w	r3, r7, #16
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fe81 	bl	8005540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800483e:	2301      	movs	r3, #1
 8004840:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004842:	f7ff fc09 	bl	8004058 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004846:	f000 fbfd 	bl	8005044 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800484a:	f7ff fbd7 	bl	8003ffc <vPortEnterCritical>
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004854:	b25b      	sxtb	r3, r3
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800485a:	d103      	bne.n	8004864 <xQueueReceive+0x11c>
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800486a:	b25b      	sxtb	r3, r3
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004870:	d103      	bne.n	800487a <xQueueReceive+0x132>
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800487a:	f7ff fbed 	bl	8004058 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800487e:	1d3a      	adds	r2, r7, #4
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fe70 	bl	800556c <xTaskCheckForTimeOut>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d123      	bne.n	80048da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004894:	f000 f916 	bl	8004ac4 <prvIsQueueEmpty>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d017      	beq.n	80048ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	3324      	adds	r3, #36	; 0x24
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fd9a 	bl	80053e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ae:	f000 f8b7 	bl	8004a20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048b2:	f000 fbd5 	bl	8005060 <xTaskResumeAll>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d189      	bne.n	80047d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80048bc:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <xQueueReceive+0x1b4>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	e780      	b.n	80047d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d0:	f000 f8a6 	bl	8004a20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048d4:	f000 fbc4 	bl	8005060 <xTaskResumeAll>
 80048d8:	e77a      	b.n	80047d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048dc:	f000 f8a0 	bl	8004a20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048e0:	f000 fbbe 	bl	8005060 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048e6:	f000 f8ed 	bl	8004ac4 <prvIsQueueEmpty>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f43f af6f 	beq.w	80047d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3730      	adds	r7, #48	; 0x30
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	e000ed04 	.word	0xe000ed04

08004900 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10d      	bne.n	800493a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d14d      	bne.n	80049c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 ff7a 	bl	8005824 <xTaskPriorityDisinherit>
 8004930:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	e043      	b.n	80049c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d119      	bne.n	8004974 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6858      	ldr	r0, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	461a      	mov	r2, r3
 800494a:	68b9      	ldr	r1, [r7, #8]
 800494c:	f001 fb94 	bl	8006078 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	441a      	add	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	429a      	cmp	r2, r3
 8004968:	d32b      	bcc.n	80049c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	e026      	b.n	80049c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	68d8      	ldr	r0, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	461a      	mov	r2, r3
 800497e:	68b9      	ldr	r1, [r7, #8]
 8004980:	f001 fb7a 	bl	8006078 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	425b      	negs	r3, r3
 800498e:	441a      	add	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d207      	bcs.n	80049b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	425b      	negs	r3, r3
 80049aa:	441a      	add	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d105      	bne.n	80049c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3b01      	subs	r3, #1
 80049c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049ca:	697b      	ldr	r3, [r7, #20]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	441a      	add	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d303      	bcc.n	8004a08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68d9      	ldr	r1, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	461a      	mov	r2, r3
 8004a12:	6838      	ldr	r0, [r7, #0]
 8004a14:	f001 fb30 	bl	8006078 <memcpy>
	}
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a28:	f7ff fae8 	bl	8003ffc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a34:	e011      	b.n	8004a5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3324      	adds	r3, #36	; 0x24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fd1a 	bl	800547c <xTaskRemoveFromEventList>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a4e:	f000 fded 	bl	800562c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dce9      	bgt.n	8004a36 <prvUnlockQueue+0x16>
 8004a62:	e000      	b.n	8004a66 <prvUnlockQueue+0x46>
					break;
 8004a64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a6e:	f7ff faf3 	bl	8004058 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a72:	f7ff fac3 	bl	8003ffc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a7e:	e011      	b.n	8004aa4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d012      	beq.n	8004aae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fcf5 	bl	800547c <xTaskRemoveFromEventList>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a98:	f000 fdc8 	bl	800562c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	dce9      	bgt.n	8004a80 <prvUnlockQueue+0x60>
 8004aac:	e000      	b.n	8004ab0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004aae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	22ff      	movs	r2, #255	; 0xff
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ab8:	f7ff face 	bl	8004058 <vPortExitCritical>
}
 8004abc:	bf00      	nop
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004acc:	f7ff fa96 	bl	8003ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e001      	b.n	8004ae2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ae2:	f7ff fab9 	bl	8004058 <vPortExitCritical>

	return xReturn;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004af8:	f7ff fa80 	bl	8003ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d102      	bne.n	8004b0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e001      	b.n	8004b12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b12:	f7ff faa1 	bl	8004058 <vPortExitCritical>

	return xReturn;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e014      	b.n	8004b5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b30:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <vQueueAddToRegistry+0x4c>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b3c:	490b      	ldr	r1, [pc, #44]	; (8004b6c <vQueueAddToRegistry+0x4c>)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <vQueueAddToRegistry+0x4c>)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b52:	e005      	b.n	8004b60 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	d9e7      	bls.n	8004b30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	200019b4 	.word	0x200019b4

08004b70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b80:	f7ff fa3c 	bl	8003ffc <vPortEnterCritical>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8a:	b25b      	sxtb	r3, r3
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b90:	d103      	bne.n	8004b9a <vQueueWaitForMessageRestricted+0x2a>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba0:	b25b      	sxtb	r3, r3
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba6:	d103      	bne.n	8004bb0 <vQueueWaitForMessageRestricted+0x40>
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb0:	f7ff fa52 	bl	8004058 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	3324      	adds	r3, #36	; 0x24
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fc2f 	bl	8005428 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bca:	6978      	ldr	r0, [r7, #20]
 8004bcc:	f7ff ff28 	bl	8004a20 <prvUnlockQueue>
	}
 8004bd0:	bf00      	nop
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08e      	sub	sp, #56	; 0x38
 8004bdc:	af04      	add	r7, sp, #16
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <xTaskCreateStatic+0x28>
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	e7fe      	b.n	8004bfe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <xTaskCreateStatic+0x42>
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	e7fe      	b.n	8004c18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c1a:	235c      	movs	r3, #92	; 0x5c
 8004c1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b5c      	cmp	r3, #92	; 0x5c
 8004c22:	d009      	beq.n	8004c38 <xTaskCreateStatic+0x60>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e7fe      	b.n	8004c36 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <xTaskCreateStatic+0xa6>
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01b      	beq.n	8004c7e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	9301      	str	r3, [sp, #4]
 8004c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f850 	bl	8004d16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c78:	f000 f8dc 	bl	8004e34 <prvAddNewTaskToReadyList>
 8004c7c:	e001      	b.n	8004c82 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c82:	697b      	ldr	r3, [r7, #20]
	}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3728      	adds	r7, #40	; 0x28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08c      	sub	sp, #48	; 0x30
 8004c90:	af04      	add	r7, sp, #16
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe fdf7 	bl	8003894 <pvPortMalloc>
 8004ca6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cae:	205c      	movs	r0, #92	; 0x5c
 8004cb0:	f7fe fdf0 	bl	8003894 <pvPortMalloc>
 8004cb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc2:	e005      	b.n	8004cd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cc4:	6978      	ldr	r0, [r7, #20]
 8004cc6:	f7fe fea7 	bl	8003a18 <vPortFree>
 8004cca:	e001      	b.n	8004cd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	9302      	str	r3, [sp, #8]
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f80e 	bl	8004d16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cfa:	69f8      	ldr	r0, [r7, #28]
 8004cfc:	f000 f89a 	bl	8004e34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d00:	2301      	movs	r3, #1
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e002      	b.n	8004d0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
	}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b088      	sub	sp, #32
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	21a5      	movs	r1, #165	; 0xa5
 8004d30:	f001 f9ad 	bl	800608e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f023 0307 	bic.w	r3, r3, #7
 8004d4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <prvInitialiseNewTask+0x56>
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	e7fe      	b.n	8004d6a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01f      	beq.n	8004db2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	e012      	b.n	8004d9e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	7819      	ldrb	r1, [r3, #0]
 8004d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	3334      	adds	r3, #52	; 0x34
 8004d88:	460a      	mov	r2, r1
 8004d8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b0f      	cmp	r3, #15
 8004da2:	d9e9      	bls.n	8004d78 <prvInitialiseNewTask+0x62>
 8004da4:	e000      	b.n	8004da8 <prvInitialiseNewTask+0x92>
			{
				break;
 8004da6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db0:	e003      	b.n	8004dba <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	2b37      	cmp	r3, #55	; 0x37
 8004dbe:	d901      	bls.n	8004dc4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004dc0:	2337      	movs	r3, #55	; 0x37
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe ff50 	bl	8003c80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	3318      	adds	r3, #24
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fe ff4b 	bl	8003c80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	2200      	movs	r2, #0
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	69b8      	ldr	r0, [r7, #24]
 8004e14:	f7fe ffc8 	bl	8003da8 <pxPortInitialiseStack>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e2a:	bf00      	nop
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e3c:	f7ff f8de 	bl	8003ffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004e48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e4a:	4b2c      	ldr	r3, [pc, #176]	; (8004efc <prvAddNewTaskToReadyList+0xc8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e52:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <prvAddNewTaskToReadyList+0xc8>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e58:	4b27      	ldr	r3, [pc, #156]	; (8004ef8 <prvAddNewTaskToReadyList+0xc4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d110      	bne.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e60:	f000 fc08 	bl	8005674 <prvInitialiseTaskLists>
 8004e64:	e00d      	b.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e66:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <prvAddNewTaskToReadyList+0xcc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <prvAddNewTaskToReadyList+0xc8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d802      	bhi.n	8004e82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <prvAddNewTaskToReadyList+0xc8>)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e82:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <prvAddNewTaskToReadyList+0xd0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <prvAddNewTaskToReadyList+0xd0>)
 8004e8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <prvAddNewTaskToReadyList+0xd0>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <prvAddNewTaskToReadyList+0xd4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d903      	bls.n	8004ea8 <prvAddNewTaskToReadyList+0x74>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <prvAddNewTaskToReadyList+0xd4>)
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <prvAddNewTaskToReadyList+0xd8>)
 8004eb6:	441a      	add	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7fe feeb 	bl	8003c9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ec4:	f7ff f8c8 	bl	8004058 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <prvAddNewTaskToReadyList+0xcc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <prvAddNewTaskToReadyList+0xc8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d207      	bcs.n	8004eee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ede:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <prvAddNewTaskToReadyList+0xdc>)
 8004ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20001794 	.word	0x20001794
 8004efc:	200012c0 	.word	0x200012c0
 8004f00:	200017a0 	.word	0x200017a0
 8004f04:	200017b0 	.word	0x200017b0
 8004f08:	2000179c 	.word	0x2000179c
 8004f0c:	200012c4 	.word	0x200012c4
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f26:	4b13      	ldr	r3, [pc, #76]	; (8004f74 <vTaskDelay+0x60>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <vTaskDelay+0x2e>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	e7fe      	b.n	8004f40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004f42:	f000 f87f 	bl	8005044 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f46:	2100      	movs	r1, #0
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fcd7 	bl	80058fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f4e:	f000 f887 	bl	8005060 <xTaskResumeAll>
 8004f52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004f5a:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <vTaskDelay+0x64>)
 8004f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	200017bc 	.word	0x200017bc
 8004f78:	e000ed04 	.word	0xe000ed04

08004f7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	; 0x28
 8004f80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f8a:	463a      	mov	r2, r7
 8004f8c:	1d39      	adds	r1, r7, #4
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fc4a 	bl	800382c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	9202      	str	r2, [sp, #8]
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	460a      	mov	r2, r1
 8004faa:	4920      	ldr	r1, [pc, #128]	; (800502c <vTaskStartScheduler+0xb0>)
 8004fac:	4820      	ldr	r0, [pc, #128]	; (8005030 <vTaskStartScheduler+0xb4>)
 8004fae:	f7ff fe13 	bl	8004bd8 <xTaskCreateStatic>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <vTaskStartScheduler+0xb8>)
 8004fb6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <vTaskStartScheduler+0xb8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e001      	b.n	8004fca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d102      	bne.n	8004fd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004fd0:	f000 fce8 	bl	80059a4 <xTimerCreateTimerTask>
 8004fd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d115      	bne.n	8005008 <vTaskStartScheduler+0x8c>
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <vTaskStartScheduler+0xbc>)
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ff4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <vTaskStartScheduler+0xc0>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <vTaskStartScheduler+0xc4>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005002:	f7fe ff5d 	bl	8003ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005006:	e00d      	b.n	8005024 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800500e:	d109      	bne.n	8005024 <vTaskStartScheduler+0xa8>
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e7fe      	b.n	8005022 <vTaskStartScheduler+0xa6>
}
 8005024:	bf00      	nop
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	080060d4 	.word	0x080060d4
 8005030:	08005645 	.word	0x08005645
 8005034:	200017b8 	.word	0x200017b8
 8005038:	200017b4 	.word	0x200017b4
 800503c:	200017a0 	.word	0x200017a0
 8005040:	20001798 	.word	0x20001798

08005044 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <vTaskSuspendAll+0x18>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3301      	adds	r3, #1
 800504e:	4a03      	ldr	r2, [pc, #12]	; (800505c <vTaskSuspendAll+0x18>)
 8005050:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005052:	bf00      	nop
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	200017bc 	.word	0x200017bc

08005060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800506a:	2300      	movs	r3, #0
 800506c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800506e:	4b41      	ldr	r3, [pc, #260]	; (8005174 <xTaskResumeAll+0x114>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <xTaskResumeAll+0x2a>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	e7fe      	b.n	8005088 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800508a:	f7fe ffb7 	bl	8003ffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800508e:	4b39      	ldr	r3, [pc, #228]	; (8005174 <xTaskResumeAll+0x114>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3b01      	subs	r3, #1
 8005094:	4a37      	ldr	r2, [pc, #220]	; (8005174 <xTaskResumeAll+0x114>)
 8005096:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005098:	4b36      	ldr	r3, [pc, #216]	; (8005174 <xTaskResumeAll+0x114>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d162      	bne.n	8005166 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80050a0:	4b35      	ldr	r3, [pc, #212]	; (8005178 <xTaskResumeAll+0x118>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05e      	beq.n	8005166 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a8:	e02f      	b.n	800510a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050aa:	4b34      	ldr	r3, [pc, #208]	; (800517c <xTaskResumeAll+0x11c>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3318      	adds	r3, #24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fe4c 	bl	8003d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3304      	adds	r3, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe fe47 	bl	8003d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <xTaskResumeAll+0x120>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d903      	bls.n	80050da <xTaskResumeAll+0x7a>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <xTaskResumeAll+0x120>)
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4a27      	ldr	r2, [pc, #156]	; (8005184 <xTaskResumeAll+0x124>)
 80050e8:	441a      	add	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3304      	adds	r3, #4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f7fe fdd2 	bl	8003c9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	4b23      	ldr	r3, [pc, #140]	; (8005188 <xTaskResumeAll+0x128>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	429a      	cmp	r2, r3
 8005102:	d302      	bcc.n	800510a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005104:	4b21      	ldr	r3, [pc, #132]	; (800518c <xTaskResumeAll+0x12c>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <xTaskResumeAll+0x11c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1cb      	bne.n	80050aa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005118:	f000 fb46 	bl	80057a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <xTaskResumeAll+0x130>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005128:	f000 f846 	bl	80051b8 <xTaskIncrementTick>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005132:	4b16      	ldr	r3, [pc, #88]	; (800518c <xTaskResumeAll+0x12c>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3b01      	subs	r3, #1
 800513c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f1      	bne.n	8005128 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005144:	4b12      	ldr	r3, [pc, #72]	; (8005190 <xTaskResumeAll+0x130>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800514a:	4b10      	ldr	r3, [pc, #64]	; (800518c <xTaskResumeAll+0x12c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005152:	2301      	movs	r3, #1
 8005154:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <xTaskResumeAll+0x134>)
 8005158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f7fe ff77 	bl	8004058 <vPortExitCritical>

	return xAlreadyYielded;
 800516a:	68bb      	ldr	r3, [r7, #8]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	200017bc 	.word	0x200017bc
 8005178:	20001794 	.word	0x20001794
 800517c:	20001754 	.word	0x20001754
 8005180:	2000179c 	.word	0x2000179c
 8005184:	200012c4 	.word	0x200012c4
 8005188:	200012c0 	.word	0x200012c0
 800518c:	200017a8 	.word	0x200017a8
 8005190:	200017a4 	.word	0x200017a4
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <xTaskGetTickCount+0x1c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80051a4:	687b      	ldr	r3, [r7, #4]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20001798 	.word	0x20001798

080051b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c2:	4b4e      	ldr	r3, [pc, #312]	; (80052fc <xTaskIncrementTick+0x144>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f040 8088 	bne.w	80052dc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051cc:	4b4c      	ldr	r3, [pc, #304]	; (8005300 <xTaskIncrementTick+0x148>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051d4:	4a4a      	ldr	r2, [pc, #296]	; (8005300 <xTaskIncrementTick+0x148>)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d11f      	bne.n	8005220 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80051e0:	4b48      	ldr	r3, [pc, #288]	; (8005304 <xTaskIncrementTick+0x14c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <xTaskIncrementTick+0x46>
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	e7fe      	b.n	80051fc <xTaskIncrementTick+0x44>
 80051fe:	4b41      	ldr	r3, [pc, #260]	; (8005304 <xTaskIncrementTick+0x14c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	4b40      	ldr	r3, [pc, #256]	; (8005308 <xTaskIncrementTick+0x150>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a3e      	ldr	r2, [pc, #248]	; (8005304 <xTaskIncrementTick+0x14c>)
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	4a3e      	ldr	r2, [pc, #248]	; (8005308 <xTaskIncrementTick+0x150>)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	4b3e      	ldr	r3, [pc, #248]	; (800530c <xTaskIncrementTick+0x154>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a3c      	ldr	r2, [pc, #240]	; (800530c <xTaskIncrementTick+0x154>)
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	f000 fac4 	bl	80057a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005220:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <xTaskIncrementTick+0x158>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	429a      	cmp	r2, r3
 8005228:	d349      	bcc.n	80052be <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <xTaskIncrementTick+0x14c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <xTaskIncrementTick+0x158>)
 8005236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800523a:	601a      	str	r2, [r3, #0]
					break;
 800523c:	e03f      	b.n	80052be <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523e:	4b31      	ldr	r3, [pc, #196]	; (8005304 <xTaskIncrementTick+0x14c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d203      	bcs.n	800525e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005256:	4a2e      	ldr	r2, [pc, #184]	; (8005310 <xTaskIncrementTick+0x158>)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800525c:	e02f      	b.n	80052be <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	3304      	adds	r3, #4
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fd76 	bl	8003d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	3318      	adds	r3, #24
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fd6d 	bl	8003d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	4b25      	ldr	r3, [pc, #148]	; (8005314 <xTaskIncrementTick+0x15c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d903      	bls.n	800528e <xTaskIncrementTick+0xd6>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	4a22      	ldr	r2, [pc, #136]	; (8005314 <xTaskIncrementTick+0x15c>)
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <xTaskIncrementTick+0x160>)
 800529c:	441a      	add	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f7fe fcf8 	bl	8003c9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	4b1b      	ldr	r3, [pc, #108]	; (800531c <xTaskIncrementTick+0x164>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d3b8      	bcc.n	800522a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052bc:	e7b5      	b.n	800522a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <xTaskIncrementTick+0x164>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	4914      	ldr	r1, [pc, #80]	; (8005318 <xTaskIncrementTick+0x160>)
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d907      	bls.n	80052e6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e004      	b.n	80052e6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052dc:	4b10      	ldr	r3, [pc, #64]	; (8005320 <xTaskIncrementTick+0x168>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	4a0f      	ldr	r2, [pc, #60]	; (8005320 <xTaskIncrementTick+0x168>)
 80052e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <xTaskIncrementTick+0x16c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80052ee:	2301      	movs	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052f2:	697b      	ldr	r3, [r7, #20]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	200017bc 	.word	0x200017bc
 8005300:	20001798 	.word	0x20001798
 8005304:	2000174c 	.word	0x2000174c
 8005308:	20001750 	.word	0x20001750
 800530c:	200017ac 	.word	0x200017ac
 8005310:	200017b4 	.word	0x200017b4
 8005314:	2000179c 	.word	0x2000179c
 8005318:	200012c4 	.word	0x200012c4
 800531c:	200012c0 	.word	0x200012c0
 8005320:	200017a4 	.word	0x200017a4
 8005324:	200017a8 	.word	0x200017a8

08005328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800532e:	4b27      	ldr	r3, [pc, #156]	; (80053cc <vTaskSwitchContext+0xa4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005336:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <vTaskSwitchContext+0xa8>)
 8005338:	2201      	movs	r2, #1
 800533a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800533c:	e040      	b.n	80053c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800533e:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <vTaskSwitchContext+0xa8>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005344:	4b23      	ldr	r3, [pc, #140]	; (80053d4 <vTaskSwitchContext+0xac>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	e00f      	b.n	800536c <vTaskSwitchContext+0x44>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <vTaskSwitchContext+0x3e>
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	607b      	str	r3, [r7, #4]
 8005364:	e7fe      	b.n	8005364 <vTaskSwitchContext+0x3c>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3b01      	subs	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	491a      	ldr	r1, [pc, #104]	; (80053d8 <vTaskSwitchContext+0xb0>)
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0e5      	beq.n	800534c <vTaskSwitchContext+0x24>
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <vTaskSwitchContext+0xb0>)
 800538c:	4413      	add	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	3308      	adds	r3, #8
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d104      	bne.n	80053b0 <vTaskSwitchContext+0x88>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vTaskSwitchContext+0xb4>)
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4a06      	ldr	r2, [pc, #24]	; (80053d4 <vTaskSwitchContext+0xac>)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6013      	str	r3, [r2, #0]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	200017bc 	.word	0x200017bc
 80053d0:	200017a8 	.word	0x200017a8
 80053d4:	2000179c 	.word	0x2000179c
 80053d8:	200012c4 	.word	0x200012c4
 80053dc:	200012c0 	.word	0x200012c0

080053e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <vTaskPlaceOnEventList+0x24>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e7fe      	b.n	8005402 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005404:	4b07      	ldr	r3, [pc, #28]	; (8005424 <vTaskPlaceOnEventList+0x44>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3318      	adds	r3, #24
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fe fc68 	bl	8003ce2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005412:	2101      	movs	r1, #1
 8005414:	6838      	ldr	r0, [r7, #0]
 8005416:	f000 fa71 	bl	80058fc <prvAddCurrentTaskToDelayedList>
}
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200012c0 	.word	0x200012c0

08005428 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <vTaskPlaceOnEventListRestricted+0x26>
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e7fe      	b.n	800544c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <vTaskPlaceOnEventListRestricted+0x50>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3318      	adds	r3, #24
 8005454:	4619      	mov	r1, r3
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7fe fc1f 	bl	8003c9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005466:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	68b8      	ldr	r0, [r7, #8]
 800546c:	f000 fa46 	bl	80058fc <prvAddCurrentTaskToDelayedList>
	}
 8005470:	bf00      	nop
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	200012c0 	.word	0x200012c0

0800547c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <xTaskRemoveFromEventList+0x2a>
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e7fe      	b.n	80054a4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	3318      	adds	r3, #24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fc52 	bl	8003d54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <xTaskRemoveFromEventList+0xac>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11d      	bne.n	80054f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fc49 	bl	8003d54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4b19      	ldr	r3, [pc, #100]	; (800552c <xTaskRemoveFromEventList+0xb0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d903      	bls.n	80054d6 <xTaskRemoveFromEventList+0x5a>
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	4a16      	ldr	r2, [pc, #88]	; (800552c <xTaskRemoveFromEventList+0xb0>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4a13      	ldr	r2, [pc, #76]	; (8005530 <xTaskRemoveFromEventList+0xb4>)
 80054e4:	441a      	add	r2, r3
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe fbd4 	bl	8003c9a <vListInsertEnd>
 80054f2:	e005      	b.n	8005500 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	3318      	adds	r3, #24
 80054f8:	4619      	mov	r1, r3
 80054fa:	480e      	ldr	r0, [pc, #56]	; (8005534 <xTaskRemoveFromEventList+0xb8>)
 80054fc:	f7fe fbcd 	bl	8003c9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <xTaskRemoveFromEventList+0xbc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	429a      	cmp	r2, r3
 800550c:	d905      	bls.n	800551a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <xTaskRemoveFromEventList+0xc0>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e001      	b.n	800551e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800551e:	697b      	ldr	r3, [r7, #20]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	200017bc 	.word	0x200017bc
 800552c:	2000179c 	.word	0x2000179c
 8005530:	200012c4 	.word	0x200012c4
 8005534:	20001754 	.word	0x20001754
 8005538:	200012c0 	.word	0x200012c0
 800553c:	200017a8 	.word	0x200017a8

08005540 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <vTaskInternalSetTimeOutState+0x24>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <vTaskInternalSetTimeOutState+0x28>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	605a      	str	r2, [r3, #4]
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	200017ac 	.word	0x200017ac
 8005568:	20001798 	.word	0x20001798

0800556c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <xTaskCheckForTimeOut+0x24>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	e7fe      	b.n	800558e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <xTaskCheckForTimeOut+0x3e>
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e7fe      	b.n	80055a8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80055aa:	f7fe fd27 	bl	8003ffc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055ae:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <xTaskCheckForTimeOut+0xb8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c6:	d102      	bne.n	80055ce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e023      	b.n	8005616 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <xTaskCheckForTimeOut+0xbc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d007      	beq.n	80055ea <xTaskCheckForTimeOut+0x7e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	e015      	b.n	8005616 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d20b      	bcs.n	800560c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	1ad2      	subs	r2, r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff9d 	bl	8005540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	e004      	b.n	8005616 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005616:	f7fe fd1f 	bl	8004058 <vPortExitCritical>

	return xReturn;
 800561a:	69fb      	ldr	r3, [r7, #28]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20001798 	.word	0x20001798
 8005628:	200017ac 	.word	0x200017ac

0800562c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <vTaskMissedYield+0x14>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	200017a8 	.word	0x200017a8

08005644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800564c:	f000 f852 	bl	80056f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005650:	4b06      	ldr	r3, [pc, #24]	; (800566c <prvIdleTask+0x28>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d9f9      	bls.n	800564c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <prvIdleTask+0x2c>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005668:	e7f0      	b.n	800564c <prvIdleTask+0x8>
 800566a:	bf00      	nop
 800566c:	200012c4 	.word	0x200012c4
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	e00c      	b.n	800569a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <prvInitialiseTaskLists+0x60>)
 800568c:	4413      	add	r3, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fad6 	bl	8003c40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3301      	adds	r3, #1
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b37      	cmp	r3, #55	; 0x37
 800569e:	d9ef      	bls.n	8005680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056a0:	480d      	ldr	r0, [pc, #52]	; (80056d8 <prvInitialiseTaskLists+0x64>)
 80056a2:	f7fe facd 	bl	8003c40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056a6:	480d      	ldr	r0, [pc, #52]	; (80056dc <prvInitialiseTaskLists+0x68>)
 80056a8:	f7fe faca 	bl	8003c40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056ac:	480c      	ldr	r0, [pc, #48]	; (80056e0 <prvInitialiseTaskLists+0x6c>)
 80056ae:	f7fe fac7 	bl	8003c40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056b2:	480c      	ldr	r0, [pc, #48]	; (80056e4 <prvInitialiseTaskLists+0x70>)
 80056b4:	f7fe fac4 	bl	8003c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056b8:	480b      	ldr	r0, [pc, #44]	; (80056e8 <prvInitialiseTaskLists+0x74>)
 80056ba:	f7fe fac1 	bl	8003c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056be:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <prvInitialiseTaskLists+0x78>)
 80056c0:	4a05      	ldr	r2, [pc, #20]	; (80056d8 <prvInitialiseTaskLists+0x64>)
 80056c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056c4:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <prvInitialiseTaskLists+0x7c>)
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <prvInitialiseTaskLists+0x68>)
 80056c8:	601a      	str	r2, [r3, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200012c4 	.word	0x200012c4
 80056d8:	20001724 	.word	0x20001724
 80056dc:	20001738 	.word	0x20001738
 80056e0:	20001754 	.word	0x20001754
 80056e4:	20001768 	.word	0x20001768
 80056e8:	20001780 	.word	0x20001780
 80056ec:	2000174c 	.word	0x2000174c
 80056f0:	20001750 	.word	0x20001750

080056f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056fa:	e019      	b.n	8005730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056fc:	f7fe fc7e 	bl	8003ffc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <prvCheckTasksWaitingTermination+0x4c>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe fb21 	bl	8003d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005712:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <prvCheckTasksWaitingTermination+0x50>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3b01      	subs	r3, #1
 8005718:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <prvCheckTasksWaitingTermination+0x50>)
 800571a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <prvCheckTasksWaitingTermination+0x54>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3b01      	subs	r3, #1
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <prvCheckTasksWaitingTermination+0x54>)
 8005724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005726:	f7fe fc97 	bl	8004058 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f80e 	bl	800574c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <prvCheckTasksWaitingTermination+0x54>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e1      	bne.n	80056fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20001768 	.word	0x20001768
 8005744:	20001794 	.word	0x20001794
 8005748:	2000177c 	.word	0x2000177c

0800574c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800575a:	2b00      	cmp	r3, #0
 800575c:	d108      	bne.n	8005770 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe f958 	bl	8003a18 <vPortFree>
				vPortFree( pxTCB );
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7fe f955 	bl	8003a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800576e:	e017      	b.n	80057a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005776:	2b01      	cmp	r3, #1
 8005778:	d103      	bne.n	8005782 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fe f94c 	bl	8003a18 <vPortFree>
	}
 8005780:	e00e      	b.n	80057a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005788:	2b02      	cmp	r3, #2
 800578a:	d009      	beq.n	80057a0 <prvDeleteTCB+0x54>
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	e7fe      	b.n	800579e <prvDeleteTCB+0x52>
	}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <prvResetNextTaskUnblockTime+0x38>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <prvResetNextTaskUnblockTime+0x3c>)
 80057ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057c0:	e008      	b.n	80057d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c2:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <prvResetNextTaskUnblockTime+0x38>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	4a04      	ldr	r2, [pc, #16]	; (80057e4 <prvResetNextTaskUnblockTime+0x3c>)
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	2000174c 	.word	0x2000174c
 80057e4:	200017b4 	.word	0x200017b4

080057e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <xTaskGetSchedulerState+0x34>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057f6:	2301      	movs	r3, #1
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	e008      	b.n	800580e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <xTaskGetSchedulerState+0x38>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005804:	2302      	movs	r3, #2
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	e001      	b.n	800580e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800580a:	2300      	movs	r3, #0
 800580c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800580e:	687b      	ldr	r3, [r7, #4]
	}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	200017a0 	.word	0x200017a0
 8005820:	200017bc 	.word	0x200017bc

08005824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d054      	beq.n	80058e4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800583a:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <xTaskPriorityDisinherit+0xcc>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d009      	beq.n	8005858 <xTaskPriorityDisinherit+0x34>
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e7fe      	b.n	8005856 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d109      	bne.n	8005874 <xTaskPriorityDisinherit+0x50>
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	e7fe      	b.n	8005872 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	1e5a      	subs	r2, r3, #1
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005886:	429a      	cmp	r2, r3
 8005888:	d02c      	beq.n	80058e4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588e:	2b00      	cmp	r3, #0
 8005890:	d128      	bne.n	80058e4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3304      	adds	r3, #4
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fa5c 	bl	8003d54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <xTaskPriorityDisinherit+0xd0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d903      	bls.n	80058c4 <xTaskPriorityDisinherit+0xa0>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <xTaskPriorityDisinherit+0xd0>)
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4a09      	ldr	r2, [pc, #36]	; (80058f8 <xTaskPriorityDisinherit+0xd4>)
 80058d2:	441a      	add	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe f9dd 	bl	8003c9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058e4:	697b      	ldr	r3, [r7, #20]
	}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	200012c0 	.word	0x200012c0
 80058f4:	2000179c 	.word	0x2000179c
 80058f8:	200012c4 	.word	0x200012c4

080058fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005906:	4b21      	ldr	r3, [pc, #132]	; (800598c <prvAddCurrentTaskToDelayedList+0x90>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800590c:	4b20      	ldr	r3, [pc, #128]	; (8005990 <prvAddCurrentTaskToDelayedList+0x94>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3304      	adds	r3, #4
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe fa1e 	bl	8003d54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591e:	d10a      	bne.n	8005936 <prvAddCurrentTaskToDelayedList+0x3a>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005926:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <prvAddCurrentTaskToDelayedList+0x94>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4819      	ldr	r0, [pc, #100]	; (8005994 <prvAddCurrentTaskToDelayedList+0x98>)
 8005930:	f7fe f9b3 	bl	8003c9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005934:	e026      	b.n	8005984 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4413      	add	r3, r2
 800593c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800593e:	4b14      	ldr	r3, [pc, #80]	; (8005990 <prvAddCurrentTaskToDelayedList+0x94>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	429a      	cmp	r2, r3
 800594c:	d209      	bcs.n	8005962 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b0f      	ldr	r3, [pc, #60]	; (8005990 <prvAddCurrentTaskToDelayedList+0x94>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f7fe f9c1 	bl	8003ce2 <vListInsert>
}
 8005960:	e010      	b.n	8005984 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005962:	4b0e      	ldr	r3, [pc, #56]	; (800599c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <prvAddCurrentTaskToDelayedList+0x94>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f7fe f9b7 	bl	8003ce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	d202      	bcs.n	8005984 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6013      	str	r3, [r2, #0]
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20001798 	.word	0x20001798
 8005990:	200012c0 	.word	0x200012c0
 8005994:	20001780 	.word	0x20001780
 8005998:	20001750 	.word	0x20001750
 800599c:	2000174c 	.word	0x2000174c
 80059a0:	200017b4 	.word	0x200017b4

080059a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059ae:	f000 faff 	bl	8005fb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <xTimerCreateTimerTask+0x80>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d021      	beq.n	80059fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059c2:	1d3a      	adds	r2, r7, #4
 80059c4:	f107 0108 	add.w	r1, r7, #8
 80059c8:	f107 030c 	add.w	r3, r7, #12
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fd ff47 	bl	8003860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	9202      	str	r2, [sp, #8]
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	2302      	movs	r3, #2
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2300      	movs	r3, #0
 80059e2:	460a      	mov	r2, r1
 80059e4:	4910      	ldr	r1, [pc, #64]	; (8005a28 <xTimerCreateTimerTask+0x84>)
 80059e6:	4811      	ldr	r0, [pc, #68]	; (8005a2c <xTimerCreateTimerTask+0x88>)
 80059e8:	f7ff f8f6 	bl	8004bd8 <xTaskCreateStatic>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <xTimerCreateTimerTask+0x8c>)
 80059f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059f2:	4b0f      	ldr	r3, [pc, #60]	; (8005a30 <xTimerCreateTimerTask+0x8c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059fa:	2301      	movs	r3, #1
 80059fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <xTimerCreateTimerTask+0x74>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	e7fe      	b.n	8005a16 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005a18:	697b      	ldr	r3, [r7, #20]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	200017f0 	.word	0x200017f0
 8005a28:	080060dc 	.word	0x080060dc
 8005a2c:	08005b65 	.word	0x08005b65
 8005a30:	200017f4 	.word	0x200017f4

08005a34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <xTimerGenericCommand+0x2c>
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	623b      	str	r3, [r7, #32]
 8005a5e:	e7fe      	b.n	8005a5e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <xTimerGenericCommand+0x94>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d02a      	beq.n	8005abe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	dc18      	bgt.n	8005aac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a7a:	f7ff feb5 	bl	80057e8 <xTaskGetSchedulerState>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d109      	bne.n	8005a98 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a84:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <xTimerGenericCommand+0x94>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	f107 0110 	add.w	r1, r7, #16
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a90:	f7fe fccc 	bl	800442c <xQueueGenericSend>
 8005a94:	6278      	str	r0, [r7, #36]	; 0x24
 8005a96:	e012      	b.n	8005abe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <xTimerGenericCommand+0x94>)
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	f107 0110 	add.w	r1, r7, #16
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f7fe fcc2 	bl	800442c <xQueueGenericSend>
 8005aa8:	6278      	str	r0, [r7, #36]	; 0x24
 8005aaa:	e008      	b.n	8005abe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <xTimerGenericCommand+0x94>)
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	f107 0110 	add.w	r1, r7, #16
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	f7fe fdb2 	bl	8004620 <xQueueGenericSendFromISR>
 8005abc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	; 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	200017f0 	.word	0x200017f0

08005acc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad6:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <prvProcessExpiredTimer+0x94>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe f935 	bl	8003d54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d021      	beq.n	8005b3c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	18d1      	adds	r1, r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	6978      	ldr	r0, [r7, #20]
 8005b06:	f000 f8d1 	bl	8005cac <prvInsertTimerInActiveList>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01e      	beq.n	8005b4e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b10:	2300      	movs	r3, #0
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2300      	movs	r3, #0
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	2100      	movs	r1, #0
 8005b1a:	6978      	ldr	r0, [r7, #20]
 8005b1c:	f7ff ff8a 	bl	8005a34 <xTimerGenericCommand>
 8005b20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d112      	bne.n	8005b4e <prvProcessExpiredTimer+0x82>
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e7fe      	b.n	8005b3a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	6978      	ldr	r0, [r7, #20]
 8005b54:	4798      	blx	r3
}
 8005b56:	bf00      	nop
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200017e8 	.word	0x200017e8

08005b64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b6c:	f107 0308 	add.w	r3, r7, #8
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f857 	bl	8005c24 <prvGetNextExpireTime>
 8005b76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 f803 	bl	8005b88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b82:	f000 f8d5 	bl	8005d30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b86:	e7f1      	b.n	8005b6c <prvTimerTask+0x8>

08005b88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b92:	f7ff fa57 	bl	8005044 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f866 	bl	8005c6c <prvSampleTimeNow>
 8005ba0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d130      	bne.n	8005c0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <prvProcessTimerOrBlockTask+0x3c>
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d806      	bhi.n	8005bc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bb6:	f7ff fa53 	bl	8005060 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ff85 	bl	8005acc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bc2:	e024      	b.n	8005c0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bca:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <prvProcessTimerOrBlockTask+0x90>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <prvProcessTimerOrBlockTask+0x50>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <prvProcessTimerOrBlockTask+0x52>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <prvProcessTimerOrBlockTask+0x94>)
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7fe ffc1 	bl	8004b70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005bee:	f7ff fa37 	bl	8005060 <xTaskResumeAll>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005bf8:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <prvProcessTimerOrBlockTask+0x98>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
}
 8005c08:	e001      	b.n	8005c0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c0a:	f7ff fa29 	bl	8005060 <xTaskResumeAll>
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	200017ec 	.word	0x200017ec
 8005c1c:	200017f0 	.word	0x200017f0
 8005c20:	e000ed04 	.word	0xe000ed04

08005c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <prvGetNextExpireTime+0x44>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <prvGetNextExpireTime+0x16>
 8005c36:	2201      	movs	r2, #1
 8005c38:	e000      	b.n	8005c3c <prvGetNextExpireTime+0x18>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <prvGetNextExpireTime+0x44>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e001      	b.n	8005c58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c58:	68fb      	ldr	r3, [r7, #12]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	200017e8 	.word	0x200017e8

08005c6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c74:	f7ff fa90 	bl	8005198 <xTaskGetTickCount>
 8005c78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <prvSampleTimeNow+0x3c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d205      	bcs.n	8005c90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c84:	f000 f930 	bl	8005ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e002      	b.n	8005c96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c96:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <prvSampleTimeNow+0x3c>)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200017f8 	.word	0x200017f8

08005cac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d812      	bhi.n	8005cf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	1ad2      	subs	r2, r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e01b      	b.n	8005d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <prvInsertTimerInActiveList+0x7c>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fd fff6 	bl	8003ce2 <vListInsert>
 8005cf6:	e012      	b.n	8005d1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d206      	bcs.n	8005d0e <prvInsertTimerInActiveList+0x62>
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e007      	b.n	8005d1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <prvInsertTimerInActiveList+0x80>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7fd ffe2 	bl	8003ce2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d1e:	697b      	ldr	r3, [r7, #20]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	200017ec 	.word	0x200017ec
 8005d2c:	200017e8 	.word	0x200017e8

08005d30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08e      	sub	sp, #56	; 0x38
 8005d34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d36:	e0c6      	b.n	8005ec6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da17      	bge.n	8005d6e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	3304      	adds	r3, #4
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <prvProcessReceivedCommands+0x2e>
 8005d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e7fe      	b.n	8005d5c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d64:	6850      	ldr	r0, [r2, #4]
 8005d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d68:	6892      	ldr	r2, [r2, #8]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f2c0 80a7 	blt.w	8005ec4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	3304      	adds	r3, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd ffe4 	bl	8003d54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff ff6c 	bl	8005c6c <prvSampleTimeNow>
 8005d94:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b09      	cmp	r3, #9
 8005d9a:	f200 8094 	bhi.w	8005ec6 <prvProcessReceivedCommands+0x196>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <prvProcessReceivedCommands+0x74>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dcd 	.word	0x08005dcd
 8005db0:	08005e3f 	.word	0x08005e3f
 8005db4:	08005e53 	.word	0x08005e53
 8005db8:	08005e9b 	.word	0x08005e9b
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005dcd 	.word	0x08005dcd
 8005dc4:	08005e3f 	.word	0x08005e3f
 8005dc8:	08005e53 	.word	0x08005e53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	18d1      	adds	r1, r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dec:	f7ff ff5e 	bl	8005cac <prvInsertTimerInActiveList>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d067      	beq.n	8005ec6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d05c      	beq.n	8005ec6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	441a      	add	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e1e:	f7ff fe09 	bl	8005a34 <xTimerGenericCommand>
 8005e22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d14d      	bne.n	8005ec6 <prvProcessReceivedCommands+0x196>
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	e7fe      	b.n	8005e3c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005e50:	e039      	b.n	8005ec6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <prvProcessReceivedCommands+0x156>
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e7fe      	b.n	8005e84 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	18d1      	adds	r1, r2, r3
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e94:	f7ff ff0a 	bl	8005cac <prvInsertTimerInActiveList>
					break;
 8005e98:	e015      	b.n	8005ec6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d103      	bne.n	8005eb0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eaa:	f7fd fdb5 	bl	8003a18 <vPortFree>
 8005eae:	e00a      	b.n	8005ec6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ec2:	e000      	b.n	8005ec6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005ec4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <prvProcessReceivedCommands+0x1b4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	1d39      	adds	r1, r7, #4
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe fc3a 	bl	8004748 <xQueueReceive>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f47f af2e 	bne.w	8005d38 <prvProcessReceivedCommands+0x8>
	}
}
 8005edc:	bf00      	nop
 8005ede:	3730      	adds	r7, #48	; 0x30
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	200017f0 	.word	0x200017f0

08005ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eee:	e047      	b.n	8005f80 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <prvSwitchTimerLists+0xc0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efa:	4b2b      	ldr	r3, [pc, #172]	; (8005fa8 <prvSwitchTimerLists+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fd ff23 	bl	8003d54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02d      	beq.n	8005f80 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d90e      	bls.n	8005f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <prvSwitchTimerLists+0xc0>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f7fd fec8 	bl	8003ce2 <vListInsert>
 8005f52:	e015      	b.n	8005f80 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f54:	2300      	movs	r3, #0
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff fd68 	bl	8005a34 <xTimerGenericCommand>
 8005f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <prvSwitchTimerLists+0x98>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	e7fe      	b.n	8005f7e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <prvSwitchTimerLists+0xc0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1b2      	bne.n	8005ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <prvSwitchTimerLists+0xc0>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <prvSwitchTimerLists+0xc4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a04      	ldr	r2, [pc, #16]	; (8005fa8 <prvSwitchTimerLists+0xc0>)
 8005f96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f98:	4a04      	ldr	r2, [pc, #16]	; (8005fac <prvSwitchTimerLists+0xc4>)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6013      	str	r3, [r2, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200017e8 	.word	0x200017e8
 8005fac:	200017ec 	.word	0x200017ec

08005fb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fb6:	f7fe f821 	bl	8003ffc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fba:	4b15      	ldr	r3, [pc, #84]	; (8006010 <prvCheckForValidListAndQueue+0x60>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d120      	bne.n	8006004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fc2:	4814      	ldr	r0, [pc, #80]	; (8006014 <prvCheckForValidListAndQueue+0x64>)
 8005fc4:	f7fd fe3c 	bl	8003c40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005fc8:	4813      	ldr	r0, [pc, #76]	; (8006018 <prvCheckForValidListAndQueue+0x68>)
 8005fca:	f7fd fe39 	bl	8003c40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005fce:	4b13      	ldr	r3, [pc, #76]	; (800601c <prvCheckForValidListAndQueue+0x6c>)
 8005fd0:	4a10      	ldr	r2, [pc, #64]	; (8006014 <prvCheckForValidListAndQueue+0x64>)
 8005fd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005fd4:	4b12      	ldr	r3, [pc, #72]	; (8006020 <prvCheckForValidListAndQueue+0x70>)
 8005fd6:	4a10      	ldr	r2, [pc, #64]	; (8006018 <prvCheckForValidListAndQueue+0x68>)
 8005fd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	4b11      	ldr	r3, [pc, #68]	; (8006024 <prvCheckForValidListAndQueue+0x74>)
 8005fe0:	4a11      	ldr	r2, [pc, #68]	; (8006028 <prvCheckForValidListAndQueue+0x78>)
 8005fe2:	2110      	movs	r1, #16
 8005fe4:	200a      	movs	r0, #10
 8005fe6:	f7fe f98b 	bl	8004300 <xQueueGenericCreateStatic>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4b08      	ldr	r3, [pc, #32]	; (8006010 <prvCheckForValidListAndQueue+0x60>)
 8005fee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <prvCheckForValidListAndQueue+0x60>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <prvCheckForValidListAndQueue+0x60>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	490b      	ldr	r1, [pc, #44]	; (800602c <prvCheckForValidListAndQueue+0x7c>)
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fd8e 	bl	8004b20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006004:	f7fe f828 	bl	8004058 <vPortExitCritical>
}
 8006008:	bf00      	nop
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	200017f0 	.word	0x200017f0
 8006014:	200017c0 	.word	0x200017c0
 8006018:	200017d4 	.word	0x200017d4
 800601c:	200017e8 	.word	0x200017e8
 8006020:	200017ec 	.word	0x200017ec
 8006024:	2000189c 	.word	0x2000189c
 8006028:	200017fc 	.word	0x200017fc
 800602c:	080060e4 	.word	0x080060e4

08006030 <__libc_init_array>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4e0d      	ldr	r6, [pc, #52]	; (8006068 <__libc_init_array+0x38>)
 8006034:	4c0d      	ldr	r4, [pc, #52]	; (800606c <__libc_init_array+0x3c>)
 8006036:	1ba4      	subs	r4, r4, r6
 8006038:	10a4      	asrs	r4, r4, #2
 800603a:	2500      	movs	r5, #0
 800603c:	42a5      	cmp	r5, r4
 800603e:	d109      	bne.n	8006054 <__libc_init_array+0x24>
 8006040:	4e0b      	ldr	r6, [pc, #44]	; (8006070 <__libc_init_array+0x40>)
 8006042:	4c0c      	ldr	r4, [pc, #48]	; (8006074 <__libc_init_array+0x44>)
 8006044:	f000 f82c 	bl	80060a0 <_init>
 8006048:	1ba4      	subs	r4, r4, r6
 800604a:	10a4      	asrs	r4, r4, #2
 800604c:	2500      	movs	r5, #0
 800604e:	42a5      	cmp	r5, r4
 8006050:	d105      	bne.n	800605e <__libc_init_array+0x2e>
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006058:	4798      	blx	r3
 800605a:	3501      	adds	r5, #1
 800605c:	e7ee      	b.n	800603c <__libc_init_array+0xc>
 800605e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006062:	4798      	blx	r3
 8006064:	3501      	adds	r5, #1
 8006066:	e7f2      	b.n	800604e <__libc_init_array+0x1e>
 8006068:	08006160 	.word	0x08006160
 800606c:	08006160 	.word	0x08006160
 8006070:	08006160 	.word	0x08006160
 8006074:	08006164 	.word	0x08006164

08006078 <memcpy>:
 8006078:	b510      	push	{r4, lr}
 800607a:	1e43      	subs	r3, r0, #1
 800607c:	440a      	add	r2, r1
 800607e:	4291      	cmp	r1, r2
 8006080:	d100      	bne.n	8006084 <memcpy+0xc>
 8006082:	bd10      	pop	{r4, pc}
 8006084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608c:	e7f7      	b.n	800607e <memcpy+0x6>

0800608e <memset>:
 800608e:	4402      	add	r2, r0
 8006090:	4603      	mov	r3, r0
 8006092:	4293      	cmp	r3, r2
 8006094:	d100      	bne.n	8006098 <memset+0xa>
 8006096:	4770      	bx	lr
 8006098:	f803 1b01 	strb.w	r1, [r3], #1
 800609c:	e7f9      	b.n	8006092 <memset+0x4>
	...

080060a0 <_init>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

080060ac <_fini>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr
